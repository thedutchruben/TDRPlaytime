This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/dependabot.yml
.github/FUNDING.yml
.github/ISSUE_TEMPLATE/bug_report.md
.github/ISSUE_TEMPLATE/feature_request.md
.github/test-server/Dockerfile
.github/test-server/Dockerfile.test
.github/test-server/download-plugin.sh
.github/test-server/server.properties
.github/test-server/test.sh
.github/workflows/add-to-issue.yml
.github/workflows/build-release-versions.yml
.github/workflows/code-coverage.yml
.github/workflows/comment-on-pr.yml
.github/workflows/javadoc.yml
.github/workflows/notification.yaml
.github/workflows/pr-test-report.yml
.github/workflows/pre-release.yml
.github/workflows/release-checks.yml
.github/workflows/run-tests.yml
.github/workflows/server-tests.yml
.github/workflows/update-test-server.yml
.gitignore
pom.xml
README.md
spigotpage.txt
src/main/java/nl/thedutchruben/playtime/core/ConfigFiles.java
src/main/java/nl/thedutchruben/playtime/core/DependencyLoader.java
src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneCreateEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneDeleteEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneReceiveEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneUpdateEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/player/AsyncPlaytimePlayerUpdatePlaytimeEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/player/PlaytimePlayerEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/player/PlaytimePlayerLoadedEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/player/PlaytimePlayerSaveEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/player/PlaytimePlayerUnLoadedEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneCreateEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneDeleteEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneReceiveEvent.java
src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneUpdateEvent.java
src/main/java/nl/thedutchruben/playtime/core/objects/Milestone.java
src/main/java/nl/thedutchruben/playtime/core/objects/MilestoneTest.java
src/main/java/nl/thedutchruben/playtime/core/objects/PlaytimeUser.java
src/main/java/nl/thedutchruben/playtime/core/objects/PlaytimeUserTest.java
src/main/java/nl/thedutchruben/playtime/core/objects/RepeatingMilestone.java
src/main/java/nl/thedutchruben/playtime/core/Settings.java
src/main/java/nl/thedutchruben/playtime/core/storage/exceptions/StorageTypeNotFoundException.java
src/main/java/nl/thedutchruben/playtime/core/storage/SqlStatements.java
src/main/java/nl/thedutchruben/playtime/core/storage/Storage.java
src/main/java/nl/thedutchruben/playtime/core/storage/types/Mongodb.java
src/main/java/nl/thedutchruben/playtime/core/storage/types/Mysql.java
src/main/java/nl/thedutchruben/playtime/core/storage/types/SqlLite.java
src/main/java/nl/thedutchruben/playtime/core/storage/types/Yaml.java
src/main/java/nl/thedutchruben/playtime/core/translations/Messages.java
src/main/java/nl/thedutchruben/playtime/extentions/BStatsExtension.java
src/main/java/nl/thedutchruben/playtime/extentions/PlaceholderAPIExtension.java
src/main/java/nl/thedutchruben/playtime/modules/milestones/commands/MileStoneCommand.java
src/main/java/nl/thedutchruben/playtime/modules/milestones/commands/RepeatingMilestoneCommand.java
src/main/java/nl/thedutchruben/playtime/modules/milestones/listeners/UpdatePlaytimeListener.java
src/main/java/nl/thedutchruben/playtime/modules/player/commands/PlayTimeCommand.java
src/main/java/nl/thedutchruben/playtime/modules/player/listeners/PlayerJoinListener.java
src/main/java/nl/thedutchruben/playtime/modules/player/listeners/PlayerQuitListener.java
src/main/java/nl/thedutchruben/playtime/modules/player/runnables/SavePlayTimeRunnable.java
src/main/java/nl/thedutchruben/playtime/modules/player/runnables/UpdatePlayTimeRunnable.java
src/main/java/nl/thedutchruben/playtime/modules/playtime_history/commands/PlaytimeHistoryCommand.java
src/main/java/nl/thedutchruben/playtime/modules/playtime_history/listeners/PlayTimePlayerLoadedListener.java
src/main/java/nl/thedutchruben/playtime/modules/playtime_history/runnables/MidnightSaveJoinsRunnable.java
src/main/java/nl/thedutchruben/playtime/modules/playtime_history/runnables/MidnightSaveQuitsRunnable.java
src/main/java/nl/thedutchruben/playtime/Playtime.java
src/main/java/nl/thedutchruben/playtime/PlayTimePlugin.java
src/main/java/nl/thedutchruben/playtime/PlayTimePluginTest.java
src/main/java/nl/thedutchruben/playtime/utils/Replacement.java
src/main/resources/plugin.yml
TDRPlayTime-logo/info.txt
TDRPlayTime-logo/vector/default-monochrome-black.svg
TDRPlayTime-logo/vector/default-monochrome-white.svg
TDRPlayTime-logo/vector/default-monochrome.svg
TDRPlayTime-logo/vector/default.svg
TDRPlayTime-logo/vector/isolated-layout.svg
TDRPlayTime-logo/vector/isolated-monochrome-black.svg
TDRPlayTime-logo/vector/isolated-monochrome-white.svg
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/dependabot.yml">
# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for all configuration options:
# https://help.github.com/github/administering-a-repository/configuration-options-for-dependency-updates

version: 2
updates:
  - package-ecosystem: "maven" # See documentation for possible values
    directory: "/" # Location of package manifests
    open-pull-requests-limit: 20
    schedule:
      interval: "daily"
  - package-ecosystem: "github-actions"
    directory: "/"
    open-pull-requests-limit: 20
    schedule:
      # Check for updates to GitHub Actions every weekday
      interval: "daily"
</file>

<file path=".github/FUNDING.yml">
custom: [ "https://www.paypal.com/paypalme/RGSYT" ]
</file>

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Create a report to help us improve
title: "[BUG]"
labels: bug
assignees: thedutchruben

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:

1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Additional context**
Add any other context about the problem here.
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
</file>

<file path=".github/workflows/add-to-issue.yml">
name: Add me to issue

on:
  issues:
    types: [ opened ]
jobs:
  label_issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@v7
        name: Add assignee
        with:
          script: |
            github.rest.issues.addAssignees({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              assignees: ["TheDutchRuben"]
            })
      - name: send message
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.ISSUE_DISCORD_ID }}
          webhook_token: ${{ secrets.ISSUE_WEBHOOK_TOKEN }}
          message: "New issue opened: ${{ github.event.issue.title }}\n${{ github.event.issue.html_url }}"
          color: "#48f442"
          username: "Playtime Builds"
</file>

<file path=".gitignore">
# User-specific stuff
.idea/

*.iml
*.ipr
*.iws

# IntelliJ
out/

# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*

*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

target/

pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next

release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
.mvn/wrapper/maven-wrapper.jar
.flattened-pom.xml

# Common working directory
run/
</file>

<file path="spigotpage.txt">
[IMG]https://files.thedutchruben.nl/download/1615723574/cover-smaller.png/raw[/IMG]
TDRPlaytime is a plugin that keeps track of the playing time of your players.
The plugin has support to view a top 10, create milestones and use your own language.
This plugin has support for yml and mysql.

[IMG]https://files.thedutchruben.nl/download/1617195834/commands.png/raw[/IMG]
/playtime                      :  see your playtime
/playtime top                  : see the top 10 online time
/playtime reset <username>     : Reset user's time
/playtime <playername/uuid>    : see other user's online time
/playtime migratefromminecraft : Migrates the minecraft playtime to the database WARNING: THE PLAYERS PLAYTIME WIL BE OVERRIDDEN IN THE DATABASE

/milestone create <name> <time in seconds>  : Create a milestone.
/milestone additem <milestone>              : Add the item in your hand as reward for the milestone
/milestone addcommand <milestone> <command> : Add a command that will be executed by the console to the milestone

[IMG]https://files.thedutchruben.nl/download/1617195854/permissions.png/raw[/IMG]
/playtime                      : playtime.playtime
/playtime top                  : playtime.playtime.top
/playtime reset <username>     : playtime.playtime.reset
/playtime <playername/uuid>    : playtime.playtime.other
/playtime migratefromminecraft : playtime.playtime.migratefromminecraft

/milestone create <name> <time in seconds>  : playtime.milestone
/milestone additem <milestone>              : playtime.milestone.additem
/milestone addcommand <milestone> <command> : playtime.milestone.addcommand

[IMG]https://files.thedutchruben.nl/download/1617195872/milestones.png/raw[/IMG]
Milestones can be made for specific times, these times must be entered in seconds.
With a milestone you can give rewards in the form of items and commands.
The commands will be executed in the console for the playername you can use the placeholder %playername% in the command and for the UUID %playeruuid%.

[IMG]https://files.thedutchruben.nl/download/1617195928/Language.png/raw[/IMG]
TDRPlaytime supports the following languages English, Dutch, German and French.
It is possible to add your own language and edit the messages via the lang folder.

You can change the language in the config.yml
language: eng adapt to language: nl_NL/ de_DE / fr_FR /en_GB or your own language
[IMG]https://files.thedutchruben.nl/download/1617195976/PlaceHolderApi.png/raw[/IMG]
In TDRPlaytime we added an expantion to PlaceHolderApi.

- %tdrplaytime_time% : Show full time such as / playtime
- %tdrplaytime_days_number% : Show your online days as a number.
- %tdrplaytime_hour_number% : Show your online hours as a number.
- %tdrplaytime_minutes_number% : Show your online minutes as a number.
- %tdrplaytime_seconds_number% : Show your seconds as a number online.
- %tdrplaytime_total_hour_number% : Show the total (including days) amount of hours as a number

[IMG]https://files.thedutchruben.nl/download/1623334257/API.png/raw[/IMG]

There are 2 events you can listen to.
PlayTimeCheckEvent is executed every time there is a check.
PlayTimeUpdatePlayerEvent Run on every player. When the playtime is updated at this event you can request the old time and the new time of a player.

[IMG]https://bstats.org/signatures/bukkit/TDRPlaytime.svg[/IMG]

[CENTER][B]Todo
- None if you have a idea let me know[/B][/CENTER]
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneEvent.java">
package nl.thedutchruben.playtime.core.events.milestone;

import lombok.Getter;
import nl.thedutchruben.playtime.core.objects.Milestone;
import org.bukkit.event.Event;
import org.bukkit.event.HandlerList;

/**
 * Base for the milestone events
 */
public abstract class MilestoneEvent extends Event {
    private static final HandlerList handlers = new HandlerList();
    @Getter
    private Milestone milestone;

    public MilestoneEvent(Milestone milestone) {
        this.milestone = milestone;
    }

    public static HandlerList getHandlerList() {
        return handlers;
    }

    @Override
    public HandlerList getHandlers() {
        return handlers;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/player/AsyncPlaytimePlayerUpdatePlaytimeEvent.java">
package nl.thedutchruben.playtime.core.events.player;

import lombok.Getter;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;

/**
 * This events get's called every time that the playtime gets updated (every 15 seconds)
 */
@Getter
public class AsyncPlaytimePlayerUpdatePlaytimeEvent extends PlaytimePlayerEvent {
    private final float oldPlaytime;
    private final float newPlaytime;

    /**
     * Create a new PlaytimePlayerUpdatePlaytimeEvent
     *
     * @param user        the user that is updated
     * @param async       if the event is async
     * @param oldPlaytime the old playtime
     * @param newPlaytime the new playtime
     */
    public AsyncPlaytimePlayerUpdatePlaytimeEvent(PlaytimeUser user, boolean async, float oldPlaytime, float newPlaytime) {
        super(user, async);
        this.oldPlaytime = oldPlaytime;
        this.newPlaytime = newPlaytime;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/player/PlaytimePlayerEvent.java">
package nl.thedutchruben.playtime.core.events.player;

import lombok.Getter;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import org.bukkit.event.Event;
import org.bukkit.event.HandlerList;

/**
 * This is the base class for all the player events
 */
@Getter
public abstract class PlaytimePlayerEvent extends Event {
    private static final HandlerList handlers = new HandlerList();
    private PlaytimeUser user;

    /**
     * Create a new PlaytimePlayerEvent
     *
     * @param user  The user
     * @param async If the event is async
     */
    public PlaytimePlayerEvent(PlaytimeUser user, boolean async) {
        super(async);
        this.user = user;
    }

    public static HandlerList getHandlerList() {
        return handlers;
    }

    @Override
    public HandlerList getHandlers() {
        return handlers;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/player/PlaytimePlayerSaveEvent.java">
package nl.thedutchruben.playtime.core.events.player;

import nl.thedutchruben.playtime.core.objects.PlaytimeUser;

/**
 * This event is called when a player is saved
 */
public class PlaytimePlayerSaveEvent extends PlaytimePlayerEvent {

    /**
     * Create a new PlaytimePlayerSaveEvent
     *
     * @param user  the user that is saved
     * @param async if the event is async
     */
    public PlaytimePlayerSaveEvent(PlaytimeUser user, boolean async) {
        super(user, async);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/player/PlaytimePlayerUnLoadedEvent.java">
package nl.thedutchruben.playtime.core.events.player;

import nl.thedutchruben.playtime.core.objects.PlaytimeUser;

/**
 * This event is called when a player is unloaded
 */
public class PlaytimePlayerUnLoadedEvent extends PlaytimePlayerEvent {
    /**
     * Create a new PlaytimePlayerUnLoadedEvent
     *
     * @param user  the user that is unloaded
     * @param async if the event is async
     */
    public PlaytimePlayerUnLoadedEvent(PlaytimeUser user, boolean async) {
        super(user, async);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneCreateEvent.java">
package nl.thedutchruben.playtime.core.events.repeatingmilestone;

import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;

/**
 * Event that is called when a RepeatingMilestone is created
 */
public class RepeatingMilestoneCreateEvent extends RepeatingMilestoneEvent {

    /**
     * Create a new RepeatingMilestoneCreateEvent
     *
     * @param repeatingMilestone The RepeatingMilestone that is created
     */
    public RepeatingMilestoneCreateEvent(RepeatingMilestone repeatingMilestone) {
        super(repeatingMilestone);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/extentions/BStatsExtension.java">
package nl.thedutchruben.playtime.extentions;

import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.Settings;
import org.bstats.bukkit.Metrics;
import org.bstats.charts.SimplePie;
import org.bukkit.Bukkit;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.InputStream;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BStatsExtension {

    public void startBStats(JavaPlugin plugin) {
        Metrics metrics = new Metrics(plugin, 9404);

        String[] pluginNames = {"PlaceholderAPI", "HolographicDisplay", "DecentHolograms", "WorldGuard", "JoinAndQuitMessages"};
        for (String pluginName : pluginNames) {
            Plugin pl = Bukkit.getPluginManager().getPlugin(pluginName);
            if (pl != null) {
                metrics.addCustomChart(new SimplePie("addons_use", () -> pluginName));
            }
        }

        try (InputStream inputStream = plugin.getClass().getResourceAsStream("/plugin.yml")) {
            byte[] buffer = inputStream != null ? inputStream.readAllBytes() : new byte[0];
            String pluginYml = new String(buffer);

            Matcher matcher = Pattern.compile("downloadSource:\\s*'([^']+)'").matcher(pluginYml);
            String downloadSource = matcher.find() ? matcher.group(1) : "unknown";
            metrics.addCustomChart(new SimplePie("download_source", () -> downloadSource));
        } catch (Exception e) {
            plugin.getLogger().warning(e.getMessage());
        }

        metrics.addCustomChart(new SimplePie("bungeecord", () -> String.valueOf(plugin.getServer().spigot().getConfig().getBoolean("settings.bungeecord"))));
        metrics.addCustomChart(new SimplePie("database_type", () -> Playtime.getInstance().getStorage().getName()));
        metrics.addCustomChart(new SimplePie("update_checker", () -> String.valueOf(Settings.UPDATE_CHECK.getValue())));
        metrics.addCustomChart(new SimplePie("uses_milestones", () -> String.valueOf(Playtime.getInstance().getMilestones().size() > 1)));
        metrics.addCustomChart(new SimplePie("uses_repeating_milestones", () -> String.valueOf(Playtime.getInstance().getRepeatingMilestones().size() > 1)));
        metrics.addCustomChart(new SimplePie("count_afk_time", () -> String.valueOf(Settings.AFK_COUNT_TIME.getValue())));
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/PlayTimePlugin.java">
package nl.thedutchruben.playtime;

import nl.thedutchruben.playtime.core.DependencyLoader;
import org.bukkit.plugin.java.JavaPlugin;

/**
 * The main class of the plugin
 * Tdrplaytime is the playtime plugin for tracking the playtime of players and rewarding them!
 *
 * @version 1.0.0
 * @see JavaPlugin
 * @since 1.0.0
 */
public class PlayTimePlugin extends JavaPlugin {
    private Playtime playtime;

    @Override
    public void onLoad() {
        // Load the dependencies of the plugin
        // the dependencies will load by downloading the jar from the maven repository
        // this will keep the download size of the plugin low
        DependencyLoader.load(this);
    }

    @Override
    public void onEnable() {
        playtime = new Playtime(this);
        playtime.onEnable(this);
    }

    @Override
    public void onDisable() {
        if (playtime != null) {
            playtime.onDisable();
        }
    }
}
</file>

<file path="src/main/resources/plugin.yml">
name: TDRPlaytime
version: ${project.version}
main: nl.thedutchruben.playtime.PlayTimePlugin
api-version: 1.13
downloadSource: 'GITHUB'
authors: [ TheDutchRuben ]
softdepend:
  - PlaceholderAPI
  - EssentialsX
description: Playtime plugin with milestone support
commands:
  playtime:
    aliases:
      - playertime
      - onlinetime
    description: Main play time command
    permission: playtime.playtime
  milestone:
    aliases:
      - mstone
      - miliestone
    description: Setup the milestones of the playtime plugin
    permission: playtime.milestone
  repeatingmilestone:
    aliases:
      - rmstone
      - rmiliestone
    description: Setup the repeating milestones of the playtime plugin
    permission: playtime.repeatingmilestone
permissions:
  playtime.playtime:
    default: true
  playtime.playtime.other:
    default: op
  playtime.playtime.reset:
    default: op
  playtime.playtime.top:
    default: op
  playtime.milestone:
    default: op
  playtime.milestone.additem:
    default: op
  playtime.milestone.addcommand:
    default: op
</file>

<file path="TDRPlayTime-logo/info.txt">
Hope you enjoy your new logo, here are the people that
made your beautiful logo happen :)
font name: Dustismo_Roman_Bold
font link: https://www.fontsquirrel.com/fonts/Dustismo
font author: Dustin Norlander
font author site: http://www.cheapskatefonts.com/


icon designer: NAS
icon designer link: /nas.ztu
        

fontColor: {"hex":"#7E5DFC"}
bgColor: {"hex":"#261836"}
iconColor: {"hex":"#7E5DFC"}
</file>

<file path="TDRPlayTime-logo/vector/default-monochrome-black.svg">
<svg xmlns="http://www.w3.org/2000/svg" class="iconAbove" viewBox="0 0 369.902 163">
    <g id="994e42ba-6db0-4803-a128-e251c8f94f76" fill="#000">
        <path d="M0.30 3.04L7.49 3.04L7.75 4.85L7.01 4.85L7.01 4.85Q6.84 3.74 6.23 3.74L6.23 3.74L4.75 3.74L4.75 12.30L5.43 12.30L5.43 13.01L2.32 13.01L2.32 12.30L3.04 12.30L3.04 3.74L1.55 3.74L1.55 3.74Q0.94 3.74 0.78 4.85L0.78 4.85L0.04 4.85L0.30 3.04ZM10.60 3.74L10.60 12.31L11.71 12.31L11.71 12.31Q12.57 12.31 12.94 12.07L12.94 12.07L12.94 12.07Q14.27 11.22 14.27 7.97L14.27 7.97L14.27 7.97Q14.27 4.83 13.00 4.03L13.00 4.03L13.00 4.03Q12.77 3.88 12.43 3.81L12.43 3.81L12.43 3.81Q12.09 3.74 11.63 3.74L11.63 3.74L10.60 3.74ZM8.20 3.74L8.20 3.04L12.07 3.04L12.07 3.04Q13.17 3.04 13.98 3.42L13.98 3.42L13.98 3.42Q14.78 3.81 15.24 4.53L15.24 4.53L15.24 4.53Q15.59 5.11 15.78 5.99L15.78 5.99L15.78 5.99Q15.97 6.87 15.97 8.02L15.97 8.02L15.97 8.02Q15.97 9.14 15.78 10.04L15.78 10.04L15.78 10.04Q15.59 10.94 15.27 11.51L15.27 11.51L15.27 11.51Q14.81 12.23 14.02 12.62L14.02 12.62L14.02 12.62Q13.23 13.01 12.13 13.01L12.13 13.01L8.20 13.01L8.20 12.30L8.89 12.30L8.89 3.74L8.20 3.74ZM19.22 3.74L19.22 7.68L20.95 7.68L20.95 7.68Q21.23 7.68 21.50 7.50L21.50 7.50L21.50 7.50Q21.77 7.33 22.01 7L22.01 7L22.01 7Q22.22 6.69 22.34 6.36L22.34 6.36L22.34 6.36Q22.46 6.03 22.46 5.71L22.46 5.71L22.46 5.71Q22.46 4.93 22.00 4.33L22.00 4.33L22.00 4.33Q21.53 3.73 20.79 3.73L20.79 3.73L19.22 3.74ZM19.22 8.40L19.22 12.30L19.96 12.30L19.96 13.01L16.80 13.01L16.80 12.30L17.49 12.31L17.49 3.74L16.80 3.74L16.80 3.04L20.99 3.04L20.99 3.04Q21.63 3.04 22.18 3.20L22.18 3.20L22.18 3.20Q22.74 3.37 23.18 3.68L23.18 3.68L23.18 3.68Q23.67 4.05 23.93 4.56L23.93 4.56L23.93 4.56Q24.19 5.07 24.19 5.70L24.19 5.70L24.19 5.70Q24.19 6.17 24.01 6.60L24.01 6.60L24.01 6.60Q23.83 7.03 23.50 7.40L23.50 7.40L23.50 7.40Q23.20 7.71 22.83 7.94L22.83 7.94L22.83 7.94Q22.46 8.18 22.05 8.29L22.05 8.29L22.05 8.29Q22.31 9.20 22.93 10.19L22.93 10.19L22.93 10.19Q23.54 11.18 24.50 12.30L24.50 12.30L25.24 12.30L25.24 13.01L23.02 13.01L23.02 13.01Q22.19 11.91 21.53 10.76L21.53 10.76L21.53 10.76Q20.86 9.61 20.36 8.40L20.36 8.40L19.22 8.40ZM28.29 3.74L28.29 7.68L30.02 7.68L30.02 7.68Q30.30 7.68 30.57 7.50L30.57 7.50L30.57 7.50Q30.84 7.33 31.08 7L31.08 7L31.08 7Q31.29 6.69 31.41 6.36L31.41 6.36L31.41 6.36Q31.53 6.03 31.53 5.71L31.53 5.71L31.53 5.71Q31.53 4.93 31.08 4.33L31.08 4.33L31.08 4.33Q30.60 3.73 29.86 3.73L29.86 3.73L28.29 3.74ZM25.87 13.01L25.87 12.30L26.56 12.31L26.56 3.74L25.87 3.74L25.87 3.04L30.06 3.04L30.06 3.04Q30.69 3.04 31.24 3.20L31.24 3.20L31.24 3.20Q31.79 3.37 32.25 3.68L32.25 3.68L32.25 3.68Q32.73 4.05 33.00 4.56L33.00 4.56L33.00 4.56Q33.26 5.07 33.26 5.70L33.26 5.70L33.26 5.70Q33.26 6.28 33.02 6.77L33.02 6.77L33.02 6.77Q32.78 7.27 32.34 7.66L32.34 7.66L32.34 7.66Q31.91 8.01 31.39 8.21L31.39 8.21L31.39 8.21Q30.87 8.40 30.29 8.40L30.29 8.40L28.29 8.40L28.29 12.30L29.03 12.30L29.03 13.01L25.87 13.01ZM33.89 13.01L33.89 12.35L34.58 12.35L34.58 3.70L33.89 3.70L33.89 3.04L36.18 3.04L36.18 12.35L36.87 12.35L36.87 13.01L33.89 13.01ZM39.94 12.52L39.94 12.52L39.94 12.52Q40.46 12.52 41.03 11.98L41.03 11.98L41.03 11.98Q41.29 11.74 41.48 11.48L41.48 11.48L41.48 11.48Q41.67 11.22 41.77 10.94L41.77 10.94L41.77 9.41L41.77 9.41Q41.58 9.49 41.32 9.58L41.32 9.58L41.32 9.58Q41.06 9.67 40.71 9.76L40.71 9.76L40.71 9.76L40.71 9.76Q40.33 9.88 40.07 9.99L40.07 9.99L40.07 9.99Q39.81 10.10 39.65 10.23L39.65 10.23L39.65 10.22L39.65 10.22Q39.21 10.58 39.21 11.31L39.21 11.31L39.21 11.31Q39.21 11.80 39.38 12.13L39.38 12.13L39.38 12.13Q39.57 12.52 39.94 12.52ZM38.20 8.16L38.20 6.48L38.20 6.48Q39.01 6.29 39.55 6.19L39.55 6.19L39.55 6.19Q40.09 6.09 40.37 6.09L40.37 6.09L40.37 6.09Q41.92 6.09 42.57 6.57L42.57 6.57L42.57 6.57Q43.35 7.16 43.35 8.68L43.35 8.68L43.35 11.56L43.35 11.56Q43.35 12.35 43.37 12.35L43.37 12.35L44.16 12.35L44.16 13.01L42.05 13.01L42.05 13.01Q41.84 12.67 41.78 12.15L41.78 12.15L41.78 12.15Q41.62 12.34 41.42 12.51L41.42 12.51L41.42 12.51Q41.21 12.68 40.99 12.81L40.99 12.81L40.99 12.81Q40.33 13.17 39.60 13.17L39.60 13.17L39.60 13.17Q38.73 13.17 38.19 12.73L38.19 12.73L38.19 12.73Q37.62 12.24 37.62 11.36L37.62 11.36L37.62 11.36Q37.62 10.23 38.49 9.76L38.49 9.76L38.49 9.76Q38.91 9.54 40.25 9.27L40.25 9.27L40.25 9.27Q41.33 9.06 41.72 8.69L41.72 8.69L41.72 8.69Q41.73 8.62 41.75 8.53L41.75 8.53L41.75 8.53Q41.76 8.45 41.76 8.35L41.76 8.35L41.76 8.35Q41.76 6.75 40.09 6.75L40.09 6.75L40.09 6.75Q39.00 6.75 38.85 8.16L38.85 8.16L38.20 8.16ZM47.69 6.93L47.22 6.93L47.22 6.93Q47.41 7.42 47.58 7.86L47.58 7.86L47.58 7.86Q47.75 8.30 47.92 8.74L47.92 8.74L47.92 8.74Q48.09 9.17 48.27 9.62L48.27 9.62L48.27 9.62Q48.44 10.06 48.63 10.56L48.63 10.56L48.63 10.56Q48.81 10.09 48.98 9.65L48.98 9.65L48.98 9.65Q49.15 9.20 49.32 8.76L49.32 8.76L49.32 8.76Q49.49 8.31 49.66 7.86L49.66 7.86L49.66 7.86Q49.83 7.41 50.02 6.93L50.02 6.93L49.53 6.93L49.53 6.27L51.45 6.27L51.45 6.93L50.73 6.93L50.73 6.93Q49.98 8.89 49.25 10.83L49.25 10.83L49.25 10.83Q48.51 12.78 47.78 14.74L47.78 14.74L47.78 14.74Q47.20 16.25 46.07 16.25L46.07 16.25L46.07 16.25Q45.86 16.25 45.58 16.19L45.58 16.19L45.58 14.92L45.58 14.92Q46.08 15.17 46.35 15.17L46.35 15.17L46.35 15.17Q46.87 15.17 47.17 14.48L47.17 14.48L47.16 14.49L47.16 14.49Q47.33 14.02 47.49 13.59L47.49 13.59L47.49 13.59Q47.65 13.15 47.82 12.69L47.82 12.69L47.82 12.69Q47.26 11.22 46.71 9.81L46.71 9.81L46.71 9.81Q46.17 8.39 45.60 6.93L45.60 6.93L44.88 6.93L44.88 6.27L47.69 6.27L47.69 6.93ZM51.90 3.04L59.08 3.04L59.34 4.85L58.60 4.85L58.60 4.85Q58.44 3.74 57.83 3.74L57.83 3.74L56.35 3.74L56.35 12.30L57.03 12.30L57.03 13.01L53.92 13.01L53.92 12.30L54.63 12.30L54.63 3.74L53.15 3.74L53.15 3.74Q52.54 3.74 52.38 4.85L52.38 4.85L51.64 4.85L51.90 3.04ZM60.07 6.53L61.84 6.53L61.84 12.61L62.51 12.61L62.51 12.74L60.07 12.74L60.07 12.61L60.78 12.61L60.78 6.67L60.07 6.67L60.07 6.53ZM60.41 4.03L60.41 4.03L60.41 4.03Q60.41 3.84 60.48 3.68L60.48 3.68L60.48 3.68Q60.55 3.51 60.67 3.39L60.67 3.39L60.67 3.39Q60.79 3.27 60.96 3.20L60.96 3.20L60.96 3.20Q61.12 3.12 61.30 3.12L61.30 3.12L61.30 3.12Q61.49 3.12 61.65 3.20L61.65 3.20L61.65 3.20Q61.82 3.27 61.94 3.39L61.94 3.39L61.94 3.39Q62.06 3.51 62.13 3.68L62.13 3.68L62.13 3.68Q62.20 3.84 62.20 4.03L62.20 4.03L62.20 4.03Q62.20 4.21 62.13 4.38L62.13 4.38L62.13 4.38Q62.06 4.54 61.94 4.66L61.94 4.66L61.94 4.66Q61.82 4.78 61.65 4.85L61.65 4.85L61.65 4.85Q61.49 4.92 61.30 4.92L61.30 4.92L61.30 4.92Q61.12 4.92 60.96 4.85L60.96 4.85L60.96 4.85Q60.79 4.78 60.67 4.66L60.67 4.66L60.67 4.66Q60.55 4.54 60.48 4.38L60.48 4.38L60.48 4.38Q60.41 4.21 60.41 4.03ZM71.00 6.73L71.00 6.73L71.00 6.73Q70.83 6.73 70.65 6.81L70.65 6.81L70.65 6.81Q70.47 6.90 70.28 7.08L70.28 7.08L70.28 7.08Q69.91 7.43 69.90 7.81L69.90 7.81L69.90 7.81Q69.90 8.98 69.90 10.08L69.90 10.08L69.90 10.08Q69.90 11.18 69.90 12.35L69.90 12.35L70.59 12.35L70.59 13.01L67.63 13.01L67.63 12.35L68.31 12.35L68.31 8.67L68.31 8.67Q68.31 6.73 67.27 6.73L67.27 6.73L67.27 6.73Q66.99 6.73 66.60 7.05L66.60 7.05L66.60 7.05Q66.19 7.40 66.19 7.64L66.19 7.64L66.19 12.35L66.88 12.35L66.88 13.01L63.91 13.01L63.91 12.35L64.60 12.35L64.60 6.93L63.91 6.93L63.91 6.27L66.19 6.27L66.19 6.54L66.19 6.54Q66.47 6.33 66.80 6.22L66.80 6.22L66.80 6.22Q67.13 6.10 67.50 6.10L67.50 6.10L67.50 6.10Q68.15 6.10 68.66 6.32L68.66 6.32L68.66 6.32Q69.18 6.54 69.54 6.92L69.54 6.92L69.54 6.92Q70.11 6.10 71.24 6.10L71.24 6.10L71.24 6.10Q73.62 6.10 73.62 9.00L73.62 9.00L73.62 12.35L74.31 12.35L74.31 13.01L71.35 13.01L71.35 12.35L72.03 12.35L72.03 8.67L72.03 8.67Q72.03 6.73 71.00 6.73ZM76.94 8.84L79.87 8.84L79.87 8.84Q79.82 7.82 79.44 7.30L79.44 7.30L79.44 7.30Q79.07 6.79 78.39 6.79L78.39 6.79L78.39 6.79Q77.62 6.79 77.25 7.49L77.25 7.49L77.25 7.49Q77.10 7.75 77.03 8.08L77.03 8.08L77.03 8.08Q76.95 8.42 76.94 8.84L76.94 8.84ZM81.48 9.50L76.92 9.50L76.92 9.50Q76.91 9.65 76.91 9.73L76.91 9.73L76.91 9.73Q76.92 9.82 76.92 9.86L76.92 9.86L76.92 9.86Q76.92 12.43 78.77 12.43L78.77 12.43L78.77 12.43Q79.42 12.43 79.99 12.09L79.99 12.09L79.99 12.09Q80.25 11.92 80.48 11.65L80.48 11.65L80.48 11.65Q80.71 11.38 80.86 11.03L80.86 11.03L81.45 11.39L81.45 11.39Q81.27 11.85 80.95 12.20L80.95 12.20L80.95 12.20Q80.64 12.54 80.21 12.78L80.21 12.78L80.21 12.78Q79.84 12.97 79.41 13.07L79.41 13.07L79.41 13.07Q78.98 13.17 78.51 13.17L78.51 13.17L78.51 13.17Q77.71 13.17 77.10 12.89L77.10 12.89L77.10 12.89Q76.49 12.61 76.08 12.07L76.08 12.07L76.08 12.07Q75.72 11.59 75.53 10.93L75.53 10.93L75.53 10.93Q75.35 10.27 75.35 9.47L75.35 9.47L75.35 9.47Q75.35 7.98 76.09 7.07L76.09 7.07L76.09 7.07Q76.90 6.10 78.39 6.10L78.39 6.10L78.39 6.10Q79.13 6.10 79.68 6.33L79.68 6.33L79.68 6.33Q80.24 6.57 80.65 7.04L80.65 7.04L80.65 7.04Q81.40 7.91 81.48 9.50L81.48 9.50Z"
              transform="matrix(4.542013612924749,0,0,4.542013612924749,-0.18168329815057405,89.19228212783294)"/>
    </g>
    <g id="6688e0ea-1d67-4a9e-9668-7763c36f5229" fill="#000" stroke="none">
        <g>
            <path d="M49.983 7.291c-28.781 0-43.17 14.251-43.17 42.752s14.389 42.751 43.17 42.751c28.825 0 43.238-14.25 43.238-42.751S78.808 7.291 49.983 7.291zM75.204 76.06c-5.288 5.497-13.694 8.246-25.221 8.246-11.436 0-19.81-2.748-25.12-8.246-5.31-5.496-7.965-14.169-7.965-26.017 0-11.849 2.655-20.522 7.965-26.018 5.31-5.497 13.683-8.246 25.12-8.246 11.527 0 19.933 2.749 25.221 8.246 5.287 5.496 7.931 14.169 7.931 26.018 0 11.848-2.644 20.52-7.931 26.017z"
                  transform="matrix(1.052594666089173,0,0,1.052594666089173,133.165377724492,-7.383467704637809)"/>
            <path d="M63.001 29.522L50.328 42.194l-7.76-7.76a5.212 5.212 0 1 0-7.372 7.372l11.365 11.365a5.195 5.195 0 0 0 3.767 1.523 5.193 5.193 0 0 0 3.767-1.523l16.277-16.277a5.212 5.212 0 1 0-7.371-7.372zM73.966 49.932v.111c0 .208-.003.415-.008.622a3.157 3.157 0 1 0 6.314.151c.006-.257.009-.515.009-.773v-.111a3.158 3.158 0 0 0-6.315 0zM22.99 46.243c-1.728-.032-3.189 1.341-3.23 3.084-.006.238-.008.476-.008.715v.055c0 1.744 1.414 3.13 3.158 3.13s3.158-1.442 3.158-3.185c0-.19.002-.38.007-.57a3.16 3.16 0 0 0-3.085-3.229zM49.934 26.093h.083c.181 0 .363.002.543.006l.073.001a3.158 3.158 0 0 0 .07-6.314 31.235 31.235 0 0 0-.686-.008h-.083a3.158 3.158 0 0 0 0 6.315zM50.017 73.992c-.199 0-.398-.002-.596-.007-1.726-.049-3.19 1.339-3.231 3.083a3.159 3.159 0 0 0 3.083 3.231c.248.006.496.009.744.009h.027c1.744 0 3.144-1.414 3.144-3.158s-1.427-3.158-3.171-3.158z"
                  transform="matrix(1.052594666089173,0,0,1.052594666089173,133.165377724492,-7.383467704637809)"/>
        </g>
    </g>
</svg>
</file>

<file path="TDRPlayTime-logo/vector/default-monochrome-white.svg">
<svg xmlns="http://www.w3.org/2000/svg" class="iconAbove" viewBox="0 0 369.902 163">
    <g id="b929d27c-8fe6-4b88-bbf5-f07cf37fe4ad" fill="#fff">
        <path d="M0.30 3.04L7.49 3.04L7.75 4.85L7.01 4.85L7.01 4.85Q6.84 3.74 6.23 3.74L6.23 3.74L4.75 3.74L4.75 12.30L5.43 12.30L5.43 13.01L2.32 13.01L2.32 12.30L3.04 12.30L3.04 3.74L1.55 3.74L1.55 3.74Q0.94 3.74 0.78 4.85L0.78 4.85L0.04 4.85L0.30 3.04ZM10.60 3.74L10.60 12.31L11.71 12.31L11.71 12.31Q12.57 12.31 12.94 12.07L12.94 12.07L12.94 12.07Q14.27 11.22 14.27 7.97L14.27 7.97L14.27 7.97Q14.27 4.83 13.00 4.03L13.00 4.03L13.00 4.03Q12.77 3.88 12.43 3.81L12.43 3.81L12.43 3.81Q12.09 3.74 11.63 3.74L11.63 3.74L10.60 3.74ZM8.20 3.74L8.20 3.04L12.07 3.04L12.07 3.04Q13.17 3.04 13.98 3.42L13.98 3.42L13.98 3.42Q14.78 3.81 15.24 4.53L15.24 4.53L15.24 4.53Q15.59 5.11 15.78 5.99L15.78 5.99L15.78 5.99Q15.97 6.87 15.97 8.02L15.97 8.02L15.97 8.02Q15.97 9.14 15.78 10.04L15.78 10.04L15.78 10.04Q15.59 10.94 15.27 11.51L15.27 11.51L15.27 11.51Q14.81 12.23 14.02 12.62L14.02 12.62L14.02 12.62Q13.23 13.01 12.13 13.01L12.13 13.01L8.20 13.01L8.20 12.30L8.89 12.30L8.89 3.74L8.20 3.74ZM19.22 3.74L19.22 7.68L20.95 7.68L20.95 7.68Q21.23 7.68 21.50 7.50L21.50 7.50L21.50 7.50Q21.77 7.33 22.01 7L22.01 7L22.01 7Q22.22 6.69 22.34 6.36L22.34 6.36L22.34 6.36Q22.46 6.03 22.46 5.71L22.46 5.71L22.46 5.71Q22.46 4.93 22.00 4.33L22.00 4.33L22.00 4.33Q21.53 3.73 20.79 3.73L20.79 3.73L19.22 3.74ZM19.22 8.40L19.22 12.30L19.96 12.30L19.96 13.01L16.80 13.01L16.80 12.30L17.49 12.31L17.49 3.74L16.80 3.74L16.80 3.04L20.99 3.04L20.99 3.04Q21.63 3.04 22.18 3.20L22.18 3.20L22.18 3.20Q22.74 3.37 23.18 3.68L23.18 3.68L23.18 3.68Q23.67 4.05 23.93 4.56L23.93 4.56L23.93 4.56Q24.19 5.07 24.19 5.70L24.19 5.70L24.19 5.70Q24.19 6.17 24.01 6.60L24.01 6.60L24.01 6.60Q23.83 7.03 23.50 7.40L23.50 7.40L23.50 7.40Q23.20 7.71 22.83 7.94L22.83 7.94L22.83 7.94Q22.46 8.18 22.05 8.29L22.05 8.29L22.05 8.29Q22.31 9.20 22.93 10.19L22.93 10.19L22.93 10.19Q23.54 11.18 24.50 12.30L24.50 12.30L25.24 12.30L25.24 13.01L23.02 13.01L23.02 13.01Q22.19 11.91 21.53 10.76L21.53 10.76L21.53 10.76Q20.86 9.61 20.36 8.40L20.36 8.40L19.22 8.40ZM28.29 3.74L28.29 7.68L30.02 7.68L30.02 7.68Q30.30 7.68 30.57 7.50L30.57 7.50L30.57 7.50Q30.84 7.33 31.08 7L31.08 7L31.08 7Q31.29 6.69 31.41 6.36L31.41 6.36L31.41 6.36Q31.53 6.03 31.53 5.71L31.53 5.71L31.53 5.71Q31.53 4.93 31.08 4.33L31.08 4.33L31.08 4.33Q30.60 3.73 29.86 3.73L29.86 3.73L28.29 3.74ZM25.87 13.01L25.87 12.30L26.56 12.31L26.56 3.74L25.87 3.74L25.87 3.04L30.06 3.04L30.06 3.04Q30.69 3.04 31.24 3.20L31.24 3.20L31.24 3.20Q31.79 3.37 32.25 3.68L32.25 3.68L32.25 3.68Q32.73 4.05 33.00 4.56L33.00 4.56L33.00 4.56Q33.26 5.07 33.26 5.70L33.26 5.70L33.26 5.70Q33.26 6.28 33.02 6.77L33.02 6.77L33.02 6.77Q32.78 7.27 32.34 7.66L32.34 7.66L32.34 7.66Q31.91 8.01 31.39 8.21L31.39 8.21L31.39 8.21Q30.87 8.40 30.29 8.40L30.29 8.40L28.29 8.40L28.29 12.30L29.03 12.30L29.03 13.01L25.87 13.01ZM33.89 13.01L33.89 12.35L34.58 12.35L34.58 3.70L33.89 3.70L33.89 3.04L36.18 3.04L36.18 12.35L36.87 12.35L36.87 13.01L33.89 13.01ZM39.94 12.52L39.94 12.52L39.94 12.52Q40.46 12.52 41.03 11.98L41.03 11.98L41.03 11.98Q41.29 11.74 41.48 11.48L41.48 11.48L41.48 11.48Q41.67 11.22 41.77 10.94L41.77 10.94L41.77 9.41L41.77 9.41Q41.58 9.49 41.32 9.58L41.32 9.58L41.32 9.58Q41.06 9.67 40.71 9.76L40.71 9.76L40.71 9.76L40.71 9.76Q40.33 9.88 40.07 9.99L40.07 9.99L40.07 9.99Q39.81 10.10 39.65 10.23L39.65 10.23L39.65 10.22L39.65 10.22Q39.21 10.58 39.21 11.31L39.21 11.31L39.21 11.31Q39.21 11.80 39.38 12.13L39.38 12.13L39.38 12.13Q39.57 12.52 39.94 12.52ZM38.20 8.16L38.20 6.48L38.20 6.48Q39.01 6.29 39.55 6.19L39.55 6.19L39.55 6.19Q40.09 6.09 40.37 6.09L40.37 6.09L40.37 6.09Q41.92 6.09 42.57 6.57L42.57 6.57L42.57 6.57Q43.35 7.16 43.35 8.68L43.35 8.68L43.35 11.56L43.35 11.56Q43.35 12.35 43.37 12.35L43.37 12.35L44.16 12.35L44.16 13.01L42.05 13.01L42.05 13.01Q41.84 12.67 41.78 12.15L41.78 12.15L41.78 12.15Q41.62 12.34 41.42 12.51L41.42 12.51L41.42 12.51Q41.21 12.68 40.99 12.81L40.99 12.81L40.99 12.81Q40.33 13.17 39.60 13.17L39.60 13.17L39.60 13.17Q38.73 13.17 38.19 12.73L38.19 12.73L38.19 12.73Q37.62 12.24 37.62 11.36L37.62 11.36L37.62 11.36Q37.62 10.23 38.49 9.76L38.49 9.76L38.49 9.76Q38.91 9.54 40.25 9.27L40.25 9.27L40.25 9.27Q41.33 9.06 41.72 8.69L41.72 8.69L41.72 8.69Q41.73 8.62 41.75 8.53L41.75 8.53L41.75 8.53Q41.76 8.45 41.76 8.35L41.76 8.35L41.76 8.35Q41.76 6.75 40.09 6.75L40.09 6.75L40.09 6.75Q39.00 6.75 38.85 8.16L38.85 8.16L38.20 8.16ZM47.69 6.93L47.22 6.93L47.22 6.93Q47.41 7.42 47.58 7.86L47.58 7.86L47.58 7.86Q47.75 8.30 47.92 8.74L47.92 8.74L47.92 8.74Q48.09 9.17 48.27 9.62L48.27 9.62L48.27 9.62Q48.44 10.06 48.63 10.56L48.63 10.56L48.63 10.56Q48.81 10.09 48.98 9.65L48.98 9.65L48.98 9.65Q49.15 9.20 49.32 8.76L49.32 8.76L49.32 8.76Q49.49 8.31 49.66 7.86L49.66 7.86L49.66 7.86Q49.83 7.41 50.02 6.93L50.02 6.93L49.53 6.93L49.53 6.27L51.45 6.27L51.45 6.93L50.73 6.93L50.73 6.93Q49.98 8.89 49.25 10.83L49.25 10.83L49.25 10.83Q48.51 12.78 47.78 14.74L47.78 14.74L47.78 14.74Q47.20 16.25 46.07 16.25L46.07 16.25L46.07 16.25Q45.86 16.25 45.58 16.19L45.58 16.19L45.58 14.92L45.58 14.92Q46.08 15.17 46.35 15.17L46.35 15.17L46.35 15.17Q46.87 15.17 47.17 14.48L47.17 14.48L47.16 14.49L47.16 14.49Q47.33 14.02 47.49 13.59L47.49 13.59L47.49 13.59Q47.65 13.15 47.82 12.69L47.82 12.69L47.82 12.69Q47.26 11.22 46.71 9.81L46.71 9.81L46.71 9.81Q46.17 8.39 45.60 6.93L45.60 6.93L44.88 6.93L44.88 6.27L47.69 6.27L47.69 6.93ZM51.90 3.04L59.08 3.04L59.34 4.85L58.60 4.85L58.60 4.85Q58.44 3.74 57.83 3.74L57.83 3.74L56.35 3.74L56.35 12.30L57.03 12.30L57.03 13.01L53.92 13.01L53.92 12.30L54.63 12.30L54.63 3.74L53.15 3.74L53.15 3.74Q52.54 3.74 52.38 4.85L52.38 4.85L51.64 4.85L51.90 3.04ZM60.07 6.53L61.84 6.53L61.84 12.61L62.51 12.61L62.51 12.74L60.07 12.74L60.07 12.61L60.78 12.61L60.78 6.67L60.07 6.67L60.07 6.53ZM60.41 4.03L60.41 4.03L60.41 4.03Q60.41 3.84 60.48 3.68L60.48 3.68L60.48 3.68Q60.55 3.51 60.67 3.39L60.67 3.39L60.67 3.39Q60.79 3.27 60.96 3.20L60.96 3.20L60.96 3.20Q61.12 3.12 61.30 3.12L61.30 3.12L61.30 3.12Q61.49 3.12 61.65 3.20L61.65 3.20L61.65 3.20Q61.82 3.27 61.94 3.39L61.94 3.39L61.94 3.39Q62.06 3.51 62.13 3.68L62.13 3.68L62.13 3.68Q62.20 3.84 62.20 4.03L62.20 4.03L62.20 4.03Q62.20 4.21 62.13 4.38L62.13 4.38L62.13 4.38Q62.06 4.54 61.94 4.66L61.94 4.66L61.94 4.66Q61.82 4.78 61.65 4.85L61.65 4.85L61.65 4.85Q61.49 4.92 61.30 4.92L61.30 4.92L61.30 4.92Q61.12 4.92 60.96 4.85L60.96 4.85L60.96 4.85Q60.79 4.78 60.67 4.66L60.67 4.66L60.67 4.66Q60.55 4.54 60.48 4.38L60.48 4.38L60.48 4.38Q60.41 4.21 60.41 4.03ZM71.00 6.73L71.00 6.73L71.00 6.73Q70.83 6.73 70.65 6.81L70.65 6.81L70.65 6.81Q70.47 6.90 70.28 7.08L70.28 7.08L70.28 7.08Q69.91 7.43 69.90 7.81L69.90 7.81L69.90 7.81Q69.90 8.98 69.90 10.08L69.90 10.08L69.90 10.08Q69.90 11.18 69.90 12.35L69.90 12.35L70.59 12.35L70.59 13.01L67.63 13.01L67.63 12.35L68.31 12.35L68.31 8.67L68.31 8.67Q68.31 6.73 67.27 6.73L67.27 6.73L67.27 6.73Q66.99 6.73 66.60 7.05L66.60 7.05L66.60 7.05Q66.19 7.40 66.19 7.64L66.19 7.64L66.19 12.35L66.88 12.35L66.88 13.01L63.91 13.01L63.91 12.35L64.60 12.35L64.60 6.93L63.91 6.93L63.91 6.27L66.19 6.27L66.19 6.54L66.19 6.54Q66.47 6.33 66.80 6.22L66.80 6.22L66.80 6.22Q67.13 6.10 67.50 6.10L67.50 6.10L67.50 6.10Q68.15 6.10 68.66 6.32L68.66 6.32L68.66 6.32Q69.18 6.54 69.54 6.92L69.54 6.92L69.54 6.92Q70.11 6.10 71.24 6.10L71.24 6.10L71.24 6.10Q73.62 6.10 73.62 9.00L73.62 9.00L73.62 12.35L74.31 12.35L74.31 13.01L71.35 13.01L71.35 12.35L72.03 12.35L72.03 8.67L72.03 8.67Q72.03 6.73 71.00 6.73ZM76.94 8.84L79.87 8.84L79.87 8.84Q79.82 7.82 79.44 7.30L79.44 7.30L79.44 7.30Q79.07 6.79 78.39 6.79L78.39 6.79L78.39 6.79Q77.62 6.79 77.25 7.49L77.25 7.49L77.25 7.49Q77.10 7.75 77.03 8.08L77.03 8.08L77.03 8.08Q76.95 8.42 76.94 8.84L76.94 8.84ZM81.48 9.50L76.92 9.50L76.92 9.50Q76.91 9.65 76.91 9.73L76.91 9.73L76.91 9.73Q76.92 9.82 76.92 9.86L76.92 9.86L76.92 9.86Q76.92 12.43 78.77 12.43L78.77 12.43L78.77 12.43Q79.42 12.43 79.99 12.09L79.99 12.09L79.99 12.09Q80.25 11.92 80.48 11.65L80.48 11.65L80.48 11.65Q80.71 11.38 80.86 11.03L80.86 11.03L81.45 11.39L81.45 11.39Q81.27 11.85 80.95 12.20L80.95 12.20L80.95 12.20Q80.64 12.54 80.21 12.78L80.21 12.78L80.21 12.78Q79.84 12.97 79.41 13.07L79.41 13.07L79.41 13.07Q78.98 13.17 78.51 13.17L78.51 13.17L78.51 13.17Q77.71 13.17 77.10 12.89L77.10 12.89L77.10 12.89Q76.49 12.61 76.08 12.07L76.08 12.07L76.08 12.07Q75.72 11.59 75.53 10.93L75.53 10.93L75.53 10.93Q75.35 10.27 75.35 9.47L75.35 9.47L75.35 9.47Q75.35 7.98 76.09 7.07L76.09 7.07L76.09 7.07Q76.90 6.10 78.39 6.10L78.39 6.10L78.39 6.10Q79.13 6.10 79.68 6.33L79.68 6.33L79.68 6.33Q80.24 6.57 80.65 7.04L80.65 7.04L80.65 7.04Q81.40 7.91 81.48 9.50L81.48 9.50Z"
              transform="matrix(4.542013612924749,0,0,4.542013612924749,-0.18168329815057405,89.19228212783294)"/>
    </g>
    <g id="16927cdd-fc62-4d27-aa3d-78ceb3a7797a" fill="#fff" stroke="none">
        <g>
            <path d="M49.983 7.291c-28.781 0-43.17 14.251-43.17 42.752s14.389 42.751 43.17 42.751c28.825 0 43.238-14.25 43.238-42.751S78.808 7.291 49.983 7.291zM75.204 76.06c-5.288 5.497-13.694 8.246-25.221 8.246-11.436 0-19.81-2.748-25.12-8.246-5.31-5.496-7.965-14.169-7.965-26.017 0-11.849 2.655-20.522 7.965-26.018 5.31-5.497 13.683-8.246 25.12-8.246 11.527 0 19.933 2.749 25.221 8.246 5.287 5.496 7.931 14.169 7.931 26.018 0 11.848-2.644 20.52-7.931 26.017z"
                  transform="matrix(1.052594666089173,0,0,1.052594666089173,133.165377724492,-7.383467704637809)"/>
            <path d="M63.001 29.522L50.328 42.194l-7.76-7.76a5.212 5.212 0 1 0-7.372 7.372l11.365 11.365a5.195 5.195 0 0 0 3.767 1.523 5.193 5.193 0 0 0 3.767-1.523l16.277-16.277a5.212 5.212 0 1 0-7.371-7.372zM73.966 49.932v.111c0 .208-.003.415-.008.622a3.157 3.157 0 1 0 6.314.151c.006-.257.009-.515.009-.773v-.111a3.158 3.158 0 0 0-6.315 0zM22.99 46.243c-1.728-.032-3.189 1.341-3.23 3.084-.006.238-.008.476-.008.715v.055c0 1.744 1.414 3.13 3.158 3.13s3.158-1.442 3.158-3.185c0-.19.002-.38.007-.57a3.16 3.16 0 0 0-3.085-3.229zM49.934 26.093h.083c.181 0 .363.002.543.006l.073.001a3.158 3.158 0 0 0 .07-6.314 31.235 31.235 0 0 0-.686-.008h-.083a3.158 3.158 0 0 0 0 6.315zM50.017 73.992c-.199 0-.398-.002-.596-.007-1.726-.049-3.19 1.339-3.231 3.083a3.159 3.159 0 0 0 3.083 3.231c.248.006.496.009.744.009h.027c1.744 0 3.144-1.414 3.144-3.158s-1.427-3.158-3.171-3.158z"
                  transform="matrix(1.052594666089173,0,0,1.052594666089173,133.165377724492,-7.383467704637809)"/>
        </g>
    </g>
</svg>
</file>

<file path="TDRPlayTime-logo/vector/default-monochrome.svg">
<svg xmlns="http://www.w3.org/2000/svg" class="iconAbove" viewBox="0 0 369.902 163">
    <g id="22ba146f-74eb-4fcb-83b7-dea7be24036f" fill="#8d68f2">
        <path d="M0.30 3.04L7.49 3.04L7.75 4.85L7.01 4.85L7.01 4.85Q6.84 3.74 6.23 3.74L6.23 3.74L4.75 3.74L4.75 12.30L5.43 12.30L5.43 13.01L2.32 13.01L2.32 12.30L3.04 12.30L3.04 3.74L1.55 3.74L1.55 3.74Q0.94 3.74 0.78 4.85L0.78 4.85L0.04 4.85L0.30 3.04ZM10.60 3.74L10.60 12.31L11.71 12.31L11.71 12.31Q12.57 12.31 12.94 12.07L12.94 12.07L12.94 12.07Q14.27 11.22 14.27 7.97L14.27 7.97L14.27 7.97Q14.27 4.83 13.00 4.03L13.00 4.03L13.00 4.03Q12.77 3.88 12.43 3.81L12.43 3.81L12.43 3.81Q12.09 3.74 11.63 3.74L11.63 3.74L10.60 3.74ZM8.20 3.74L8.20 3.04L12.07 3.04L12.07 3.04Q13.17 3.04 13.98 3.42L13.98 3.42L13.98 3.42Q14.78 3.81 15.24 4.53L15.24 4.53L15.24 4.53Q15.59 5.11 15.78 5.99L15.78 5.99L15.78 5.99Q15.97 6.87 15.97 8.02L15.97 8.02L15.97 8.02Q15.97 9.14 15.78 10.04L15.78 10.04L15.78 10.04Q15.59 10.94 15.27 11.51L15.27 11.51L15.27 11.51Q14.81 12.23 14.02 12.62L14.02 12.62L14.02 12.62Q13.23 13.01 12.13 13.01L12.13 13.01L8.20 13.01L8.20 12.30L8.89 12.30L8.89 3.74L8.20 3.74ZM19.22 3.74L19.22 7.68L20.95 7.68L20.95 7.68Q21.23 7.68 21.50 7.50L21.50 7.50L21.50 7.50Q21.77 7.33 22.01 7L22.01 7L22.01 7Q22.22 6.69 22.34 6.36L22.34 6.36L22.34 6.36Q22.46 6.03 22.46 5.71L22.46 5.71L22.46 5.71Q22.46 4.93 22.00 4.33L22.00 4.33L22.00 4.33Q21.53 3.73 20.79 3.73L20.79 3.73L19.22 3.74ZM19.22 8.40L19.22 12.30L19.96 12.30L19.96 13.01L16.80 13.01L16.80 12.30L17.49 12.31L17.49 3.74L16.80 3.74L16.80 3.04L20.99 3.04L20.99 3.04Q21.63 3.04 22.18 3.20L22.18 3.20L22.18 3.20Q22.74 3.37 23.18 3.68L23.18 3.68L23.18 3.68Q23.67 4.05 23.93 4.56L23.93 4.56L23.93 4.56Q24.19 5.07 24.19 5.70L24.19 5.70L24.19 5.70Q24.19 6.17 24.01 6.60L24.01 6.60L24.01 6.60Q23.83 7.03 23.50 7.40L23.50 7.40L23.50 7.40Q23.20 7.71 22.83 7.94L22.83 7.94L22.83 7.94Q22.46 8.18 22.05 8.29L22.05 8.29L22.05 8.29Q22.31 9.20 22.93 10.19L22.93 10.19L22.93 10.19Q23.54 11.18 24.50 12.30L24.50 12.30L25.24 12.30L25.24 13.01L23.02 13.01L23.02 13.01Q22.19 11.91 21.53 10.76L21.53 10.76L21.53 10.76Q20.86 9.61 20.36 8.40L20.36 8.40L19.22 8.40ZM28.29 3.74L28.29 7.68L30.02 7.68L30.02 7.68Q30.30 7.68 30.57 7.50L30.57 7.50L30.57 7.50Q30.84 7.33 31.08 7L31.08 7L31.08 7Q31.29 6.69 31.41 6.36L31.41 6.36L31.41 6.36Q31.53 6.03 31.53 5.71L31.53 5.71L31.53 5.71Q31.53 4.93 31.08 4.33L31.08 4.33L31.08 4.33Q30.60 3.73 29.86 3.73L29.86 3.73L28.29 3.74ZM25.87 13.01L25.87 12.30L26.56 12.31L26.56 3.74L25.87 3.74L25.87 3.04L30.06 3.04L30.06 3.04Q30.69 3.04 31.24 3.20L31.24 3.20L31.24 3.20Q31.79 3.37 32.25 3.68L32.25 3.68L32.25 3.68Q32.73 4.05 33.00 4.56L33.00 4.56L33.00 4.56Q33.26 5.07 33.26 5.70L33.26 5.70L33.26 5.70Q33.26 6.28 33.02 6.77L33.02 6.77L33.02 6.77Q32.78 7.27 32.34 7.66L32.34 7.66L32.34 7.66Q31.91 8.01 31.39 8.21L31.39 8.21L31.39 8.21Q30.87 8.40 30.29 8.40L30.29 8.40L28.29 8.40L28.29 12.30L29.03 12.30L29.03 13.01L25.87 13.01ZM33.89 13.01L33.89 12.35L34.58 12.35L34.58 3.70L33.89 3.70L33.89 3.04L36.18 3.04L36.18 12.35L36.87 12.35L36.87 13.01L33.89 13.01ZM39.94 12.52L39.94 12.52L39.94 12.52Q40.46 12.52 41.03 11.98L41.03 11.98L41.03 11.98Q41.29 11.74 41.48 11.48L41.48 11.48L41.48 11.48Q41.67 11.22 41.77 10.94L41.77 10.94L41.77 9.41L41.77 9.41Q41.58 9.49 41.32 9.58L41.32 9.58L41.32 9.58Q41.06 9.67 40.71 9.76L40.71 9.76L40.71 9.76L40.71 9.76Q40.33 9.88 40.07 9.99L40.07 9.99L40.07 9.99Q39.81 10.10 39.65 10.23L39.65 10.23L39.65 10.22L39.65 10.22Q39.21 10.58 39.21 11.31L39.21 11.31L39.21 11.31Q39.21 11.80 39.38 12.13L39.38 12.13L39.38 12.13Q39.57 12.52 39.94 12.52ZM38.20 8.16L38.20 6.48L38.20 6.48Q39.01 6.29 39.55 6.19L39.55 6.19L39.55 6.19Q40.09 6.09 40.37 6.09L40.37 6.09L40.37 6.09Q41.92 6.09 42.57 6.57L42.57 6.57L42.57 6.57Q43.35 7.16 43.35 8.68L43.35 8.68L43.35 11.56L43.35 11.56Q43.35 12.35 43.37 12.35L43.37 12.35L44.16 12.35L44.16 13.01L42.05 13.01L42.05 13.01Q41.84 12.67 41.78 12.15L41.78 12.15L41.78 12.15Q41.62 12.34 41.42 12.51L41.42 12.51L41.42 12.51Q41.21 12.68 40.99 12.81L40.99 12.81L40.99 12.81Q40.33 13.17 39.60 13.17L39.60 13.17L39.60 13.17Q38.73 13.17 38.19 12.73L38.19 12.73L38.19 12.73Q37.62 12.24 37.62 11.36L37.62 11.36L37.62 11.36Q37.62 10.23 38.49 9.76L38.49 9.76L38.49 9.76Q38.91 9.54 40.25 9.27L40.25 9.27L40.25 9.27Q41.33 9.06 41.72 8.69L41.72 8.69L41.72 8.69Q41.73 8.62 41.75 8.53L41.75 8.53L41.75 8.53Q41.76 8.45 41.76 8.35L41.76 8.35L41.76 8.35Q41.76 6.75 40.09 6.75L40.09 6.75L40.09 6.75Q39.00 6.75 38.85 8.16L38.85 8.16L38.20 8.16ZM47.69 6.93L47.22 6.93L47.22 6.93Q47.41 7.42 47.58 7.86L47.58 7.86L47.58 7.86Q47.75 8.30 47.92 8.74L47.92 8.74L47.92 8.74Q48.09 9.17 48.27 9.62L48.27 9.62L48.27 9.62Q48.44 10.06 48.63 10.56L48.63 10.56L48.63 10.56Q48.81 10.09 48.98 9.65L48.98 9.65L48.98 9.65Q49.15 9.20 49.32 8.76L49.32 8.76L49.32 8.76Q49.49 8.31 49.66 7.86L49.66 7.86L49.66 7.86Q49.83 7.41 50.02 6.93L50.02 6.93L49.53 6.93L49.53 6.27L51.45 6.27L51.45 6.93L50.73 6.93L50.73 6.93Q49.98 8.89 49.25 10.83L49.25 10.83L49.25 10.83Q48.51 12.78 47.78 14.74L47.78 14.74L47.78 14.74Q47.20 16.25 46.07 16.25L46.07 16.25L46.07 16.25Q45.86 16.25 45.58 16.19L45.58 16.19L45.58 14.92L45.58 14.92Q46.08 15.17 46.35 15.17L46.35 15.17L46.35 15.17Q46.87 15.17 47.17 14.48L47.17 14.48L47.16 14.49L47.16 14.49Q47.33 14.02 47.49 13.59L47.49 13.59L47.49 13.59Q47.65 13.15 47.82 12.69L47.82 12.69L47.82 12.69Q47.26 11.22 46.71 9.81L46.71 9.81L46.71 9.81Q46.17 8.39 45.60 6.93L45.60 6.93L44.88 6.93L44.88 6.27L47.69 6.27L47.69 6.93ZM51.90 3.04L59.08 3.04L59.34 4.85L58.60 4.85L58.60 4.85Q58.44 3.74 57.83 3.74L57.83 3.74L56.35 3.74L56.35 12.30L57.03 12.30L57.03 13.01L53.92 13.01L53.92 12.30L54.63 12.30L54.63 3.74L53.15 3.74L53.15 3.74Q52.54 3.74 52.38 4.85L52.38 4.85L51.64 4.85L51.90 3.04ZM60.07 6.53L61.84 6.53L61.84 12.61L62.51 12.61L62.51 12.74L60.07 12.74L60.07 12.61L60.78 12.61L60.78 6.67L60.07 6.67L60.07 6.53ZM60.41 4.03L60.41 4.03L60.41 4.03Q60.41 3.84 60.48 3.68L60.48 3.68L60.48 3.68Q60.55 3.51 60.67 3.39L60.67 3.39L60.67 3.39Q60.79 3.27 60.96 3.20L60.96 3.20L60.96 3.20Q61.12 3.12 61.30 3.12L61.30 3.12L61.30 3.12Q61.49 3.12 61.65 3.20L61.65 3.20L61.65 3.20Q61.82 3.27 61.94 3.39L61.94 3.39L61.94 3.39Q62.06 3.51 62.13 3.68L62.13 3.68L62.13 3.68Q62.20 3.84 62.20 4.03L62.20 4.03L62.20 4.03Q62.20 4.21 62.13 4.38L62.13 4.38L62.13 4.38Q62.06 4.54 61.94 4.66L61.94 4.66L61.94 4.66Q61.82 4.78 61.65 4.85L61.65 4.85L61.65 4.85Q61.49 4.92 61.30 4.92L61.30 4.92L61.30 4.92Q61.12 4.92 60.96 4.85L60.96 4.85L60.96 4.85Q60.79 4.78 60.67 4.66L60.67 4.66L60.67 4.66Q60.55 4.54 60.48 4.38L60.48 4.38L60.48 4.38Q60.41 4.21 60.41 4.03ZM71.00 6.73L71.00 6.73L71.00 6.73Q70.83 6.73 70.65 6.81L70.65 6.81L70.65 6.81Q70.47 6.90 70.28 7.08L70.28 7.08L70.28 7.08Q69.91 7.43 69.90 7.81L69.90 7.81L69.90 7.81Q69.90 8.98 69.90 10.08L69.90 10.08L69.90 10.08Q69.90 11.18 69.90 12.35L69.90 12.35L70.59 12.35L70.59 13.01L67.63 13.01L67.63 12.35L68.31 12.35L68.31 8.67L68.31 8.67Q68.31 6.73 67.27 6.73L67.27 6.73L67.27 6.73Q66.99 6.73 66.60 7.05L66.60 7.05L66.60 7.05Q66.19 7.40 66.19 7.64L66.19 7.64L66.19 12.35L66.88 12.35L66.88 13.01L63.91 13.01L63.91 12.35L64.60 12.35L64.60 6.93L63.91 6.93L63.91 6.27L66.19 6.27L66.19 6.54L66.19 6.54Q66.47 6.33 66.80 6.22L66.80 6.22L66.80 6.22Q67.13 6.10 67.50 6.10L67.50 6.10L67.50 6.10Q68.15 6.10 68.66 6.32L68.66 6.32L68.66 6.32Q69.18 6.54 69.54 6.92L69.54 6.92L69.54 6.92Q70.11 6.10 71.24 6.10L71.24 6.10L71.24 6.10Q73.62 6.10 73.62 9.00L73.62 9.00L73.62 12.35L74.31 12.35L74.31 13.01L71.35 13.01L71.35 12.35L72.03 12.35L72.03 8.67L72.03 8.67Q72.03 6.73 71.00 6.73ZM76.94 8.84L79.87 8.84L79.87 8.84Q79.82 7.82 79.44 7.30L79.44 7.30L79.44 7.30Q79.07 6.79 78.39 6.79L78.39 6.79L78.39 6.79Q77.62 6.79 77.25 7.49L77.25 7.49L77.25 7.49Q77.10 7.75 77.03 8.08L77.03 8.08L77.03 8.08Q76.95 8.42 76.94 8.84L76.94 8.84ZM81.48 9.50L76.92 9.50L76.92 9.50Q76.91 9.65 76.91 9.73L76.91 9.73L76.91 9.73Q76.92 9.82 76.92 9.86L76.92 9.86L76.92 9.86Q76.92 12.43 78.77 12.43L78.77 12.43L78.77 12.43Q79.42 12.43 79.99 12.09L79.99 12.09L79.99 12.09Q80.25 11.92 80.48 11.65L80.48 11.65L80.48 11.65Q80.71 11.38 80.86 11.03L80.86 11.03L81.45 11.39L81.45 11.39Q81.27 11.85 80.95 12.20L80.95 12.20L80.95 12.20Q80.64 12.54 80.21 12.78L80.21 12.78L80.21 12.78Q79.84 12.97 79.41 13.07L79.41 13.07L79.41 13.07Q78.98 13.17 78.51 13.17L78.51 13.17L78.51 13.17Q77.71 13.17 77.10 12.89L77.10 12.89L77.10 12.89Q76.49 12.61 76.08 12.07L76.08 12.07L76.08 12.07Q75.72 11.59 75.53 10.93L75.53 10.93L75.53 10.93Q75.35 10.27 75.35 9.47L75.35 9.47L75.35 9.47Q75.35 7.98 76.09 7.07L76.09 7.07L76.09 7.07Q76.90 6.10 78.39 6.10L78.39 6.10L78.39 6.10Q79.13 6.10 79.68 6.33L79.68 6.33L79.68 6.33Q80.24 6.57 80.65 7.04L80.65 7.04L80.65 7.04Q81.40 7.91 81.48 9.50L81.48 9.50Z"
              transform="matrix(4.542013612924749,0,0,4.542013612924749,-0.18168329815057405,89.19228212783294)"/>
    </g>
    <g id="34f879d4-345d-411d-ab95-3773d0fdf882" fill="#7E5DFC" stroke="none">
        <g>
            <path d="M49.983 7.291c-28.781 0-43.17 14.251-43.17 42.752s14.389 42.751 43.17 42.751c28.825 0 43.238-14.25 43.238-42.751S78.808 7.291 49.983 7.291zM75.204 76.06c-5.288 5.497-13.694 8.246-25.221 8.246-11.436 0-19.81-2.748-25.12-8.246-5.31-5.496-7.965-14.169-7.965-26.017 0-11.849 2.655-20.522 7.965-26.018 5.31-5.497 13.683-8.246 25.12-8.246 11.527 0 19.933 2.749 25.221 8.246 5.287 5.496 7.931 14.169 7.931 26.018 0 11.848-2.644 20.52-7.931 26.017z"
                  transform="matrix(1.052594666089173,0,0,1.052594666089173,133.165377724492,-7.383467704637809)"/>
            <path d="M63.001 29.522L50.328 42.194l-7.76-7.76a5.212 5.212 0 1 0-7.372 7.372l11.365 11.365a5.195 5.195 0 0 0 3.767 1.523 5.193 5.193 0 0 0 3.767-1.523l16.277-16.277a5.212 5.212 0 1 0-7.371-7.372zM73.966 49.932v.111c0 .208-.003.415-.008.622a3.157 3.157 0 1 0 6.314.151c.006-.257.009-.515.009-.773v-.111a3.158 3.158 0 0 0-6.315 0zM22.99 46.243c-1.728-.032-3.189 1.341-3.23 3.084-.006.238-.008.476-.008.715v.055c0 1.744 1.414 3.13 3.158 3.13s3.158-1.442 3.158-3.185c0-.19.002-.38.007-.57a3.16 3.16 0 0 0-3.085-3.229zM49.934 26.093h.083c.181 0 .363.002.543.006l.073.001a3.158 3.158 0 0 0 .07-6.314 31.235 31.235 0 0 0-.686-.008h-.083a3.158 3.158 0 0 0 0 6.315zM50.017 73.992c-.199 0-.398-.002-.596-.007-1.726-.049-3.19 1.339-3.231 3.083a3.159 3.159 0 0 0 3.083 3.231c.248.006.496.009.744.009h.027c1.744 0 3.144-1.414 3.144-3.158s-1.427-3.158-3.171-3.158z"
                  transform="matrix(1.052594666089173,0,0,1.052594666089173,133.165377724492,-7.383467704637809)"/>
        </g>
    </g>
</svg>
</file>

<file path="TDRPlayTime-logo/vector/default.svg">
<svg xmlns="http://www.w3.org/2000/svg" class="iconAbove" viewBox="0 0 300 300">
    <rect width="300" height="300" x="0" y="0" fill="#261836" class="logo-background-square"/>
    <g id="7ebe9b75-368a-498d-a7b5-f4fe5c3fabd9" fill="#8d68f2">
        <path d="M0.30 3.04L7.49 3.04L7.75 4.85L7.01 4.85L7.01 4.85Q6.84 3.74 6.23 3.74L6.23 3.74L4.75 3.74L4.75 12.30L5.43 12.30L5.43 13.01L2.32 13.01L2.32 12.30L3.04 12.30L3.04 3.74L1.55 3.74L1.55 3.74Q0.94 3.74 0.78 4.85L0.78 4.85L0.04 4.85L0.30 3.04ZM10.60 3.74L10.60 12.31L11.71 12.31L11.71 12.31Q12.57 12.31 12.94 12.07L12.94 12.07L12.94 12.07Q14.27 11.22 14.27 7.97L14.27 7.97L14.27 7.97Q14.27 4.83 13.00 4.03L13.00 4.03L13.00 4.03Q12.77 3.88 12.43 3.81L12.43 3.81L12.43 3.81Q12.09 3.74 11.63 3.74L11.63 3.74L10.60 3.74ZM8.20 3.74L8.20 3.04L12.07 3.04L12.07 3.04Q13.17 3.04 13.98 3.42L13.98 3.42L13.98 3.42Q14.78 3.81 15.24 4.53L15.24 4.53L15.24 4.53Q15.59 5.11 15.78 5.99L15.78 5.99L15.78 5.99Q15.97 6.87 15.97 8.02L15.97 8.02L15.97 8.02Q15.97 9.14 15.78 10.04L15.78 10.04L15.78 10.04Q15.59 10.94 15.27 11.51L15.27 11.51L15.27 11.51Q14.81 12.23 14.02 12.62L14.02 12.62L14.02 12.62Q13.23 13.01 12.13 13.01L12.13 13.01L8.20 13.01L8.20 12.30L8.89 12.30L8.89 3.74L8.20 3.74ZM19.22 3.74L19.22 7.68L20.95 7.68L20.95 7.68Q21.23 7.68 21.50 7.50L21.50 7.50L21.50 7.50Q21.77 7.33 22.01 7L22.01 7L22.01 7Q22.22 6.69 22.34 6.36L22.34 6.36L22.34 6.36Q22.46 6.03 22.46 5.71L22.46 5.71L22.46 5.71Q22.46 4.93 22.00 4.33L22.00 4.33L22.00 4.33Q21.53 3.73 20.79 3.73L20.79 3.73L19.22 3.74ZM19.22 8.40L19.22 12.30L19.96 12.30L19.96 13.01L16.80 13.01L16.80 12.30L17.49 12.31L17.49 3.74L16.80 3.74L16.80 3.04L20.99 3.04L20.99 3.04Q21.63 3.04 22.18 3.20L22.18 3.20L22.18 3.20Q22.74 3.37 23.18 3.68L23.18 3.68L23.18 3.68Q23.67 4.05 23.93 4.56L23.93 4.56L23.93 4.56Q24.19 5.07 24.19 5.70L24.19 5.70L24.19 5.70Q24.19 6.17 24.01 6.60L24.01 6.60L24.01 6.60Q23.83 7.03 23.50 7.40L23.50 7.40L23.50 7.40Q23.20 7.71 22.83 7.94L22.83 7.94L22.83 7.94Q22.46 8.18 22.05 8.29L22.05 8.29L22.05 8.29Q22.31 9.20 22.93 10.19L22.93 10.19L22.93 10.19Q23.54 11.18 24.50 12.30L24.50 12.30L25.24 12.30L25.24 13.01L23.02 13.01L23.02 13.01Q22.19 11.91 21.53 10.76L21.53 10.76L21.53 10.76Q20.86 9.61 20.36 8.40L20.36 8.40L19.22 8.40ZM28.29 3.74L28.29 7.68L30.02 7.68L30.02 7.68Q30.30 7.68 30.57 7.50L30.57 7.50L30.57 7.50Q30.84 7.33 31.08 7L31.08 7L31.08 7Q31.29 6.69 31.41 6.36L31.41 6.36L31.41 6.36Q31.53 6.03 31.53 5.71L31.53 5.71L31.53 5.71Q31.53 4.93 31.08 4.33L31.08 4.33L31.08 4.33Q30.60 3.73 29.86 3.73L29.86 3.73L28.29 3.74ZM25.87 13.01L25.87 12.30L26.56 12.31L26.56 3.74L25.87 3.74L25.87 3.04L30.06 3.04L30.06 3.04Q30.69 3.04 31.24 3.20L31.24 3.20L31.24 3.20Q31.79 3.37 32.25 3.68L32.25 3.68L32.25 3.68Q32.73 4.05 33.00 4.56L33.00 4.56L33.00 4.56Q33.26 5.07 33.26 5.70L33.26 5.70L33.26 5.70Q33.26 6.28 33.02 6.77L33.02 6.77L33.02 6.77Q32.78 7.27 32.34 7.66L32.34 7.66L32.34 7.66Q31.91 8.01 31.39 8.21L31.39 8.21L31.39 8.21Q30.87 8.40 30.29 8.40L30.29 8.40L28.29 8.40L28.29 12.30L29.03 12.30L29.03 13.01L25.87 13.01ZM33.89 13.01L33.89 12.35L34.58 12.35L34.58 3.70L33.89 3.70L33.89 3.04L36.18 3.04L36.18 12.35L36.87 12.35L36.87 13.01L33.89 13.01ZM39.94 12.52L39.94 12.52L39.94 12.52Q40.46 12.52 41.03 11.98L41.03 11.98L41.03 11.98Q41.29 11.74 41.48 11.48L41.48 11.48L41.48 11.48Q41.67 11.22 41.77 10.94L41.77 10.94L41.77 9.41L41.77 9.41Q41.58 9.49 41.32 9.58L41.32 9.58L41.32 9.58Q41.06 9.67 40.71 9.76L40.71 9.76L40.71 9.76L40.71 9.76Q40.33 9.88 40.07 9.99L40.07 9.99L40.07 9.99Q39.81 10.10 39.65 10.23L39.65 10.23L39.65 10.22L39.65 10.22Q39.21 10.58 39.21 11.31L39.21 11.31L39.21 11.31Q39.21 11.80 39.38 12.13L39.38 12.13L39.38 12.13Q39.57 12.52 39.94 12.52ZM38.20 8.16L38.20 6.48L38.20 6.48Q39.01 6.29 39.55 6.19L39.55 6.19L39.55 6.19Q40.09 6.09 40.37 6.09L40.37 6.09L40.37 6.09Q41.92 6.09 42.57 6.57L42.57 6.57L42.57 6.57Q43.35 7.16 43.35 8.68L43.35 8.68L43.35 11.56L43.35 11.56Q43.35 12.35 43.37 12.35L43.37 12.35L44.16 12.35L44.16 13.01L42.05 13.01L42.05 13.01Q41.84 12.67 41.78 12.15L41.78 12.15L41.78 12.15Q41.62 12.34 41.42 12.51L41.42 12.51L41.42 12.51Q41.21 12.68 40.99 12.81L40.99 12.81L40.99 12.81Q40.33 13.17 39.60 13.17L39.60 13.17L39.60 13.17Q38.73 13.17 38.19 12.73L38.19 12.73L38.19 12.73Q37.62 12.24 37.62 11.36L37.62 11.36L37.62 11.36Q37.62 10.23 38.49 9.76L38.49 9.76L38.49 9.76Q38.91 9.54 40.25 9.27L40.25 9.27L40.25 9.27Q41.33 9.06 41.72 8.69L41.72 8.69L41.72 8.69Q41.73 8.62 41.75 8.53L41.75 8.53L41.75 8.53Q41.76 8.45 41.76 8.35L41.76 8.35L41.76 8.35Q41.76 6.75 40.09 6.75L40.09 6.75L40.09 6.75Q39.00 6.75 38.85 8.16L38.85 8.16L38.20 8.16ZM47.69 6.93L47.22 6.93L47.22 6.93Q47.41 7.42 47.58 7.86L47.58 7.86L47.58 7.86Q47.75 8.30 47.92 8.74L47.92 8.74L47.92 8.74Q48.09 9.17 48.27 9.62L48.27 9.62L48.27 9.62Q48.44 10.06 48.63 10.56L48.63 10.56L48.63 10.56Q48.81 10.09 48.98 9.65L48.98 9.65L48.98 9.65Q49.15 9.20 49.32 8.76L49.32 8.76L49.32 8.76Q49.49 8.31 49.66 7.86L49.66 7.86L49.66 7.86Q49.83 7.41 50.02 6.93L50.02 6.93L49.53 6.93L49.53 6.27L51.45 6.27L51.45 6.93L50.73 6.93L50.73 6.93Q49.98 8.89 49.25 10.83L49.25 10.83L49.25 10.83Q48.51 12.78 47.78 14.74L47.78 14.74L47.78 14.74Q47.20 16.25 46.07 16.25L46.07 16.25L46.07 16.25Q45.86 16.25 45.58 16.19L45.58 16.19L45.58 14.92L45.58 14.92Q46.08 15.17 46.35 15.17L46.35 15.17L46.35 15.17Q46.87 15.17 47.17 14.48L47.17 14.48L47.16 14.49L47.16 14.49Q47.33 14.02 47.49 13.59L47.49 13.59L47.49 13.59Q47.65 13.15 47.82 12.69L47.82 12.69L47.82 12.69Q47.26 11.22 46.71 9.81L46.71 9.81L46.71 9.81Q46.17 8.39 45.60 6.93L45.60 6.93L44.88 6.93L44.88 6.27L47.69 6.27L47.69 6.93ZM51.90 3.04L59.08 3.04L59.34 4.85L58.60 4.85L58.60 4.85Q58.44 3.74 57.83 3.74L57.83 3.74L56.35 3.74L56.35 12.30L57.03 12.30L57.03 13.01L53.92 13.01L53.92 12.30L54.63 12.30L54.63 3.74L53.15 3.74L53.15 3.74Q52.54 3.74 52.38 4.85L52.38 4.85L51.64 4.85L51.90 3.04ZM60.07 6.53L61.84 6.53L61.84 12.61L62.51 12.61L62.51 12.74L60.07 12.74L60.07 12.61L60.78 12.61L60.78 6.67L60.07 6.67L60.07 6.53ZM60.41 4.03L60.41 4.03L60.41 4.03Q60.41 3.84 60.48 3.68L60.48 3.68L60.48 3.68Q60.55 3.51 60.67 3.39L60.67 3.39L60.67 3.39Q60.79 3.27 60.96 3.20L60.96 3.20L60.96 3.20Q61.12 3.12 61.30 3.12L61.30 3.12L61.30 3.12Q61.49 3.12 61.65 3.20L61.65 3.20L61.65 3.20Q61.82 3.27 61.94 3.39L61.94 3.39L61.94 3.39Q62.06 3.51 62.13 3.68L62.13 3.68L62.13 3.68Q62.20 3.84 62.20 4.03L62.20 4.03L62.20 4.03Q62.20 4.21 62.13 4.38L62.13 4.38L62.13 4.38Q62.06 4.54 61.94 4.66L61.94 4.66L61.94 4.66Q61.82 4.78 61.65 4.85L61.65 4.85L61.65 4.85Q61.49 4.92 61.30 4.92L61.30 4.92L61.30 4.92Q61.12 4.92 60.96 4.85L60.96 4.85L60.96 4.85Q60.79 4.78 60.67 4.66L60.67 4.66L60.67 4.66Q60.55 4.54 60.48 4.38L60.48 4.38L60.48 4.38Q60.41 4.21 60.41 4.03ZM71.00 6.73L71.00 6.73L71.00 6.73Q70.83 6.73 70.65 6.81L70.65 6.81L70.65 6.81Q70.47 6.90 70.28 7.08L70.28 7.08L70.28 7.08Q69.91 7.43 69.90 7.81L69.90 7.81L69.90 7.81Q69.90 8.98 69.90 10.08L69.90 10.08L69.90 10.08Q69.90 11.18 69.90 12.35L69.90 12.35L70.59 12.35L70.59 13.01L67.63 13.01L67.63 12.35L68.31 12.35L68.31 8.67L68.31 8.67Q68.31 6.73 67.27 6.73L67.27 6.73L67.27 6.73Q66.99 6.73 66.60 7.05L66.60 7.05L66.60 7.05Q66.19 7.40 66.19 7.64L66.19 7.64L66.19 12.35L66.88 12.35L66.88 13.01L63.91 13.01L63.91 12.35L64.60 12.35L64.60 6.93L63.91 6.93L63.91 6.27L66.19 6.27L66.19 6.54L66.19 6.54Q66.47 6.33 66.80 6.22L66.80 6.22L66.80 6.22Q67.13 6.10 67.50 6.10L67.50 6.10L67.50 6.10Q68.15 6.10 68.66 6.32L68.66 6.32L68.66 6.32Q69.18 6.54 69.54 6.92L69.54 6.92L69.54 6.92Q70.11 6.10 71.24 6.10L71.24 6.10L71.24 6.10Q73.62 6.10 73.62 9.00L73.62 9.00L73.62 12.35L74.31 12.35L74.31 13.01L71.35 13.01L71.35 12.35L72.03 12.35L72.03 8.67L72.03 8.67Q72.03 6.73 71.00 6.73ZM76.94 8.84L79.87 8.84L79.87 8.84Q79.82 7.82 79.44 7.30L79.44 7.30L79.44 7.30Q79.07 6.79 78.39 6.79L78.39 6.79L78.39 6.79Q77.62 6.79 77.25 7.49L77.25 7.49L77.25 7.49Q77.10 7.75 77.03 8.08L77.03 8.08L77.03 8.08Q76.95 8.42 76.94 8.84L76.94 8.84ZM81.48 9.50L76.92 9.50L76.92 9.50Q76.91 9.65 76.91 9.73L76.91 9.73L76.91 9.73Q76.92 9.82 76.92 9.86L76.92 9.86L76.92 9.86Q76.92 12.43 78.77 12.43L78.77 12.43L78.77 12.43Q79.42 12.43 79.99 12.09L79.99 12.09L79.99 12.09Q80.25 11.92 80.48 11.65L80.48 11.65L80.48 11.65Q80.71 11.38 80.86 11.03L80.86 11.03L81.45 11.39L81.45 11.39Q81.27 11.85 80.95 12.20L80.95 12.20L80.95 12.20Q80.64 12.54 80.21 12.78L80.21 12.78L80.21 12.78Q79.84 12.97 79.41 13.07L79.41 13.07L79.41 13.07Q78.98 13.17 78.51 13.17L78.51 13.17L78.51 13.17Q77.71 13.17 77.10 12.89L77.10 12.89L77.10 12.89Q76.49 12.61 76.08 12.07L76.08 12.07L76.08 12.07Q75.72 11.59 75.53 10.93L75.53 10.93L75.53 10.93Q75.35 10.27 75.35 9.47L75.35 9.47L75.35 9.47Q75.35 7.98 76.09 7.07L76.09 7.07L76.09 7.07Q76.90 6.10 78.39 6.10L78.39 6.10L78.39 6.10Q79.13 6.10 79.68 6.33L79.68 6.33L79.68 6.33Q80.24 6.57 80.65 7.04L80.65 7.04L80.65 7.04Q81.40 7.91 81.48 9.50L81.48 9.50Z"
              transform="matrix(3.1925342854337773,0,0,3.1925342854337773,19.87229861954388,170.3813849102497)"/>
    </g>
    <g id="e04ac273-e489-496b-acc8-79ef5b151707" fill="#7E5DFC" stroke="none">
        <g>
            <path d="M49.983 7.291c-28.781 0-43.17 14.251-43.17 42.752s14.389 42.751 43.17 42.751c28.825 0 43.238-14.25 43.238-42.751S78.808 7.291 49.983 7.291zM75.204 76.06c-5.288 5.497-13.694 8.246-25.221 8.246-11.436 0-19.81-2.748-25.12-8.246-5.31-5.496-7.965-14.169-7.965-26.017 0-11.849 2.655-20.522 7.965-26.018 5.31-5.497 13.683-8.246 25.12-8.246 11.527 0 19.933 2.749 25.221 8.246 5.287 5.496 7.931 14.169 7.931 26.018 0 11.848-2.644 20.52-7.931 26.017z"
                  transform="matrix(0.9864771726184546,0,0,0.9864771726184546,100.65936917990507,70.54752799502052)"/>
            <path d="M63.001 29.522L50.328 42.194l-7.76-7.76a5.212 5.212 0 1 0-7.372 7.372l11.365 11.365a5.195 5.195 0 0 0 3.767 1.523 5.193 5.193 0 0 0 3.767-1.523l16.277-16.277a5.212 5.212 0 1 0-7.371-7.372zM73.966 49.932v.111c0 .208-.003.415-.008.622a3.157 3.157 0 1 0 6.314.151c.006-.257.009-.515.009-.773v-.111a3.158 3.158 0 0 0-6.315 0zM22.99 46.243c-1.728-.032-3.189 1.341-3.23 3.084-.006.238-.008.476-.008.715v.055c0 1.744 1.414 3.13 3.158 3.13s3.158-1.442 3.158-3.185c0-.19.002-.38.007-.57a3.16 3.16 0 0 0-3.085-3.229zM49.934 26.093h.083c.181 0 .363.002.543.006l.073.001a3.158 3.158 0 0 0 .07-6.314 31.235 31.235 0 0 0-.686-.008h-.083a3.158 3.158 0 0 0 0 6.315zM50.017 73.992c-.199 0-.398-.002-.596-.007-1.726-.049-3.19 1.339-3.231 3.083a3.159 3.159 0 0 0 3.083 3.231c.248.006.496.009.744.009h.027c1.744 0 3.144-1.414 3.144-3.158s-1.427-3.158-3.171-3.158z"
                  transform="matrix(0.9864771726184546,0,0,0.9864771726184546,100.65936917990507,70.54752799502052)"/>
        </g>
    </g>
</svg>
</file>

<file path="TDRPlayTime-logo/vector/isolated-layout.svg">
<svg xmlns="http://www.w3.org/2000/svg" class="font" viewBox="0 0 300 300">
    <rect width="300" height="300" x="0" y="0" fill="#261836" class="logo-background-square"/>
    <g id="b95abfb2-47b5-46e4-afac-613cbf762f17" fill="#8d68f2">
        <path d="M0.30 3.04L7.49 3.04L7.75 4.85L7.01 4.85L7.01 4.85Q6.84 3.74 6.23 3.74L6.23 3.74L4.75 3.74L4.75 12.30L5.43 12.30L5.43 13.01L2.32 13.01L2.32 12.30L3.04 12.30L3.04 3.74L1.55 3.74L1.55 3.74Q0.94 3.74 0.78 4.85L0.78 4.85L0.04 4.85L0.30 3.04ZM10.60 3.74L10.60 12.31L11.71 12.31L11.71 12.31Q12.57 12.31 12.94 12.07L12.94 12.07L12.94 12.07Q14.27 11.22 14.27 7.97L14.27 7.97L14.27 7.97Q14.27 4.83 13.00 4.03L13.00 4.03L13.00 4.03Q12.77 3.88 12.43 3.81L12.43 3.81L12.43 3.81Q12.09 3.74 11.63 3.74L11.63 3.74L10.60 3.74ZM8.20 3.74L8.20 3.04L12.07 3.04L12.07 3.04Q13.17 3.04 13.98 3.42L13.98 3.42L13.98 3.42Q14.78 3.81 15.24 4.53L15.24 4.53L15.24 4.53Q15.59 5.11 15.78 5.99L15.78 5.99L15.78 5.99Q15.97 6.87 15.97 8.02L15.97 8.02L15.97 8.02Q15.97 9.14 15.78 10.04L15.78 10.04L15.78 10.04Q15.59 10.94 15.27 11.51L15.27 11.51L15.27 11.51Q14.81 12.23 14.02 12.62L14.02 12.62L14.02 12.62Q13.23 13.01 12.13 13.01L12.13 13.01L8.20 13.01L8.20 12.30L8.89 12.30L8.89 3.74L8.20 3.74ZM19.22 3.74L19.22 7.68L20.95 7.68L20.95 7.68Q21.23 7.68 21.50 7.50L21.50 7.50L21.50 7.50Q21.77 7.33 22.01 7L22.01 7L22.01 7Q22.22 6.69 22.34 6.36L22.34 6.36L22.34 6.36Q22.46 6.03 22.46 5.71L22.46 5.71L22.46 5.71Q22.46 4.93 22.00 4.33L22.00 4.33L22.00 4.33Q21.53 3.73 20.79 3.73L20.79 3.73L19.22 3.74ZM19.22 8.40L19.22 12.30L19.96 12.30L19.96 13.01L16.80 13.01L16.80 12.30L17.49 12.31L17.49 3.74L16.80 3.74L16.80 3.04L20.99 3.04L20.99 3.04Q21.63 3.04 22.18 3.20L22.18 3.20L22.18 3.20Q22.74 3.37 23.18 3.68L23.18 3.68L23.18 3.68Q23.67 4.05 23.93 4.56L23.93 4.56L23.93 4.56Q24.19 5.07 24.19 5.70L24.19 5.70L24.19 5.70Q24.19 6.17 24.01 6.60L24.01 6.60L24.01 6.60Q23.83 7.03 23.50 7.40L23.50 7.40L23.50 7.40Q23.20 7.71 22.83 7.94L22.83 7.94L22.83 7.94Q22.46 8.18 22.05 8.29L22.05 8.29L22.05 8.29Q22.31 9.20 22.93 10.19L22.93 10.19L22.93 10.19Q23.54 11.18 24.50 12.30L24.50 12.30L25.24 12.30L25.24 13.01L23.02 13.01L23.02 13.01Q22.19 11.91 21.53 10.76L21.53 10.76L21.53 10.76Q20.86 9.61 20.36 8.40L20.36 8.40L19.22 8.40ZM28.29 3.74L28.29 7.68L30.02 7.68L30.02 7.68Q30.30 7.68 30.57 7.50L30.57 7.50L30.57 7.50Q30.84 7.33 31.08 7L31.08 7L31.08 7Q31.29 6.69 31.41 6.36L31.41 6.36L31.41 6.36Q31.53 6.03 31.53 5.71L31.53 5.71L31.53 5.71Q31.53 4.93 31.08 4.33L31.08 4.33L31.08 4.33Q30.60 3.73 29.86 3.73L29.86 3.73L28.29 3.74ZM25.87 13.01L25.87 12.30L26.56 12.31L26.56 3.74L25.87 3.74L25.87 3.04L30.06 3.04L30.06 3.04Q30.69 3.04 31.24 3.20L31.24 3.20L31.24 3.20Q31.79 3.37 32.25 3.68L32.25 3.68L32.25 3.68Q32.73 4.05 33.00 4.56L33.00 4.56L33.00 4.56Q33.26 5.07 33.26 5.70L33.26 5.70L33.26 5.70Q33.26 6.28 33.02 6.77L33.02 6.77L33.02 6.77Q32.78 7.27 32.34 7.66L32.34 7.66L32.34 7.66Q31.91 8.01 31.39 8.21L31.39 8.21L31.39 8.21Q30.87 8.40 30.29 8.40L30.29 8.40L28.29 8.40L28.29 12.30L29.03 12.30L29.03 13.01L25.87 13.01ZM33.89 13.01L33.89 12.35L34.58 12.35L34.58 3.70L33.89 3.70L33.89 3.04L36.18 3.04L36.18 12.35L36.87 12.35L36.87 13.01L33.89 13.01ZM39.94 12.52L39.94 12.52L39.94 12.52Q40.46 12.52 41.03 11.98L41.03 11.98L41.03 11.98Q41.29 11.74 41.48 11.48L41.48 11.48L41.48 11.48Q41.67 11.22 41.77 10.94L41.77 10.94L41.77 9.41L41.77 9.41Q41.58 9.49 41.32 9.58L41.32 9.58L41.32 9.58Q41.06 9.67 40.71 9.76L40.71 9.76L40.71 9.76L40.71 9.76Q40.33 9.88 40.07 9.99L40.07 9.99L40.07 9.99Q39.81 10.10 39.65 10.23L39.65 10.23L39.65 10.22L39.65 10.22Q39.21 10.58 39.21 11.31L39.21 11.31L39.21 11.31Q39.21 11.80 39.38 12.13L39.38 12.13L39.38 12.13Q39.57 12.52 39.94 12.52ZM38.20 8.16L38.20 6.48L38.20 6.48Q39.01 6.29 39.55 6.19L39.55 6.19L39.55 6.19Q40.09 6.09 40.37 6.09L40.37 6.09L40.37 6.09Q41.92 6.09 42.57 6.57L42.57 6.57L42.57 6.57Q43.35 7.16 43.35 8.68L43.35 8.68L43.35 11.56L43.35 11.56Q43.35 12.35 43.37 12.35L43.37 12.35L44.16 12.35L44.16 13.01L42.05 13.01L42.05 13.01Q41.84 12.67 41.78 12.15L41.78 12.15L41.78 12.15Q41.62 12.34 41.42 12.51L41.42 12.51L41.42 12.51Q41.21 12.68 40.99 12.81L40.99 12.81L40.99 12.81Q40.33 13.17 39.60 13.17L39.60 13.17L39.60 13.17Q38.73 13.17 38.19 12.73L38.19 12.73L38.19 12.73Q37.62 12.24 37.62 11.36L37.62 11.36L37.62 11.36Q37.62 10.23 38.49 9.76L38.49 9.76L38.49 9.76Q38.91 9.54 40.25 9.27L40.25 9.27L40.25 9.27Q41.33 9.06 41.72 8.69L41.72 8.69L41.72 8.69Q41.73 8.62 41.75 8.53L41.75 8.53L41.75 8.53Q41.76 8.45 41.76 8.35L41.76 8.35L41.76 8.35Q41.76 6.75 40.09 6.75L40.09 6.75L40.09 6.75Q39.00 6.75 38.85 8.16L38.85 8.16L38.20 8.16ZM47.69 6.93L47.22 6.93L47.22 6.93Q47.41 7.42 47.58 7.86L47.58 7.86L47.58 7.86Q47.75 8.30 47.92 8.74L47.92 8.74L47.92 8.74Q48.09 9.17 48.27 9.62L48.27 9.62L48.27 9.62Q48.44 10.06 48.63 10.56L48.63 10.56L48.63 10.56Q48.81 10.09 48.98 9.65L48.98 9.65L48.98 9.65Q49.15 9.20 49.32 8.76L49.32 8.76L49.32 8.76Q49.49 8.31 49.66 7.86L49.66 7.86L49.66 7.86Q49.83 7.41 50.02 6.93L50.02 6.93L49.53 6.93L49.53 6.27L51.45 6.27L51.45 6.93L50.73 6.93L50.73 6.93Q49.98 8.89 49.25 10.83L49.25 10.83L49.25 10.83Q48.51 12.78 47.78 14.74L47.78 14.74L47.78 14.74Q47.20 16.25 46.07 16.25L46.07 16.25L46.07 16.25Q45.86 16.25 45.58 16.19L45.58 16.19L45.58 14.92L45.58 14.92Q46.08 15.17 46.35 15.17L46.35 15.17L46.35 15.17Q46.87 15.17 47.17 14.48L47.17 14.48L47.16 14.49L47.16 14.49Q47.33 14.02 47.49 13.59L47.49 13.59L47.49 13.59Q47.65 13.15 47.82 12.69L47.82 12.69L47.82 12.69Q47.26 11.22 46.71 9.81L46.71 9.81L46.71 9.81Q46.17 8.39 45.60 6.93L45.60 6.93L44.88 6.93L44.88 6.27L47.69 6.27L47.69 6.93ZM51.90 3.04L59.08 3.04L59.34 4.85L58.60 4.85L58.60 4.85Q58.44 3.74 57.83 3.74L57.83 3.74L56.35 3.74L56.35 12.30L57.03 12.30L57.03 13.01L53.92 13.01L53.92 12.30L54.63 12.30L54.63 3.74L53.15 3.74L53.15 3.74Q52.54 3.74 52.38 4.85L52.38 4.85L51.64 4.85L51.90 3.04ZM60.07 6.53L61.84 6.53L61.84 12.61L62.51 12.61L62.51 12.74L60.07 12.74L60.07 12.61L60.78 12.61L60.78 6.67L60.07 6.67L60.07 6.53ZM60.41 4.03L60.41 4.03L60.41 4.03Q60.41 3.84 60.48 3.68L60.48 3.68L60.48 3.68Q60.55 3.51 60.67 3.39L60.67 3.39L60.67 3.39Q60.79 3.27 60.96 3.20L60.96 3.20L60.96 3.20Q61.12 3.12 61.30 3.12L61.30 3.12L61.30 3.12Q61.49 3.12 61.65 3.20L61.65 3.20L61.65 3.20Q61.82 3.27 61.94 3.39L61.94 3.39L61.94 3.39Q62.06 3.51 62.13 3.68L62.13 3.68L62.13 3.68Q62.20 3.84 62.20 4.03L62.20 4.03L62.20 4.03Q62.20 4.21 62.13 4.38L62.13 4.38L62.13 4.38Q62.06 4.54 61.94 4.66L61.94 4.66L61.94 4.66Q61.82 4.78 61.65 4.85L61.65 4.85L61.65 4.85Q61.49 4.92 61.30 4.92L61.30 4.92L61.30 4.92Q61.12 4.92 60.96 4.85L60.96 4.85L60.96 4.85Q60.79 4.78 60.67 4.66L60.67 4.66L60.67 4.66Q60.55 4.54 60.48 4.38L60.48 4.38L60.48 4.38Q60.41 4.21 60.41 4.03ZM71.00 6.73L71.00 6.73L71.00 6.73Q70.83 6.73 70.65 6.81L70.65 6.81L70.65 6.81Q70.47 6.90 70.28 7.08L70.28 7.08L70.28 7.08Q69.91 7.43 69.90 7.81L69.90 7.81L69.90 7.81Q69.90 8.98 69.90 10.08L69.90 10.08L69.90 10.08Q69.90 11.18 69.90 12.35L69.90 12.35L70.59 12.35L70.59 13.01L67.63 13.01L67.63 12.35L68.31 12.35L68.31 8.67L68.31 8.67Q68.31 6.73 67.27 6.73L67.27 6.73L67.27 6.73Q66.99 6.73 66.60 7.05L66.60 7.05L66.60 7.05Q66.19 7.40 66.19 7.64L66.19 7.64L66.19 12.35L66.88 12.35L66.88 13.01L63.91 13.01L63.91 12.35L64.60 12.35L64.60 6.93L63.91 6.93L63.91 6.27L66.19 6.27L66.19 6.54L66.19 6.54Q66.47 6.33 66.80 6.22L66.80 6.22L66.80 6.22Q67.13 6.10 67.50 6.10L67.50 6.10L67.50 6.10Q68.15 6.10 68.66 6.32L68.66 6.32L68.66 6.32Q69.18 6.54 69.54 6.92L69.54 6.92L69.54 6.92Q70.11 6.10 71.24 6.10L71.24 6.10L71.24 6.10Q73.62 6.10 73.62 9.00L73.62 9.00L73.62 12.35L74.31 12.35L74.31 13.01L71.35 13.01L71.35 12.35L72.03 12.35L72.03 8.67L72.03 8.67Q72.03 6.73 71.00 6.73ZM76.94 8.84L79.87 8.84L79.87 8.84Q79.82 7.82 79.44 7.30L79.44 7.30L79.44 7.30Q79.07 6.79 78.39 6.79L78.39 6.79L78.39 6.79Q77.62 6.79 77.25 7.49L77.25 7.49L77.25 7.49Q77.10 7.75 77.03 8.08L77.03 8.08L77.03 8.08Q76.95 8.42 76.94 8.84L76.94 8.84ZM81.48 9.50L76.92 9.50L76.92 9.50Q76.91 9.65 76.91 9.73L76.91 9.73L76.91 9.73Q76.92 9.82 76.92 9.86L76.92 9.86L76.92 9.86Q76.92 12.43 78.77 12.43L78.77 12.43L78.77 12.43Q79.42 12.43 79.99 12.09L79.99 12.09L79.99 12.09Q80.25 11.92 80.48 11.65L80.48 11.65L80.48 11.65Q80.71 11.38 80.86 11.03L80.86 11.03L81.45 11.39L81.45 11.39Q81.27 11.85 80.95 12.20L80.95 12.20L80.95 12.20Q80.64 12.54 80.21 12.78L80.21 12.78L80.21 12.78Q79.84 12.97 79.41 13.07L79.41 13.07L79.41 13.07Q78.98 13.17 78.51 13.17L78.51 13.17L78.51 13.17Q77.71 13.17 77.10 12.89L77.10 12.89L77.10 12.89Q76.49 12.61 76.08 12.07L76.08 12.07L76.08 12.07Q75.72 11.59 75.53 10.93L75.53 10.93L75.53 10.93Q75.35 10.27 75.35 9.47L75.35 9.47L75.35 9.47Q75.35 7.98 76.09 7.07L76.09 7.07L76.09 7.07Q76.90 6.10 78.39 6.10L78.39 6.10L78.39 6.10Q79.13 6.10 79.68 6.33L79.68 6.33L79.68 6.33Q80.24 6.57 80.65 7.04L80.65 7.04L80.65 7.04Q81.40 7.91 81.48 9.50L81.48 9.50Z"
              transform="matrix(2.701375164597812,0,0,2.701375164597812,39.8919449857679,123.94523658897873)"/>
    </g>
</svg>
</file>

<file path="TDRPlayTime-logo/vector/isolated-monochrome-black.svg">
<svg xmlns="http://www.w3.org/2000/svg" class="font" viewBox="0 0 369.902 60">
    <g id="85b29b1b-cfbe-42ab-a728-3c911abd01c2" fill="#000">
        <path d="M0.30 3.04L7.49 3.04L7.75 4.85L7.01 4.85L7.01 4.85Q6.84 3.74 6.23 3.74L6.23 3.74L4.75 3.74L4.75 12.30L5.43 12.30L5.43 13.01L2.32 13.01L2.32 12.30L3.04 12.30L3.04 3.74L1.55 3.74L1.55 3.74Q0.94 3.74 0.78 4.85L0.78 4.85L0.04 4.85L0.30 3.04ZM10.60 3.74L10.60 12.31L11.71 12.31L11.71 12.31Q12.57 12.31 12.94 12.07L12.94 12.07L12.94 12.07Q14.27 11.22 14.27 7.97L14.27 7.97L14.27 7.97Q14.27 4.83 13.00 4.03L13.00 4.03L13.00 4.03Q12.77 3.88 12.43 3.81L12.43 3.81L12.43 3.81Q12.09 3.74 11.63 3.74L11.63 3.74L10.60 3.74ZM8.20 3.74L8.20 3.04L12.07 3.04L12.07 3.04Q13.17 3.04 13.98 3.42L13.98 3.42L13.98 3.42Q14.78 3.81 15.24 4.53L15.24 4.53L15.24 4.53Q15.59 5.11 15.78 5.99L15.78 5.99L15.78 5.99Q15.97 6.87 15.97 8.02L15.97 8.02L15.97 8.02Q15.97 9.14 15.78 10.04L15.78 10.04L15.78 10.04Q15.59 10.94 15.27 11.51L15.27 11.51L15.27 11.51Q14.81 12.23 14.02 12.62L14.02 12.62L14.02 12.62Q13.23 13.01 12.13 13.01L12.13 13.01L8.20 13.01L8.20 12.30L8.89 12.30L8.89 3.74L8.20 3.74ZM19.22 3.74L19.22 7.68L20.95 7.68L20.95 7.68Q21.23 7.68 21.50 7.50L21.50 7.50L21.50 7.50Q21.77 7.33 22.01 7L22.01 7L22.01 7Q22.22 6.69 22.34 6.36L22.34 6.36L22.34 6.36Q22.46 6.03 22.46 5.71L22.46 5.71L22.46 5.71Q22.46 4.93 22.00 4.33L22.00 4.33L22.00 4.33Q21.53 3.73 20.79 3.73L20.79 3.73L19.22 3.74ZM19.22 8.40L19.22 12.30L19.96 12.30L19.96 13.01L16.80 13.01L16.80 12.30L17.49 12.31L17.49 3.74L16.80 3.74L16.80 3.04L20.99 3.04L20.99 3.04Q21.63 3.04 22.18 3.20L22.18 3.20L22.18 3.20Q22.74 3.37 23.18 3.68L23.18 3.68L23.18 3.68Q23.67 4.05 23.93 4.56L23.93 4.56L23.93 4.56Q24.19 5.07 24.19 5.70L24.19 5.70L24.19 5.70Q24.19 6.17 24.01 6.60L24.01 6.60L24.01 6.60Q23.83 7.03 23.50 7.40L23.50 7.40L23.50 7.40Q23.20 7.71 22.83 7.94L22.83 7.94L22.83 7.94Q22.46 8.18 22.05 8.29L22.05 8.29L22.05 8.29Q22.31 9.20 22.93 10.19L22.93 10.19L22.93 10.19Q23.54 11.18 24.50 12.30L24.50 12.30L25.24 12.30L25.24 13.01L23.02 13.01L23.02 13.01Q22.19 11.91 21.53 10.76L21.53 10.76L21.53 10.76Q20.86 9.61 20.36 8.40L20.36 8.40L19.22 8.40ZM28.29 3.74L28.29 7.68L30.02 7.68L30.02 7.68Q30.30 7.68 30.57 7.50L30.57 7.50L30.57 7.50Q30.84 7.33 31.08 7L31.08 7L31.08 7Q31.29 6.69 31.41 6.36L31.41 6.36L31.41 6.36Q31.53 6.03 31.53 5.71L31.53 5.71L31.53 5.71Q31.53 4.93 31.08 4.33L31.08 4.33L31.08 4.33Q30.60 3.73 29.86 3.73L29.86 3.73L28.29 3.74ZM25.87 13.01L25.87 12.30L26.56 12.31L26.56 3.74L25.87 3.74L25.87 3.04L30.06 3.04L30.06 3.04Q30.69 3.04 31.24 3.20L31.24 3.20L31.24 3.20Q31.79 3.37 32.25 3.68L32.25 3.68L32.25 3.68Q32.73 4.05 33.00 4.56L33.00 4.56L33.00 4.56Q33.26 5.07 33.26 5.70L33.26 5.70L33.26 5.70Q33.26 6.28 33.02 6.77L33.02 6.77L33.02 6.77Q32.78 7.27 32.34 7.66L32.34 7.66L32.34 7.66Q31.91 8.01 31.39 8.21L31.39 8.21L31.39 8.21Q30.87 8.40 30.29 8.40L30.29 8.40L28.29 8.40L28.29 12.30L29.03 12.30L29.03 13.01L25.87 13.01ZM33.89 13.01L33.89 12.35L34.58 12.35L34.58 3.70L33.89 3.70L33.89 3.04L36.18 3.04L36.18 12.35L36.87 12.35L36.87 13.01L33.89 13.01ZM39.94 12.52L39.94 12.52L39.94 12.52Q40.46 12.52 41.03 11.98L41.03 11.98L41.03 11.98Q41.29 11.74 41.48 11.48L41.48 11.48L41.48 11.48Q41.67 11.22 41.77 10.94L41.77 10.94L41.77 9.41L41.77 9.41Q41.58 9.49 41.32 9.58L41.32 9.58L41.32 9.58Q41.06 9.67 40.71 9.76L40.71 9.76L40.71 9.76L40.71 9.76Q40.33 9.88 40.07 9.99L40.07 9.99L40.07 9.99Q39.81 10.10 39.65 10.23L39.65 10.23L39.65 10.22L39.65 10.22Q39.21 10.58 39.21 11.31L39.21 11.31L39.21 11.31Q39.21 11.80 39.38 12.13L39.38 12.13L39.38 12.13Q39.57 12.52 39.94 12.52ZM38.20 8.16L38.20 6.48L38.20 6.48Q39.01 6.29 39.55 6.19L39.55 6.19L39.55 6.19Q40.09 6.09 40.37 6.09L40.37 6.09L40.37 6.09Q41.92 6.09 42.57 6.57L42.57 6.57L42.57 6.57Q43.35 7.16 43.35 8.68L43.35 8.68L43.35 11.56L43.35 11.56Q43.35 12.35 43.37 12.35L43.37 12.35L44.16 12.35L44.16 13.01L42.05 13.01L42.05 13.01Q41.84 12.67 41.78 12.15L41.78 12.15L41.78 12.15Q41.62 12.34 41.42 12.51L41.42 12.51L41.42 12.51Q41.21 12.68 40.99 12.81L40.99 12.81L40.99 12.81Q40.33 13.17 39.60 13.17L39.60 13.17L39.60 13.17Q38.73 13.17 38.19 12.73L38.19 12.73L38.19 12.73Q37.62 12.24 37.62 11.36L37.62 11.36L37.62 11.36Q37.62 10.23 38.49 9.76L38.49 9.76L38.49 9.76Q38.91 9.54 40.25 9.27L40.25 9.27L40.25 9.27Q41.33 9.06 41.72 8.69L41.72 8.69L41.72 8.69Q41.73 8.62 41.75 8.53L41.75 8.53L41.75 8.53Q41.76 8.45 41.76 8.35L41.76 8.35L41.76 8.35Q41.76 6.75 40.09 6.75L40.09 6.75L40.09 6.75Q39.00 6.75 38.85 8.16L38.85 8.16L38.20 8.16ZM47.69 6.93L47.22 6.93L47.22 6.93Q47.41 7.42 47.58 7.86L47.58 7.86L47.58 7.86Q47.75 8.30 47.92 8.74L47.92 8.74L47.92 8.74Q48.09 9.17 48.27 9.62L48.27 9.62L48.27 9.62Q48.44 10.06 48.63 10.56L48.63 10.56L48.63 10.56Q48.81 10.09 48.98 9.65L48.98 9.65L48.98 9.65Q49.15 9.20 49.32 8.76L49.32 8.76L49.32 8.76Q49.49 8.31 49.66 7.86L49.66 7.86L49.66 7.86Q49.83 7.41 50.02 6.93L50.02 6.93L49.53 6.93L49.53 6.27L51.45 6.27L51.45 6.93L50.73 6.93L50.73 6.93Q49.98 8.89 49.25 10.83L49.25 10.83L49.25 10.83Q48.51 12.78 47.78 14.74L47.78 14.74L47.78 14.74Q47.20 16.25 46.07 16.25L46.07 16.25L46.07 16.25Q45.86 16.25 45.58 16.19L45.58 16.19L45.58 14.92L45.58 14.92Q46.08 15.17 46.35 15.17L46.35 15.17L46.35 15.17Q46.87 15.17 47.17 14.48L47.17 14.48L47.16 14.49L47.16 14.49Q47.33 14.02 47.49 13.59L47.49 13.59L47.49 13.59Q47.65 13.15 47.82 12.69L47.82 12.69L47.82 12.69Q47.26 11.22 46.71 9.81L46.71 9.81L46.71 9.81Q46.17 8.39 45.60 6.93L45.60 6.93L44.88 6.93L44.88 6.27L47.69 6.27L47.69 6.93ZM51.90 3.04L59.08 3.04L59.34 4.85L58.60 4.85L58.60 4.85Q58.44 3.74 57.83 3.74L57.83 3.74L56.35 3.74L56.35 12.30L57.03 12.30L57.03 13.01L53.92 13.01L53.92 12.30L54.63 12.30L54.63 3.74L53.15 3.74L53.15 3.74Q52.54 3.74 52.38 4.85L52.38 4.85L51.64 4.85L51.90 3.04ZM60.07 6.53L61.84 6.53L61.84 12.61L62.51 12.61L62.51 12.74L60.07 12.74L60.07 12.61L60.78 12.61L60.78 6.67L60.07 6.67L60.07 6.53ZM60.41 4.03L60.41 4.03L60.41 4.03Q60.41 3.84 60.48 3.68L60.48 3.68L60.48 3.68Q60.55 3.51 60.67 3.39L60.67 3.39L60.67 3.39Q60.79 3.27 60.96 3.20L60.96 3.20L60.96 3.20Q61.12 3.12 61.30 3.12L61.30 3.12L61.30 3.12Q61.49 3.12 61.65 3.20L61.65 3.20L61.65 3.20Q61.82 3.27 61.94 3.39L61.94 3.39L61.94 3.39Q62.06 3.51 62.13 3.68L62.13 3.68L62.13 3.68Q62.20 3.84 62.20 4.03L62.20 4.03L62.20 4.03Q62.20 4.21 62.13 4.38L62.13 4.38L62.13 4.38Q62.06 4.54 61.94 4.66L61.94 4.66L61.94 4.66Q61.82 4.78 61.65 4.85L61.65 4.85L61.65 4.85Q61.49 4.92 61.30 4.92L61.30 4.92L61.30 4.92Q61.12 4.92 60.96 4.85L60.96 4.85L60.96 4.85Q60.79 4.78 60.67 4.66L60.67 4.66L60.67 4.66Q60.55 4.54 60.48 4.38L60.48 4.38L60.48 4.38Q60.41 4.21 60.41 4.03ZM71.00 6.73L71.00 6.73L71.00 6.73Q70.83 6.73 70.65 6.81L70.65 6.81L70.65 6.81Q70.47 6.90 70.28 7.08L70.28 7.08L70.28 7.08Q69.91 7.43 69.90 7.81L69.90 7.81L69.90 7.81Q69.90 8.98 69.90 10.08L69.90 10.08L69.90 10.08Q69.90 11.18 69.90 12.35L69.90 12.35L70.59 12.35L70.59 13.01L67.63 13.01L67.63 12.35L68.31 12.35L68.31 8.67L68.31 8.67Q68.31 6.73 67.27 6.73L67.27 6.73L67.27 6.73Q66.99 6.73 66.60 7.05L66.60 7.05L66.60 7.05Q66.19 7.40 66.19 7.64L66.19 7.64L66.19 12.35L66.88 12.35L66.88 13.01L63.91 13.01L63.91 12.35L64.60 12.35L64.60 6.93L63.91 6.93L63.91 6.27L66.19 6.27L66.19 6.54L66.19 6.54Q66.47 6.33 66.80 6.22L66.80 6.22L66.80 6.22Q67.13 6.10 67.50 6.10L67.50 6.10L67.50 6.10Q68.15 6.10 68.66 6.32L68.66 6.32L68.66 6.32Q69.18 6.54 69.54 6.92L69.54 6.92L69.54 6.92Q70.11 6.10 71.24 6.10L71.24 6.10L71.24 6.10Q73.62 6.10 73.62 9.00L73.62 9.00L73.62 12.35L74.31 12.35L74.31 13.01L71.35 13.01L71.35 12.35L72.03 12.35L72.03 8.67L72.03 8.67Q72.03 6.73 71.00 6.73ZM76.94 8.84L79.87 8.84L79.87 8.84Q79.82 7.82 79.44 7.30L79.44 7.30L79.44 7.30Q79.07 6.79 78.39 6.79L78.39 6.79L78.39 6.79Q77.62 6.79 77.25 7.49L77.25 7.49L77.25 7.49Q77.10 7.75 77.03 8.08L77.03 8.08L77.03 8.08Q76.95 8.42 76.94 8.84L76.94 8.84ZM81.48 9.50L76.92 9.50L76.92 9.50Q76.91 9.65 76.91 9.73L76.91 9.73L76.91 9.73Q76.92 9.82 76.92 9.86L76.92 9.86L76.92 9.86Q76.92 12.43 78.77 12.43L78.77 12.43L78.77 12.43Q79.42 12.43 79.99 12.09L79.99 12.09L79.99 12.09Q80.25 11.92 80.48 11.65L80.48 11.65L80.48 11.65Q80.71 11.38 80.86 11.03L80.86 11.03L81.45 11.39L81.45 11.39Q81.27 11.85 80.95 12.20L80.95 12.20L80.95 12.20Q80.64 12.54 80.21 12.78L80.21 12.78L80.21 12.78Q79.84 12.97 79.41 13.07L79.41 13.07L79.41 13.07Q78.98 13.17 78.51 13.17L78.51 13.17L78.51 13.17Q77.71 13.17 77.10 12.89L77.10 12.89L77.10 12.89Q76.49 12.61 76.08 12.07L76.08 12.07L76.08 12.07Q75.72 11.59 75.53 10.93L75.53 10.93L75.53 10.93Q75.35 10.27 75.35 9.47L75.35 9.47L75.35 9.47Q75.35 7.98 76.09 7.07L76.09 7.07L76.09 7.07Q76.90 6.10 78.39 6.10L78.39 6.10L78.39 6.10Q79.13 6.10 79.68 6.33L79.68 6.33L79.68 6.33Q80.24 6.57 80.65 7.04L80.65 7.04L80.65 7.04Q81.40 7.91 81.48 9.50L81.48 9.50Z"
              transform="matrix(4.542013612924749,0,0,4.542013612924749,-0.18168329815057405,-13.807721686864326)"/>
    </g>
</svg>
</file>

<file path="TDRPlayTime-logo/vector/isolated-monochrome-white.svg">
<svg xmlns="http://www.w3.org/2000/svg" class="font" viewBox="0 0 369.902 60">
    <g id="918cdf25-e308-4374-b434-bea963eee0f6" fill="#fff">
        <path d="M0.30 3.04L7.49 3.04L7.75 4.85L7.01 4.85L7.01 4.85Q6.84 3.74 6.23 3.74L6.23 3.74L4.75 3.74L4.75 12.30L5.43 12.30L5.43 13.01L2.32 13.01L2.32 12.30L3.04 12.30L3.04 3.74L1.55 3.74L1.55 3.74Q0.94 3.74 0.78 4.85L0.78 4.85L0.04 4.85L0.30 3.04ZM10.60 3.74L10.60 12.31L11.71 12.31L11.71 12.31Q12.57 12.31 12.94 12.07L12.94 12.07L12.94 12.07Q14.27 11.22 14.27 7.97L14.27 7.97L14.27 7.97Q14.27 4.83 13.00 4.03L13.00 4.03L13.00 4.03Q12.77 3.88 12.43 3.81L12.43 3.81L12.43 3.81Q12.09 3.74 11.63 3.74L11.63 3.74L10.60 3.74ZM8.20 3.74L8.20 3.04L12.07 3.04L12.07 3.04Q13.17 3.04 13.98 3.42L13.98 3.42L13.98 3.42Q14.78 3.81 15.24 4.53L15.24 4.53L15.24 4.53Q15.59 5.11 15.78 5.99L15.78 5.99L15.78 5.99Q15.97 6.87 15.97 8.02L15.97 8.02L15.97 8.02Q15.97 9.14 15.78 10.04L15.78 10.04L15.78 10.04Q15.59 10.94 15.27 11.51L15.27 11.51L15.27 11.51Q14.81 12.23 14.02 12.62L14.02 12.62L14.02 12.62Q13.23 13.01 12.13 13.01L12.13 13.01L8.20 13.01L8.20 12.30L8.89 12.30L8.89 3.74L8.20 3.74ZM19.22 3.74L19.22 7.68L20.95 7.68L20.95 7.68Q21.23 7.68 21.50 7.50L21.50 7.50L21.50 7.50Q21.77 7.33 22.01 7L22.01 7L22.01 7Q22.22 6.69 22.34 6.36L22.34 6.36L22.34 6.36Q22.46 6.03 22.46 5.71L22.46 5.71L22.46 5.71Q22.46 4.93 22.00 4.33L22.00 4.33L22.00 4.33Q21.53 3.73 20.79 3.73L20.79 3.73L19.22 3.74ZM19.22 8.40L19.22 12.30L19.96 12.30L19.96 13.01L16.80 13.01L16.80 12.30L17.49 12.31L17.49 3.74L16.80 3.74L16.80 3.04L20.99 3.04L20.99 3.04Q21.63 3.04 22.18 3.20L22.18 3.20L22.18 3.20Q22.74 3.37 23.18 3.68L23.18 3.68L23.18 3.68Q23.67 4.05 23.93 4.56L23.93 4.56L23.93 4.56Q24.19 5.07 24.19 5.70L24.19 5.70L24.19 5.70Q24.19 6.17 24.01 6.60L24.01 6.60L24.01 6.60Q23.83 7.03 23.50 7.40L23.50 7.40L23.50 7.40Q23.20 7.71 22.83 7.94L22.83 7.94L22.83 7.94Q22.46 8.18 22.05 8.29L22.05 8.29L22.05 8.29Q22.31 9.20 22.93 10.19L22.93 10.19L22.93 10.19Q23.54 11.18 24.50 12.30L24.50 12.30L25.24 12.30L25.24 13.01L23.02 13.01L23.02 13.01Q22.19 11.91 21.53 10.76L21.53 10.76L21.53 10.76Q20.86 9.61 20.36 8.40L20.36 8.40L19.22 8.40ZM28.29 3.74L28.29 7.68L30.02 7.68L30.02 7.68Q30.30 7.68 30.57 7.50L30.57 7.50L30.57 7.50Q30.84 7.33 31.08 7L31.08 7L31.08 7Q31.29 6.69 31.41 6.36L31.41 6.36L31.41 6.36Q31.53 6.03 31.53 5.71L31.53 5.71L31.53 5.71Q31.53 4.93 31.08 4.33L31.08 4.33L31.08 4.33Q30.60 3.73 29.86 3.73L29.86 3.73L28.29 3.74ZM25.87 13.01L25.87 12.30L26.56 12.31L26.56 3.74L25.87 3.74L25.87 3.04L30.06 3.04L30.06 3.04Q30.69 3.04 31.24 3.20L31.24 3.20L31.24 3.20Q31.79 3.37 32.25 3.68L32.25 3.68L32.25 3.68Q32.73 4.05 33.00 4.56L33.00 4.56L33.00 4.56Q33.26 5.07 33.26 5.70L33.26 5.70L33.26 5.70Q33.26 6.28 33.02 6.77L33.02 6.77L33.02 6.77Q32.78 7.27 32.34 7.66L32.34 7.66L32.34 7.66Q31.91 8.01 31.39 8.21L31.39 8.21L31.39 8.21Q30.87 8.40 30.29 8.40L30.29 8.40L28.29 8.40L28.29 12.30L29.03 12.30L29.03 13.01L25.87 13.01ZM33.89 13.01L33.89 12.35L34.58 12.35L34.58 3.70L33.89 3.70L33.89 3.04L36.18 3.04L36.18 12.35L36.87 12.35L36.87 13.01L33.89 13.01ZM39.94 12.52L39.94 12.52L39.94 12.52Q40.46 12.52 41.03 11.98L41.03 11.98L41.03 11.98Q41.29 11.74 41.48 11.48L41.48 11.48L41.48 11.48Q41.67 11.22 41.77 10.94L41.77 10.94L41.77 9.41L41.77 9.41Q41.58 9.49 41.32 9.58L41.32 9.58L41.32 9.58Q41.06 9.67 40.71 9.76L40.71 9.76L40.71 9.76L40.71 9.76Q40.33 9.88 40.07 9.99L40.07 9.99L40.07 9.99Q39.81 10.10 39.65 10.23L39.65 10.23L39.65 10.22L39.65 10.22Q39.21 10.58 39.21 11.31L39.21 11.31L39.21 11.31Q39.21 11.80 39.38 12.13L39.38 12.13L39.38 12.13Q39.57 12.52 39.94 12.52ZM38.20 8.16L38.20 6.48L38.20 6.48Q39.01 6.29 39.55 6.19L39.55 6.19L39.55 6.19Q40.09 6.09 40.37 6.09L40.37 6.09L40.37 6.09Q41.92 6.09 42.57 6.57L42.57 6.57L42.57 6.57Q43.35 7.16 43.35 8.68L43.35 8.68L43.35 11.56L43.35 11.56Q43.35 12.35 43.37 12.35L43.37 12.35L44.16 12.35L44.16 13.01L42.05 13.01L42.05 13.01Q41.84 12.67 41.78 12.15L41.78 12.15L41.78 12.15Q41.62 12.34 41.42 12.51L41.42 12.51L41.42 12.51Q41.21 12.68 40.99 12.81L40.99 12.81L40.99 12.81Q40.33 13.17 39.60 13.17L39.60 13.17L39.60 13.17Q38.73 13.17 38.19 12.73L38.19 12.73L38.19 12.73Q37.62 12.24 37.62 11.36L37.62 11.36L37.62 11.36Q37.62 10.23 38.49 9.76L38.49 9.76L38.49 9.76Q38.91 9.54 40.25 9.27L40.25 9.27L40.25 9.27Q41.33 9.06 41.72 8.69L41.72 8.69L41.72 8.69Q41.73 8.62 41.75 8.53L41.75 8.53L41.75 8.53Q41.76 8.45 41.76 8.35L41.76 8.35L41.76 8.35Q41.76 6.75 40.09 6.75L40.09 6.75L40.09 6.75Q39.00 6.75 38.85 8.16L38.85 8.16L38.20 8.16ZM47.69 6.93L47.22 6.93L47.22 6.93Q47.41 7.42 47.58 7.86L47.58 7.86L47.58 7.86Q47.75 8.30 47.92 8.74L47.92 8.74L47.92 8.74Q48.09 9.17 48.27 9.62L48.27 9.62L48.27 9.62Q48.44 10.06 48.63 10.56L48.63 10.56L48.63 10.56Q48.81 10.09 48.98 9.65L48.98 9.65L48.98 9.65Q49.15 9.20 49.32 8.76L49.32 8.76L49.32 8.76Q49.49 8.31 49.66 7.86L49.66 7.86L49.66 7.86Q49.83 7.41 50.02 6.93L50.02 6.93L49.53 6.93L49.53 6.27L51.45 6.27L51.45 6.93L50.73 6.93L50.73 6.93Q49.98 8.89 49.25 10.83L49.25 10.83L49.25 10.83Q48.51 12.78 47.78 14.74L47.78 14.74L47.78 14.74Q47.20 16.25 46.07 16.25L46.07 16.25L46.07 16.25Q45.86 16.25 45.58 16.19L45.58 16.19L45.58 14.92L45.58 14.92Q46.08 15.17 46.35 15.17L46.35 15.17L46.35 15.17Q46.87 15.17 47.17 14.48L47.17 14.48L47.16 14.49L47.16 14.49Q47.33 14.02 47.49 13.59L47.49 13.59L47.49 13.59Q47.65 13.15 47.82 12.69L47.82 12.69L47.82 12.69Q47.26 11.22 46.71 9.81L46.71 9.81L46.71 9.81Q46.17 8.39 45.60 6.93L45.60 6.93L44.88 6.93L44.88 6.27L47.69 6.27L47.69 6.93ZM51.90 3.04L59.08 3.04L59.34 4.85L58.60 4.85L58.60 4.85Q58.44 3.74 57.83 3.74L57.83 3.74L56.35 3.74L56.35 12.30L57.03 12.30L57.03 13.01L53.92 13.01L53.92 12.30L54.63 12.30L54.63 3.74L53.15 3.74L53.15 3.74Q52.54 3.74 52.38 4.85L52.38 4.85L51.64 4.85L51.90 3.04ZM60.07 6.53L61.84 6.53L61.84 12.61L62.51 12.61L62.51 12.74L60.07 12.74L60.07 12.61L60.78 12.61L60.78 6.67L60.07 6.67L60.07 6.53ZM60.41 4.03L60.41 4.03L60.41 4.03Q60.41 3.84 60.48 3.68L60.48 3.68L60.48 3.68Q60.55 3.51 60.67 3.39L60.67 3.39L60.67 3.39Q60.79 3.27 60.96 3.20L60.96 3.20L60.96 3.20Q61.12 3.12 61.30 3.12L61.30 3.12L61.30 3.12Q61.49 3.12 61.65 3.20L61.65 3.20L61.65 3.20Q61.82 3.27 61.94 3.39L61.94 3.39L61.94 3.39Q62.06 3.51 62.13 3.68L62.13 3.68L62.13 3.68Q62.20 3.84 62.20 4.03L62.20 4.03L62.20 4.03Q62.20 4.21 62.13 4.38L62.13 4.38L62.13 4.38Q62.06 4.54 61.94 4.66L61.94 4.66L61.94 4.66Q61.82 4.78 61.65 4.85L61.65 4.85L61.65 4.85Q61.49 4.92 61.30 4.92L61.30 4.92L61.30 4.92Q61.12 4.92 60.96 4.85L60.96 4.85L60.96 4.85Q60.79 4.78 60.67 4.66L60.67 4.66L60.67 4.66Q60.55 4.54 60.48 4.38L60.48 4.38L60.48 4.38Q60.41 4.21 60.41 4.03ZM71.00 6.73L71.00 6.73L71.00 6.73Q70.83 6.73 70.65 6.81L70.65 6.81L70.65 6.81Q70.47 6.90 70.28 7.08L70.28 7.08L70.28 7.08Q69.91 7.43 69.90 7.81L69.90 7.81L69.90 7.81Q69.90 8.98 69.90 10.08L69.90 10.08L69.90 10.08Q69.90 11.18 69.90 12.35L69.90 12.35L70.59 12.35L70.59 13.01L67.63 13.01L67.63 12.35L68.31 12.35L68.31 8.67L68.31 8.67Q68.31 6.73 67.27 6.73L67.27 6.73L67.27 6.73Q66.99 6.73 66.60 7.05L66.60 7.05L66.60 7.05Q66.19 7.40 66.19 7.64L66.19 7.64L66.19 12.35L66.88 12.35L66.88 13.01L63.91 13.01L63.91 12.35L64.60 12.35L64.60 6.93L63.91 6.93L63.91 6.27L66.19 6.27L66.19 6.54L66.19 6.54Q66.47 6.33 66.80 6.22L66.80 6.22L66.80 6.22Q67.13 6.10 67.50 6.10L67.50 6.10L67.50 6.10Q68.15 6.10 68.66 6.32L68.66 6.32L68.66 6.32Q69.18 6.54 69.54 6.92L69.54 6.92L69.54 6.92Q70.11 6.10 71.24 6.10L71.24 6.10L71.24 6.10Q73.62 6.10 73.62 9.00L73.62 9.00L73.62 12.35L74.31 12.35L74.31 13.01L71.35 13.01L71.35 12.35L72.03 12.35L72.03 8.67L72.03 8.67Q72.03 6.73 71.00 6.73ZM76.94 8.84L79.87 8.84L79.87 8.84Q79.82 7.82 79.44 7.30L79.44 7.30L79.44 7.30Q79.07 6.79 78.39 6.79L78.39 6.79L78.39 6.79Q77.62 6.79 77.25 7.49L77.25 7.49L77.25 7.49Q77.10 7.75 77.03 8.08L77.03 8.08L77.03 8.08Q76.95 8.42 76.94 8.84L76.94 8.84ZM81.48 9.50L76.92 9.50L76.92 9.50Q76.91 9.65 76.91 9.73L76.91 9.73L76.91 9.73Q76.92 9.82 76.92 9.86L76.92 9.86L76.92 9.86Q76.92 12.43 78.77 12.43L78.77 12.43L78.77 12.43Q79.42 12.43 79.99 12.09L79.99 12.09L79.99 12.09Q80.25 11.92 80.48 11.65L80.48 11.65L80.48 11.65Q80.71 11.38 80.86 11.03L80.86 11.03L81.45 11.39L81.45 11.39Q81.27 11.85 80.95 12.20L80.95 12.20L80.95 12.20Q80.64 12.54 80.21 12.78L80.21 12.78L80.21 12.78Q79.84 12.97 79.41 13.07L79.41 13.07L79.41 13.07Q78.98 13.17 78.51 13.17L78.51 13.17L78.51 13.17Q77.71 13.17 77.10 12.89L77.10 12.89L77.10 12.89Q76.49 12.61 76.08 12.07L76.08 12.07L76.08 12.07Q75.72 11.59 75.53 10.93L75.53 10.93L75.53 10.93Q75.35 10.27 75.35 9.47L75.35 9.47L75.35 9.47Q75.35 7.98 76.09 7.07L76.09 7.07L76.09 7.07Q76.90 6.10 78.39 6.10L78.39 6.10L78.39 6.10Q79.13 6.10 79.68 6.33L79.68 6.33L79.68 6.33Q80.24 6.57 80.65 7.04L80.65 7.04L80.65 7.04Q81.40 7.91 81.48 9.50L81.48 9.50Z"
              transform="matrix(4.542013612924749,0,0,4.542013612924749,-0.18168329815057405,-13.807721686864326)"/>
    </g>
</svg>
</file>

<file path=".github/test-server/Dockerfile.test">
FROM openjdk:17-slim

WORKDIR /data

# Install necessary tools
RUN apt-get update && \
    apt-get install -y curl jq wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set up environment variables
ENV MINECRAFT_VERSION=1.20.4
ENV PAPER_BUILD=395
ENV SERVER_PORT=25565
ENV MEMORY=1G

# Download Paper server
RUN wget https://api.papermc.io/v2/projects/paper/versions/${MINECRAFT_VERSION}/builds/${PAPER_BUILD}/downloads/paper-${MINECRAFT_VERSION}-${PAPER_BUILD}.jar -O paper.jar

# Create directories
RUN mkdir -p /data/plugins /data/logs

# Accept EULA
RUN echo "eula=true" > eula.txt

# Copy server properties
COPY server.properties /data/server.properties

# Copy plugin for testing
COPY *.jar /data/plugins/

# Create startup script
RUN echo '#!/bin/bash\n\
java -Xms${MEMORY} -Xmx${MEMORY} -jar paper.jar nogui\n\
' > /data/start.sh && chmod +x /data/start.sh

EXPOSE ${SERVER_PORT}

# Create test script
COPY test.sh /data/test.sh
RUN chmod +x /data/test.sh

# Set the entrypoint to the test script
ENTRYPOINT ["/data/test.sh"]
</file>

<file path=".github/test-server/download-plugin.sh">
#!/bin/bash

# GitHub repository details
REPO_OWNER="thedutchruben"
REPO_NAME="tdrplaytime"

# GitHub API URL for the latest release (including pre-releases)
API_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases?per_page=1"

# Get the latest release data (including pre-releases)
release_data=$(curl -s $API_URL)
assets_data=$(curl -s $(echo $release_data | jq -r '.[0].assets_url'))

# Extract the download URL for the JAR file
jar_url=$(echo $assets_data | jq -r '.[0].browser_download_url')

# Check if the URL was found
if [ -z "$jar_url" ]; then
  echo "No JAR file found in the latest release or pre-release."
  exit 1
fi

mkdir -p plugins

# Download the JAR file
echo "Downloading JAR file from $jar_url"
curl -L -o ./plugins/latest-release.jar "$jar_url"

# Check if download was successful
if [ $? -eq 0 ]; then
  echo "Download successful: latest-release.jar"
else
  echo "Download failed."
  exit 1
fi
</file>

<file path=".github/test-server/server.properties">
# Minecraft server properties
spawn-protection=0
max-tick-time=60000
query.port=25565
generator-settings={}
sync-chunk-writes=true
force-gamemode=false
allow-nether=true
enforce-whitelist=false
gamemode=survival
broadcast-console-to-ops=true
enable-query=false
player-idle-timeout=0
text-filtering-config=
difficulty=easy
spawn-monsters=true
broadcast-rcon-to-ops=true
op-permission-level=4
pvp=true
entity-broadcast-range-percentage=100
snooper-enabled=true
level-type=minecraft\:normal
hardcore=false
enable-status=true
enable-command-block=false
max-players=20
network-compression-threshold=256
resource-pack-sha1=
max-world-size=29999984
function-permission-level=2
rcon.port=25575
server-port=25565
server-ip=
spawn-npcs=true
allow-flight=false
level-name=world
view-distance=10
resource-pack=
spawn-animals=true
white-list=false
rcon.password=
generate-structures=true
max-build-height=256
online-mode=false
level-seed=
use-native-transport=true
prevent-proxy-connections=false
enable-jmx-monitoring=false
enable-rcon=false
rate-limit=0
motd=Test Server
</file>

<file path=".github/test-server/test.sh">
#!/bin/bash
set -e

# Start Minecraft server in the background
echo "Starting Minecraft server..."
java -Xms${MEMORY} -Xmx${MEMORY} -jar paper.jar nogui &
SERVER_PID=$!

# Function to check logs for a specific message
check_logs() {
    local pattern=$1
    local timeout=$2
    local start_time=$(date +%s)
    local current_time

    echo "Waiting for pattern: $pattern"

    while true; do
        if grep -q "$pattern" logs/latest.log 2>/dev/null; then
            echo "Found pattern: $pattern"
            return 0
        fi

        current_time=$(date +%s)
        if [ $((current_time - start_time)) -gt "$timeout" ]; then
            echo "Timed out waiting for pattern: $pattern"
            return 1
        fi

        sleep 1
    done
}

# Wait for server to start
if ! check_logs "Done" 120; then
    echo "Server failed to start"
    kill $SERVER_PID
    exit 1
fi

# Check if our plugin loaded
if ! check_logs "TDRPlaytime" 10; then
    echo "Plugin failed to load"
    kill $SERVER_PID
    exit 1
fi

echo "Plugin loaded successfully"

# Run additional tests here
# For example, you can use RCON to execute commands and verify plugin behavior

# For this example, we'll consider the test successful if the plugin loads
echo "Tests completed successfully"

# Clean shutdown
kill $SERVER_PID
wait $SERVER_PID || true

exit 0
</file>

<file path=".github/workflows/release-checks.yml">
name: Release Quality Checks

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, labeled]

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'release')

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Check code style
        run: mvn checkstyle:check

      - name: Run unit tests
        run: mvn test

      - name: Check code coverage
        run: |
          mvn jacoco:report
          
          # Extract coverage percentage
          COVERAGE=$(awk -F, 'NR==2 {print $5}' target/site/jacoco/jacoco.csv)
          echo "Code coverage: $COVERAGE%"
          
          # Fail if coverage is below threshold
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            echo "Code coverage is below 50%"
            exit 1
          fi

      - name: Run SpotBugs
        run: mvn spotbugs:check

      - name: Build final artifact
        run: mvn package

      - name: Upload final artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate
          path: target/TDRPlaytime-*.jar

      - name: Add comment with testing results
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All quality checks passed! This PR is ready for review and release.'
            })

      - name: Add comment with testing failures
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Quality checks failed! Please fix the issues before this PR can be merged.'
            })
</file>

<file path=".github/workflows/run-tests.yml">
name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Run Tests with Maven
        run: mvn test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/

  minecraft-server-test:
    name: Test Plugin on Minecraft Server
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build Plugin
        run: mvn package

      - name: Setup Test Server
        run: |
          mkdir -p test-server/plugins
          cp target/TDRPlaytime-*.jar test-server/plugins/

      - name: Run Test Server
        run: |
          cd test-server
          wget https://api.papermc.io/v2/projects/paper/versions/1.20.4/builds/395/downloads/paper-1.20.4-395.jar -O paper.jar
          echo "eula=true" > eula.txt
          java -jar paper.jar --nogui --max-players=10 --port=25565 &
          SERVER_PID=$!
          
          # Wait for server to start
          echo "Waiting for server to start..."
          sleep 30
          
          # Run tests using RCON or alternative method
          # For demonstration, we'll just check if the server started with our plugin
          if grep -q "TDRPlaytime" logs/latest.log; then
            echo "Plugin loaded successfully"
            kill $SERVER_PID
            exit 0
          else
            echo "Plugin failed to load"
            kill $SERVER_PID
            exit 1
          fi
</file>

<file path=".github/workflows/server-tests.yml">
name: Minecraft Server Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  server-test:
    name: Test on Minecraft Server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        minecraft-version: ['1.19.4', '1.20.4']
        server-type: ['paper']
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build Plugin
        run: mvn package

      - name: Set up test server environment
        run: |
          mkdir -p .github/test-server/plugins
          cp target/TDRPlaytime-*.jar .github/test-server/plugins/

      - name: Build and run test container
        working-directory: .github/test-server
        run: |
          # Get latest Paper build for the current Minecraft version
          if [ "${{ matrix.minecraft-version }}" = "1.19.4" ]; then
            PAPER_BUILD=550
          elif [ "${{ matrix.minecraft-version }}" = "1.20.4" ]; then
            PAPER_BUILD=395
          else
            echo "Unsupported Minecraft version"
            exit 1
          fi
          
          # Update Dockerfile environment variables
          sed -i "s/MINECRAFT_VERSION=.*/MINECRAFT_VERSION=${{ matrix.minecraft-version }}/" Dockerfile.test
          sed -i "s/PAPER_BUILD=.*/PAPER_BUILD=$PAPER_BUILD/" Dockerfile.test
          
          # Build and run the container
          docker build -t playtime-test -f Dockerfile.test .
          docker run --name playtime-test-container playtime-test
          
          # Copy logs from container
          docker cp playtime-test-container:/data/logs ./logs
          
          # Check if test was successful
          if [ $? -ne 0 ]; then
            echo "Server test failed"
            exit 1
          fi

      - name: Upload server logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs-${{ matrix.minecraft-version }}-${{ matrix.server-type }}
          path: .github/test-server/logs/
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneCreateEvent.java">
package nl.thedutchruben.playtime.core.events.milestone;

import nl.thedutchruben.playtime.core.objects.Milestone;

/**
 * Event that is called when a milestone is created
 */
public class MilestoneCreateEvent extends MilestoneEvent {

    /**
     * Create a new MilestoneCreateEvent
     * @param milestone The milestone that is created
     */
    public MilestoneCreateEvent(Milestone milestone) {
        super(milestone);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneDeleteEvent.java">
package nl.thedutchruben.playtime.core.events.milestone;

import nl.thedutchruben.playtime.core.objects.Milestone;

/**
 * Event that is called when a milestone is deleted
 */
public class MilestoneDeleteEvent extends MilestoneEvent {

    /**
     * Create a new MilestoneDeleteEvent
     * @param milestone The milestone that is deleted
     */
    public MilestoneDeleteEvent(Milestone milestone) {
        super(milestone);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneReceiveEvent.java">
package nl.thedutchruben.playtime.core.events.milestone;

import nl.thedutchruben.playtime.core.objects.Milestone;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;

/**
 * Event that is called when a milestone is received
 */
public class MilestoneReceiveEvent extends MilestoneEvent {
    private final PlaytimeUser playtimeUser;

    /**
     * Create a new MilestoneReceiveEvent
     * @param milestone The milestone that is received
     * @param playtimeUser The user that received the milestone
     */
    public MilestoneReceiveEvent(Milestone milestone, PlaytimeUser playtimeUser) {
        super(milestone);

        this.playtimeUser = playtimeUser;
    }

    /**
     * Get the user that received the milestone
     * @see PlaytimeUser
     * @return The user that received the milestone
     */
    public PlaytimeUser getPlaytimeUser() {
        return playtimeUser;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/milestone/MilestoneUpdateEvent.java">
package nl.thedutchruben.playtime.core.events.milestone;

import nl.thedutchruben.playtime.core.objects.Milestone;

/**
 * Event that is called when a milestone is updated
 */
public class MilestoneUpdateEvent extends MilestoneEvent {

    /**
     * Create a new MilestoneUpdateEvent
     * @param milestone The milestone that is updated
     */
    public MilestoneUpdateEvent(Milestone milestone) {
        super(milestone);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/player/PlaytimePlayerLoadedEvent.java">
package nl.thedutchruben.playtime.core.events.player;

import nl.thedutchruben.playtime.core.objects.PlaytimeUser;

/**
 * Event that is called when a player is loaded
 */
public class PlaytimePlayerLoadedEvent extends PlaytimePlayerEvent {

    /**
     * Create a new PlaytimePlayerLoadedEvent
     * @param user The user that is loaded
     * @param async If the event is async
     */
    public PlaytimePlayerLoadedEvent(PlaytimeUser user, boolean async) {
        super(user, async);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneDeleteEvent.java">
package nl.thedutchruben.playtime.core.events.repeatingmilestone;

import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;

/**
 * Event that is called when a RepeatingMilestone is deleted
 */
public class RepeatingMilestoneDeleteEvent extends RepeatingMilestoneEvent {

    /**
     * Create a new RepeatingMilestoneDeleteEvent
     *
     * @param repeatingMilestone The RepeatingMilestone that is deleted
     */
    public RepeatingMilestoneDeleteEvent(RepeatingMilestone repeatingMilestone) {
        super(repeatingMilestone);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneEvent.java">
package nl.thedutchruben.playtime.core.events.repeatingmilestone;

import lombok.Getter;
import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;
import org.bukkit.event.Event;
import org.bukkit.event.HandlerList;

/**
 * Base for the repeatingMilestone events
 */
public abstract class RepeatingMilestoneEvent extends Event {
    private static final HandlerList handlers = new HandlerList();
    @Getter
    private RepeatingMilestone repeatingMilestone;

    /**
     * Create a new RepeatingMilestoneEvent
     *
     * @param repeatingMilestone The RepeatingMilestone
     */
    public RepeatingMilestoneEvent(RepeatingMilestone repeatingMilestone) {
        this.repeatingMilestone = repeatingMilestone;
    }

    public static HandlerList getHandlerList() {
        return handlers;
    }

    @Override
    public HandlerList getHandlers() {
        return handlers;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneReceiveEvent.java">
package nl.thedutchruben.playtime.core.events.repeatingmilestone;

import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;

/**
 * Event that is called when a RepeatingMilestone is received
 */
public class RepeatingMilestoneReceiveEvent extends RepeatingMilestoneEvent {

    private final PlaytimeUser playtimeUser;

    /**
     * Create a new RepeatingMilestoneReceiveEvent
     * @param repeatingMilestone The RepeatingMilestone that is received
     * @param playtimeUser The user that received the RepeatingMilestone
     */
    public RepeatingMilestoneReceiveEvent(RepeatingMilestone repeatingMilestone, PlaytimeUser playtimeUser) {
        super(repeatingMilestone);

        this.playtimeUser = playtimeUser;
    }

    public PlaytimeUser getPlaytimeUser() {
        return playtimeUser;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/events/repeatingmilestone/RepeatingMilestoneUpdateEvent.java">
package nl.thedutchruben.playtime.core.events.repeatingmilestone;

import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;

/**
 * Event that is called when a RepeatingMilestone is updated
 */
public class RepeatingMilestoneUpdateEvent extends RepeatingMilestoneEvent {

    /**
     * Create a new RepeatingMilestoneUpdateEvent
     * @param repeatingMilestone The RepeatingMilestone that is updated
     */
    public RepeatingMilestoneUpdateEvent(RepeatingMilestone repeatingMilestone) {
        super(repeatingMilestone);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/objects/MilestoneTest.java">
package nl.thedutchruben.playtime.core.objects;

import org.bukkit.entity.Player;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.bukkit.Bukkit;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import nl.thedutchruben.playtime.Playtime;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class MilestoneTest {

    private Milestone milestone;

    @Mock
    private Player mockPlayer;

    @Mock
    private PlayerInventory mockInventory;

    @Mock
    private Playtime mockPlaytime;

    @BeforeEach
    void setUp() {
        milestone = new Milestone();
        milestone.setMilestoneName("TestMilestone");
        milestone.setOnlineTime(3600); // 1 hour in seconds

        // Setup mock player
        when(mockPlayer.getInventory()).thenReturn(mockInventory);
        when(mockPlayer.getName()).thenReturn("TestPlayer");
        when(mockPlayer.getUniqueId()).thenReturn(UUID.randomUUID());
    }

    @Test
    void testGetOnlineTimeInMilliseconds() {
        assertEquals(3600 * 1000, milestone.getOnlineTimeInMilliseconds());
    }

    @Test
    void testAddCommand() {
        milestone.addCommand("give %playername% diamond 1");
        assertEquals(1, milestone.getCommands().size());
        assertEquals("give %playername% diamond 1", milestone.getCommands().get(0));
    }

    @Test
    void testAddMessage() {
        milestone.addMessage("Congratulations on reaching the milestone!");
        assertEquals(1, milestone.getMessages().size());
        assertEquals("Congratulations on reaching the milestone!", milestone.getMessages().get(0));
    }

    @Test
    void testRemoveCommand() {
        String command = "give %playername% diamond 1";
        milestone.addCommand(command);
        assertEquals(1, milestone.getCommands().size());

        milestone.removeCommand(command);
        assertEquals(0, milestone.getCommands().size());
    }

    @Test
    void testRemoveMessage() {
        String message = "Congratulations on reaching the milestone!";
        milestone.addMessage(message);
        assertEquals(1, milestone.getMessages().size());

        milestone.removeMessage(message);
        assertEquals(0, milestone.getMessages().size());
    }

    @Test
    void testFireworkSettings() {
        assertFalse(milestone.isFireworkShow());

        milestone.setFireworkShow(true);
        assertTrue(milestone.isFireworkShow());

        milestone.setFireworkShowAmount(5);
        assertEquals(5, milestone.getFireworkShowAmount());

        milestone.setFireworkShowSecondsBetween(2);
        assertEquals(2, milestone.getFireworkShowSecondsBetween());
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/objects/PlaytimeUser.java">
package nl.thedutchruben.playtime.core.objects;

import com.google.gson.annotations.SerializedName;
import lombok.Getter;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.events.player.AsyncPlaytimePlayerUpdatePlaytimeEvent;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

@Getter
public class PlaytimeUser {

    @SerializedName("_id")
    public String uuid;
    public String name;
    public float time;
    private transient long lastChecked;

    /**
     * Constructs a PlaytimeUser with the specified UUID, name, and playtime.
     *
     * @param uuid The UUID of the user.
     * @param name The name of the user.
     * @param time The initial playtime of the user in milliseconds.
     */
    public PlaytimeUser(String uuid, String name, long time) {
        this.uuid = uuid;
        this.name = name;
        this.time = time;
        this.lastChecked = System.currentTimeMillis();
    }

    /**
     * Constructs a PlaytimeUser with the specified UUID and name.
     * The initial playtime is set to 0.
     *
     * @param uuid The UUID of the user.
     * @param name The name of the user.
     */
    public PlaytimeUser(String uuid, String name) {
        this(uuid, name, 0);
    }

    /**
     * Loads a PlaytimeUser asynchronously based on the specified UUID.
     *
     * @param uuid The UUID of the user to load.
     * @return A CompletableFuture that completes with the loaded PlaytimeUser.
     */
    public static CompletableFuture<PlaytimeUser> loadUser(UUID uuid) {
        return Playtime.getInstance().getStorage().loadUser(uuid);
    }

    /**
     * Updates the playtime of the user based on the time elapsed since the last check.
     * Fires an AsyncPlaytimePlayerUpdatePlaytimeEvent asynchronously.
     */
    public void updatePlaytime() {
        float oldTime = time;
        time = time + (System.currentTimeMillis() - lastChecked);
        Bukkit.getScheduler().runTaskAsynchronously(Playtime.getPlugin(),
                () -> Bukkit.getPluginManager().callEvent(new AsyncPlaytimePlayerUpdatePlaytimeEvent(this, true, oldTime, time)));
        lastChecked = System.currentTimeMillis();
    }

    /**
     * Returns the UUID of the user.
     *
     * @return The UUID of the user.
     */
    public UUID getUUID() {
        return UUID.fromString(this.uuid);
    }

    /**
     * Adds the specified amount of playtime to the user's total playtime.
     *
     * @param time     The amount of time to add.
     * @param timeUnit The unit of time.
     */
    public void addPlaytime(long time, TimeUnit timeUnit) {
        this.time = this.time + timeUnit.toMillis(time);
        lastChecked = System.currentTimeMillis();
    }

    /**
     * Saves the user's playtime data asynchronously.
     *
     * @return A CompletableFuture that completes when the save operation is done.
     */
    public CompletableFuture<Boolean> save() {
        return Playtime.getInstance().getStorage().saveUser(this);
    }

    /**
     * Removes the specified amount of playtime from the user's total playtime.
     *
     * @param time     The amount of time to remove.
     * @param timeUnit The unit of time.
     */
    public void removePlaytime(long time, TimeUnit timeUnit) {
        this.time = this.time - timeUnit.toMillis(time);
        lastChecked = System.currentTimeMillis();
    }

    /**
     * Sets the user's total playtime to the specified value.
     *
     * @param time The new total playtime in milliseconds.
     */
    public void setPlaytime(float time) {
        this.time = time;
    }

    /**
     * Returns the Bukkit Player object associated with the user.
     *
     * @return The Bukkit Player object.
     */
    public Player getBukkitPlayer() {
        return Bukkit.getPlayer(getUUID());
    }

    /**
     * Translates the user's total playtime into an array of days, hours, minutes, and seconds.
     *
     * @return An array containing the days, hours, minutes, and seconds of playtime.
     */
    public int[] translateTime() {
        float tempTime = this.time;
        tempTime = tempTime / 1000;
        int days = (int) (tempTime / 86400);
        tempTime = tempTime - days * 86400L;
        int hours = (int) (tempTime / 3600);
        tempTime = tempTime - hours * 3600L;
        int minutes = (int) (tempTime / 60);
        tempTime = tempTime - minutes * 60L;
        int seconds = (int) tempTime;
        return new int[]{days, hours, minutes, seconds};
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/objects/PlaytimeUserTest.java">
package nl.thedutchruben.playtime.core.objects;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

import java.util.UUID;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class PlaytimeUserTest {

    private PlaytimeUser playtimeUser;
    private final UUID testUuid = UUID.randomUUID();
    private final String testName = "TestPlayer";

    @BeforeEach
    void setUp() {
        playtimeUser = new PlaytimeUser(testUuid.toString(), testName, 0);
    }

    @Test
    void testGetUUID() {
        assertEquals(testUuid, playtimeUser.getUUID());
    }

    @Test
    void testGetName() {
        assertEquals(testName, playtimeUser.getName());
    }

    @Test
    void testAddPlaytime() {
        // Test adding 1 hour
        playtimeUser.addPlaytime(1, TimeUnit.HOURS);
        assertEquals(TimeUnit.HOURS.toMillis(1), playtimeUser.getTime());

        // Test adding 30 minutes
        playtimeUser.addPlaytime(30, TimeUnit.MINUTES);
        assertEquals(TimeUnit.HOURS.toMillis(1) + TimeUnit.MINUTES.toMillis(30), playtimeUser.getTime());
    }

    @Test
    void testRemovePlaytime() {
        // Add 2 hours first
        playtimeUser.addPlaytime(2, TimeUnit.HOURS);

        // Remove 30 minutes
        playtimeUser.removePlaytime(30, TimeUnit.MINUTES);

        assertEquals(TimeUnit.HOURS.toMillis(2) - TimeUnit.MINUTES.toMillis(30), playtimeUser.getTime());
    }

    @Test
    void testSetPlaytime() {
        playtimeUser.setPlaytime(10000);
        assertEquals(10000, playtimeUser.getTime());
    }

    @Test
    void testTranslateTime() {
        // Set playtime to 1 day, 2 hours, 30 minutes, and 15 seconds
        long playtime =
                TimeUnit.DAYS.toMillis(1) +
                        TimeUnit.HOURS.toMillis(2) +
                        TimeUnit.MINUTES.toMillis(30) +
                        TimeUnit.SECONDS.toMillis(15);

        playtimeUser.setPlaytime(playtime);

        int[] time = playtimeUser.translateTime();

        assertEquals(1, time[0], "Days should be 1");
        assertEquals(2, time[1], "Hours should be 2");
        assertEquals(30, time[2], "Minutes should be 30");
        assertEquals(15, time[3], "Seconds should be 15");
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/Settings.java">
package nl.thedutchruben.playtime.core;

import lombok.Getter;
import nl.thedutchruben.playtime.Playtime;
import org.bukkit.configuration.file.YamlConfiguration;

@Getter
public enum Settings {

    UPDATE_CHECK("settings.update-check", true, 1.0, ConfigFiles.CONFIG),
    CACHE_TIME("settings.cache-time", 5, 1.0, ConfigFiles.CONFIG),
    AFK_COUNT_TIME("settings.afk.countAfkTime", true, 1.0, ConfigFiles.CONFIG),
    AFK_USE_ESSENTIALS_API("settings.afk.useEssentialsApi", false, 1.0, ConfigFiles.CONFIG),
    AFK_EVENTS_CHAT("settings.afk.events.chatResetAfkTime", true, 1.0, ConfigFiles.CONFIG),
    TOP_10_PLACEHOLDER_CACHE_TIME("settings.top_10_placeholder_cache_time", 600, 1.0, ConfigFiles.CONFIG),
    STORAGE_TYPE("type", "sqllite", 1.0, ConfigFiles.STORAGE),

    STORAGE_MYSQL_HOST("mysql.hostname", "localhost", 1.0, ConfigFiles.STORAGE),
    STORAGE_MYSQL_PORT("mysql.port", 3306, 1.0, ConfigFiles.STORAGE),
    STORAGE_MYSQL_USERNAME("mysql.username", "username", 1.0, ConfigFiles.STORAGE),
    STORAGE_MYSQL_PASSWORD("mysql.password", "password", 1.0, ConfigFiles.STORAGE),
    STORAGE_MYSQL_SSL("mysql.ssl", true, 1.0, ConfigFiles.STORAGE),
    STORAGE_MYSQL_SCHEMA("mysql.schema", "playtime", 1.0, ConfigFiles.STORAGE),
    STORAGE_MYSQL_PREFIX("mysql.prefix", "", 1.0, ConfigFiles.STORAGE),
    STORAGE_MYSQL_POOL("mysql.pool", 20, 1.0, ConfigFiles.STORAGE),
    STORAGE_MYSQL_DRIVER("mysql.driver", "jdbc:mysql://", 1.0, ConfigFiles.STORAGE),

    STORAGE_MONGO_HOST("mongo.hostname", "localhost", 1.0, ConfigFiles.STORAGE),
    STORAGE_MONGO_PORT("mongo.port", 27017, 1.0, ConfigFiles.STORAGE),
    STORAGE_MONGO_USERNAME("mongo.username", "username", 1.0, ConfigFiles.STORAGE),
    STORAGE_MONGO_PASSWORD("mongo.password", "password", 1.0, ConfigFiles.STORAGE),
    STORAGE_MONGO_COLLECTION("mongo.collection", "playtime", 1.0, ConfigFiles.STORAGE);

    private final String path;
    private final Object defaultValue;
    private final String fileName;
    private final double version;

    Settings(String path, Object defaultValue, double version, ConfigFiles configFile) {
        this.path = path;
        this.defaultValue = defaultValue;
        this.fileName = configFile.getFileName();
        this.version = version;
    }

    /**
     * Set up the default config
     */
    public static void setupDefaults() {
        for (Settings value : Settings.values()) {
            YamlConfiguration yamlConfiguration = Playtime.getInstance().getFileManager().getConfig(value.getFileName()).get();
            if (yamlConfiguration.get(value.getPath()) == null) {
                yamlConfiguration.set(value.getPath(), value.getDefaultValue());
                Playtime.getInstance().getFileManager().getConfig(value.getFileName()).save();
            }
        }
    }

    /**
     * Get the config
     *
     * @param fileName the file name
     * @return the config
     */
    public YamlConfiguration getConfig(String fileName) {
        return Playtime.getInstance().getFileManager().getConfig(fileName).get();
    }

    public Object getValue() {
        return getConfig(this.fileName).get(path, defaultValue);
    }

    public String getValueAsString() {
        return getConfig(this.fileName).getString(path, (String) defaultValue);
    }

    public Boolean getValueAsBoolean() {
        return getConfig(this.fileName).getBoolean(path, (Boolean) defaultValue);
    }

    public Integer getValueAsInteger() {
        return getConfig(this.fileName).getInt(path, (Integer) defaultValue);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/storage/exceptions/StorageTypeNotFoundException.java">
package nl.thedutchruben.playtime.core.storage.exceptions;

/**
 * Thrown when a storage type is not found
 */
public class StorageTypeNotFoundException extends RuntimeException {

    /**
     * Create a new StorageTypeNotFoundException
     * @param message The message to display
     */
    public StorageTypeNotFoundException(String message) {
        super(message);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/storage/types/Yaml.java">
package nl.thedutchruben.playtime.core.storage.types;

import com.google.gson.Gson;
import nl.thedutchruben.mccore.utils.GsonUtil;
import nl.thedutchruben.mccore.utils.config.FileManager;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.objects.Milestone;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;
import nl.thedutchruben.playtime.core.storage.Storage;
import org.bukkit.Bukkit;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.CompletableFuture;

public class Yaml extends Storage {
    private final Gson gson;

    public Yaml() {
        this.gson = GsonUtil.createGson();
    }

    /**
     * Get the name of the storage type
     *
     * @return The name of the storage type
     */
    @Override
    public String getName() {
        return "Yaml";
    }

    /**
     * Set up the storage such as the database connection
     */
    @Override
    public boolean setup() {

        return true;
    }

    /**
     * Stops the storage such things as the database connection
     */
    @Override
    public void stop() {

    }

    /**
     * Load the user from the storage
     *
     * @param uuid The uuid of the player
     * @return The playtime user
     */
    @Override
    public CompletableFuture<PlaytimeUser> loadUser(UUID uuid) {
        return CompletableFuture.supplyAsync(() -> {
            long playtime = Playtime.getInstance().getFileManager().getConfig("players/" + uuid + ".yaml").get().getLong("onlinetime", 0);
            return new PlaytimeUser(uuid.toString(), Objects.requireNonNull(Bukkit.getPlayer(uuid)).getName(), playtime);
        });
    }

    /**
     * Load user loaded by name
     *
     * @param name
     * @return
     */
    @Override
    public CompletableFuture<PlaytimeUser> loadUserByName(String name) {
        return CompletableFuture.supplyAsync(() -> {
            Player player = Bukkit.getPlayer(name);
            if (player != null) {
                long playtime = Playtime.getInstance().getFileManager().getConfig("players/" + player.getUniqueId() + ".yaml").get().getLong("onlinetime", 0);
                return new PlaytimeUser(player.getUniqueId().toString(), player.getName(), playtime);
            }
            return null;
        });
    }

    /**
     * Save the user to the storage
     *
     * @param playtimeUser The playtime user
     * @return If the user is saved
     */
    @Override
    public CompletableFuture<Boolean> saveUser(PlaytimeUser playtimeUser) {
        return CompletableFuture.supplyAsync(() -> {
            FileManager.Config config = Playtime.getInstance().getFileManager().getConfig("players/" + playtimeUser.getUUID().toString() + ".yaml");
            config.set("onlinetime", playtimeUser.getTime());
            config.save();
            return true;
        });
    }

    /**
     * Create the user
     *
     * @param playtimeUser
     * @return
     */
    @Override
    public CompletableFuture<Boolean> createUser(PlaytimeUser playtimeUser) {
        return CompletableFuture.supplyAsync(() -> {
            FileManager.Config config = Playtime.getInstance().getFileManager().getConfig("players/" + playtimeUser.getUUID().toString() + ".yaml");
            config.set("onlinetime", playtimeUser.getTime());
            config.save();
            return true;
        });
    }

    /**
     * Get the top users
     *
     * @param amount The amount of users
     * @param skip   The amount of users to skip
     * @return The list of users
     */
    @Override
    public CompletableFuture<List<PlaytimeUser>> getTopUsers(int amount, int skip) {
        return CompletableFuture.supplyAsync(() -> {
            List<PlaytimeUser> data = getTopUsersData().join();
            if (data.size() < amount + skip) {
                return data;
            }

            return data.subList(skip, amount + skip);
        });
    }

    public CompletableFuture<List<PlaytimeUser>> getTopUsersData() {
        return CompletableFuture.supplyAsync(() -> {
            List<PlaytimeUser> playtimeUsers = new ArrayList<>();
            File folder = new File(Playtime.getPlugin().getDataFolder(), "players");
            File[] files = folder.listFiles();
            if (files != null) {
                for (File file : files) {
                    YamlConfiguration yamlConfiguration = YamlConfiguration.loadConfiguration(file);
                    String uuid = file.getName().replace(".yaml", "");
                    long time = yamlConfiguration.getLong("onlinetime", 0);
                    playtimeUsers.add(new PlaytimeUser(uuid, Bukkit.getOfflinePlayer(UUID.fromString(uuid)).getName(), time));
                }
            }
            playtimeUsers.sort((o1, o2) -> {
                if (o1.getTime() > o2.getTime()) {
                    return -1;
                } else if (o1.getTime() < o2.getTime()) {
                    return 1;
                }
                return 0;
            });
            return playtimeUsers;
        });
    }

    /**
     * Get the top user
     *
     * @param place The place of the user
     * @return The user
     */
    @Override
    public CompletableFuture<PlaytimeUser> getTopUser(int place) {
        return CompletableFuture.supplyAsync(() -> {
            List<PlaytimeUser> data = getTopUsersData().join();
            if (data.size() < place) {
                return null;
            }
            return data.get(place - 1);
        });
    }

    /**
     * Get the milestones
     *
     * @return The list of milestones
     */
    @Override
    public CompletableFuture<List<Milestone>> getMilestones() {
        return CompletableFuture.supplyAsync(() -> {
            List<Milestone> milestones = new ArrayList<>();
            File[] files = new File(Playtime.getPlugin().getDataFolder(), "milestones/").listFiles();

            if (files == null) {
                return milestones;
            }

            for (final File fileEntry : files) {
                YamlConfiguration config = Playtime.getInstance().getFileManager()
                        .getConfig("milestones/" + fileEntry.getName()).get();
                if (config != null) {
                    milestones.add(this.gson.fromJson(config.getString("data"), Milestone.class));
                }
            }
            return milestones;
        });
    }

    /**
     * Save the milestone
     *
     * @param milestone The milestone to save
     * @return If the milestone is saved
     */
    @Override
    public CompletableFuture<Boolean> saveMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            Playtime.getInstance().getFileManager().getConfig("milestones/" + milestone.getMilestoneName() + ".yaml")
                    .get().set("data", this.gson.toJson(milestone, Milestone.class));
            Playtime.getInstance().getFileManager().getConfig("milestones/" + milestone.getMilestoneName() + ".yaml")
                    .save();
            return true;
        });

    }

    /**
     * Delete the milestone
     *
     * @param milestone The milestone to delete
     * @return If the milestone is deleted
     */
    @Override
    public CompletableFuture<Boolean> deleteMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            Playtime.getInstance().getFileManager()
                    .getConfig("milestones/" + milestone.getMilestoneName() + ".yaml").file.delete();
            return true;
        });
    }

    /**
     * Update the milestone
     *
     * @param milestone The milestone to update
     * @return If the milestone is updated
     */
    @Override
    public CompletableFuture<Boolean> updateMilestone(Milestone milestone) {
        return saveMilestone(milestone);
    }

    /**
     * Get the repeating milestones
     *
     * @return The list of repeating milestones
     */
    @Override
    public CompletableFuture<List<RepeatingMilestone>> getRepeatingMilestones() {
        return CompletableFuture.supplyAsync(() -> {
            List<RepeatingMilestone> milestones = new ArrayList<>();
            File[] files = new File(Playtime.getPlugin().getDataFolder(), "repeatingmilestones/").listFiles();

            if (files == null) {
                return milestones;
            }

            for (final File fileEntry : files) {
                YamlConfiguration config = Playtime.getInstance().getFileManager()
                        .getConfig("repeatingmilestones/" + fileEntry.getName()).get();
                if (config != null) {
                    milestones.add(this.gson.fromJson(config.getString("data"), RepeatingMilestone.class));
                }
            }
            return milestones;
        });
    }

    /**
     * Save the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to save
     * @return If the repeating milestone is saved
     */
    @Override
    public CompletableFuture<Boolean> saveRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            Playtime.getInstance().getFileManager()
                    .getConfig("repeatingmilestones/" + repeatingMilestone.getMilestoneName() + ".yaml").get()
                    .set("data", this.gson.toJson(repeatingMilestone, RepeatingMilestone.class));
            Playtime.getInstance().getFileManager()
                    .getConfig("repeatingmilestones/" + repeatingMilestone.getMilestoneName() + ".yaml").save();
            return true;
        });
    }

    /**
     * Delete the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to delete
     * @return If the repeating milestone is deleted
     */
    @Override
    public CompletableFuture<Boolean> deleteRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            Playtime.getInstance().getFileManager()
                    .getConfig("repeatingmilestones/" + repeatingMilestone.getMilestoneName() + ".yaml").file.delete();
            return true;
        });
    }

    /**
     * Update the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to update
     * @return If the repeating milestone is updated
     */
    @Override
    public CompletableFuture<Boolean> updateRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return saveRepeatingMilestone(repeatingMilestone);
    }

    /**
     * @param uuid
     * @param event
     * @param time
     * @return
     */
    @Override
    public CompletableFuture<Boolean> addPlaytimeHistory(UUID uuid, Event event, int time) {
        return CompletableFuture.supplyAsync(() -> {
            FileManager.Config config = Playtime.getInstance().getFileManager().getConfig("players/history/" + uuid + ".yaml");
            List<String> history = config.get().getStringList("history");

            history.add("UUID:" + uuid + "|EVENT:" + event + "|TIME:" + time + "|DATE" + new Date());

            config.set("history", history);
            config.save();
            return true;
        });
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/extentions/PlaceholderAPIExtension.java">
package nl.thedutchruben.playtime.extentions;

import me.clip.placeholderapi.expansion.PlaceholderExpansion;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import nl.thedutchruben.playtime.core.translations.Messages;
import nl.thedutchruben.playtime.utils.Replacement;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;

public class PlaceholderAPIExtension extends PlaceholderExpansion {

    @Override
    public String getIdentifier() {
        return "tdrplaytime";
    }

    @Override
    public String getAuthor() {
        return Playtime.getPlugin().getDescription().getAuthors().toString();
    }

    @Override
    public String getVersion() {
        return Playtime.getPlugin().getDescription().getVersion();
    }

    @Override
    public List<String> getPlaceholders() {
        List<String> placeholders = new ArrayList<>();
        placeholders.add("%tdrplaytime_time%");
        placeholders.add("%tdrplaytime_time_days_number%");
        placeholders.add("%tdrplaytime_time_hour_number%");
        placeholders.add("%tdrplaytime_time_minutes_number%");
        placeholders.add("%tdrplaytime_time_seconds_number%");

        for (int i = 1; i <= 10; i++) {
            placeholders.add("%tdrplaytime_top_names_" + i + "%");
            placeholders.add("%tdrplaytime_top_time_" + i + "_days%");
            placeholders.add("%tdrplaytime_top_time_" + i + "_hours%");
            placeholders.add("%tdrplaytime_top_time_" + i + "_minutes%");
            placeholders.add("%tdrplaytime_top_time_" + i + "_seconds%");
        }

        return placeholders;
    }

    @Override
    public String onPlaceholderRequest(Player player, String params) {
        String dummyProofParams = params.toLowerCase().replace('-', '_');
        PlaytimeUser user = Playtime.getInstance().getPlaytimeUsers().get(player.getUniqueId());

        if (dummyProofParams.equals("time")) {
            return Messages.PLAYTIME_INFO_OWN.getMessage(
                    new Replacement("%D%", String.valueOf(user.translateTime()[0])),
                    new Replacement("%H%", String.valueOf(user.translateTime()[1])),
                    new Replacement("%M%", String.valueOf(user.translateTime()[2])),
                    new Replacement("%S%", String.valueOf(user.translateTime()[3]))
            );
        }

        if (dummyProofParams.contains("days_number")) {
            return String.valueOf(user.translateTime()[0]);
        } else if (dummyProofParams.contains("hour_number")) {
            return String.valueOf(user.translateTime()[1]);
        } else if (dummyProofParams.contains("minutes_number")) {
            return String.valueOf(user.translateTime()[2]);
        } else if (dummyProofParams.contains("seconds_number")) {
            return String.valueOf(user.translateTime()[3]);
        }

        if (dummyProofParams.contains("top_names_")) {
            int placeNumber = parsePlaceNumber(dummyProofParams);
            return getTopUserName(placeNumber);
        }

        if (dummyProofParams.contains("top_time_")) {
            int placeNumber = parsePlaceNumber(dummyProofParams);
            return getTopUserTime(dummyProofParams, placeNumber);
        }

        return super.onPlaceholderRequest(player, params);
    }

    private int parsePlaceNumber(String params) {
        try {
            String[] parts = params.split("_");
            return Math.max(Integer.parseInt(parts[parts.length - 1]), 1);
        } catch (NumberFormatException e) {
            Bukkit.getLogger().log(Level.WARNING, "Wrong number format");
            return 1;
        }
    }

    private String getTopUserName(int placeNumber) {
        try {
            PlaytimeUser playtimeUser = Playtime.getInstance().getStorage().getTopUser(placeNumber - 1).get();
            return playtimeUser != null ? playtimeUser.getName() : "No user found";
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    private String getTopUserTime(String params, int placeNumber) {
        try {
            PlaytimeUser playtimeUser = Playtime.getInstance().getStorage().getTopUser(placeNumber - 1).get();
            if (playtimeUser != null) {
                if (Bukkit.getPlayer(playtimeUser.getUUID()) != null) {
                    playtimeUser = Playtime.getInstance().getPlaytimeUser(playtimeUser.getUUID()).get();
                }
                if (params.endsWith("_days")) {
                    return String.valueOf(playtimeUser.translateTime()[0]);
                } else if (params.endsWith("_hours")) {
                    return String.valueOf(playtimeUser.translateTime()[1]);
                } else if (params.endsWith("_minutes")) {
                    return String.valueOf(playtimeUser.translateTime()[2]);
                } else if (params.endsWith("_seconds")) {
                    return String.valueOf(playtimeUser.translateTime()[3]);
                } else {
                    return String.valueOf(playtimeUser.getTime());
                }
            } else {
                return "0";
            }
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException(e);
        }
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/player/commands/PlayTimeCommand.java">
package nl.thedutchruben.playtime.modules.player.commands;

import nl.thedutchruben.mccore.spigot.commands.Command;
import nl.thedutchruben.mccore.spigot.commands.Default;
import nl.thedutchruben.mccore.spigot.commands.Fallback;
import nl.thedutchruben.mccore.spigot.commands.SubCommand;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import nl.thedutchruben.playtime.core.translations.Messages;
import nl.thedutchruben.playtime.utils.Replacement;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Command(command = "playtime", description = "Main playtime command", permission = "playtime.playtime", console = true)
public class PlayTimeCommand {

    @Default
    @SubCommand(subCommand = "", description = "Show your own playtime")
    public void myTime(CommandSender sender, List<String> args) {
        if (sender instanceof Player) {
            PlaytimeUser user = Playtime.getInstance().getPlaytimeUsers().get(((Player) sender).getUniqueId());
            user.updatePlaytime();
            sender.sendMessage(Messages.PLAYTIME_INFO_OWN.getMessage(
                    new Replacement("%D%", String.valueOf(user.translateTime()[0])),
                    new Replacement("%H%", String.valueOf(user.translateTime()[1])),
                    new Replacement("%M%", String.valueOf(user.translateTime()[2])),
                    new Replacement("%S%", String.valueOf(user.translateTime()[3]))
            ));
        } else {
            sender.sendMessage("You need to be a player to use this command");
        }
    }

    @Fallback(minParams = 1, maxParams = 2)
    @SubCommand(subCommand = "", minParams = 1, maxParams = 2, usage = "<player>", description = "Show a player's playtime")
    public void see(CommandSender sender, List<String> args) {
        String playerName = args.get(0);
        Player player = Bukkit.getPlayer(playerName);

        if (player == null) {
            Playtime.getInstance().getStorage().loadUserByName(playerName).thenAcceptAsync(user -> {
                if (user == null) {
                    sender.sendMessage(Messages.PLAYER_DOES_NOT_EXIST.getMessage());
                } else {
                    sendPlaytimeInfo(sender, user);
                }
            });
        } else {
            Playtime.getInstance().getPlaytimeUser(playerName).ifPresent(user -> sendPlaytimeInfo(sender, user));
        }
    }

    @SubCommand(subCommand = "top", minParams = 0, maxParams = 1, usage = "<amount>", permission = "playtime.playtime.top", console = true, description = "Show the top 10 players")
    public void top(CommandSender sender, List<String> args) {
        int amount = 10;
        if (args.size() == 2) {
            amount = Integer.parseInt(args.get(1));
        }
        Playtime.getInstance().getStorage().getTopUsers(amount, 0).whenCompleteAsync((users, throwable) -> {
            users.forEach(user -> sendPlaytimeInfo(sender, user));
        });
    }

    @SubCommand(subCommand = "reset", permission = "playtime.playtime.reset", minParams = 2, maxParams = 2, console = true, usage = "<player>", description = "Reset a player's playtime")
    public void reset(CommandSender sender, List<String> args) {
        String playerName = args.get(1);
        Playtime.getInstance().getStorage().loadUserByName(playerName).thenAcceptAsync(user -> {
            if (user != null) {
                user.setPlaytime(0);
                Playtime.getInstance().getPlaytimeUser(playerName).ifPresent(u -> u.setPlaytime(0));
                Playtime.getInstance().getStorage().saveUser(user).thenAcceptAsync(u -> {
                    sender.sendMessage(Messages.PLAYER_RESET_CONFIRM.getMessage());
                });
            } else {
                sender.sendMessage(Messages.PLAYER_DOES_NOT_EXIST.getMessage());
            }
        });
    }

    @SubCommand(subCommand = "add", permission = "playtime.playtime.add", minParams = 3, maxParams = 3, console = true, description = "Add playtime to a user", usage = "<player> <time>")
    public void add(CommandSender sender, List<String> args) {
        String playerName = args.get(1);
        String time = args.get(2);
        Map<String, Integer> timeMap = parseTime(time);

        Playtime.getInstance().getPlaytimeUser(playerName).ifPresentOrElse(user -> {
            addPlaytime(user, timeMap, time);
            user.save().thenAcceptAsync(test -> {
                sender.sendMessage(Messages.TIME_ADDED.getMessage(new Replacement("<player>", playerName), new Replacement("%playtime%", playerName)));
            });
        }, () -> {
            Playtime.getInstance().getStorage().loadUserByName(playerName).thenAcceptAsync(user -> {
                addPlaytime(user, timeMap, time);
                user.save().thenAcceptAsync(test -> {
                    sender.sendMessage(Messages.TIME_ADDED.getMessage(new Replacement("<player>", playerName), new Replacement("%playtime%", playerName)));
                });
            });
        });
    }

    @SubCommand(subCommand = "remove", permission = "playtime.playtime.remove", minParams = 3, maxParams = 3, console = true, usage = "<player> <time>", description = "Remove playtime from a user")
    public void remove(CommandSender sender, List<String> args) {
        String playerName = args.get(1);
        String time = args.get(2);
        Map<String, Integer> timeMap = parseTime(time);

        Playtime.getInstance().getPlaytimeUser(playerName).ifPresentOrElse(user -> {
            removePlaytime(user, timeMap, time);
            user.save().thenAcceptAsync(test -> {
                sender.sendMessage(Messages.TIME_REMOVED.getMessage(new Replacement("<player>", playerName), new Replacement("%playtime%", playerName)));
            });
        }, () -> {
            Playtime.getInstance().getStorage().loadUserByName(playerName).thenAcceptAsync(user -> {
                removePlaytime(user, timeMap, time);
                user.save().thenAcceptAsync(test -> {
                    sender.sendMessage(Messages.TIME_REMOVED.getMessage(new Replacement("<player>", playerName), new Replacement("%playtime%", playerName)));
                });
            });
        });
    }

    @SubCommand(subCommand = "pluginInfo", permission = "playtime.playtime.pluginInfo", console = true, description = "Show info about the plugin", minParams = 1)
    public void pluginInfo(CommandSender sender, List<String> args) {
        sender.sendMessage(ChatColor.GREEN + "Playtime by TheDutchRuben");
        sender.sendMessage(ChatColor.GREEN + "Version: " + ChatColor.DARK_GRAY + Playtime.getPlugin().getDescription().getVersion());
        sender.sendMessage(ChatColor.GREEN + "Author: " + ChatColor.DARK_GRAY + Playtime.getPlugin().getDescription().getAuthors());
        sender.sendMessage(ChatColor.GREEN + "Website: " + ChatColor.DARK_GRAY + Playtime.getPlugin().getDescription().getWebsite());
        Playtime.getInstance().getStorage().getMilestones().whenComplete((milestones, throwable) -> {
            sender.sendMessage(ChatColor.GREEN + "Milestones: " + ChatColor.DARK_GRAY + milestones.size());
        });
        Playtime.getInstance().getStorage().getRepeatingMilestones().whenComplete((milestones, throwable) -> {
            sender.sendMessage(ChatColor.GREEN + "Repeating Milestones: " + ChatColor.DARK_GRAY + milestones.size());
        });
        Playtime.getInstance().getMccore().getUpdate(sender, true);
    }

    private void sendPlaytimeInfo(CommandSender sender, PlaytimeUser user) {
        sender.sendMessage(Messages.PLAYTIME_INFO_OTHER.getMessage(
                new Replacement("%NAME%", user.getName()),
                new Replacement("%D%", String.valueOf(user.translateTime()[0])),
                new Replacement("%H%", String.valueOf(user.translateTime()[1])),
                new Replacement("%M%", String.valueOf(user.translateTime()[2])),
                new Replacement("%S%", String.valueOf(user.translateTime()[3]))
        ));
    }

    /**
     * Parse the time string
     * @param time The time string
     * @return The map of time units
     */
    private Map<String, Integer> parseTime(String time) {
        Pattern pattern = Pattern.compile("(\\d+)([A-Za-z]+)");
        // Parse the time string
        // Example: 1d2h3m4s
        Matcher matcher = pattern.matcher(time);
        Map<String, Integer> timeMap = new HashMap<>();

        while (matcher.find()) {
            int value = Integer.parseInt(matcher.group(1));
            String unit = matcher.group(2);
            timeMap.put(unit, value);
        }

        return timeMap;
    }

    /**
     * Add playtime to a user
     * @param user The user to add playtime to
     * @param timeMap The map of time units
     * @param time The time to add
     */
    private void addPlaytime(PlaytimeUser user, Map<String, Integer> timeMap, String time) {
        if (timeMap.isEmpty()) {
            user.addPlaytime(Long.parseLong(time), TimeUnit.SECONDS);
        } else {
            timeMap.forEach((unit, value) -> {
                switch (unit.toUpperCase(Locale.ROOT)) {
                    case "S":
                        user.addPlaytime(value, TimeUnit.SECONDS);
                        break;
                    case "M":
                        user.addPlaytime(value, TimeUnit.MINUTES);
                        break;
                    case "H":
                        user.addPlaytime(value, TimeUnit.HOURS);
                        break;
                    case "D":
                        user.addPlaytime(value, TimeUnit.DAYS);
                        break;
                    case "W":
                        user.addPlaytime(value * 7L, TimeUnit.DAYS);
                        break;
                }
            });
        }
    }

    /**
     * Remove playtime from a user
     * @param user The user to remove playtime from
     * @param timeMap The map of time units
     * @param time The time to remove
     */
    private void removePlaytime(PlaytimeUser user, Map<String, Integer> timeMap, String time) {
        if (timeMap.isEmpty()) {
            user.removePlaytime(Long.parseLong(time), TimeUnit.SECONDS);
        } else {
            timeMap.forEach((unit, value) -> {
                switch (unit.toUpperCase(Locale.ROOT)) {
                    case "S":
                        user.removePlaytime(value, TimeUnit.SECONDS);
                        break;
                    case "M":
                        user.removePlaytime(value, TimeUnit.MINUTES);
                        break;
                    case "H":
                        user.removePlaytime(value, TimeUnit.HOURS);
                        break;
                    case "D":
                        user.removePlaytime(value, TimeUnit.DAYS);
                        break;
                    case "W":
                        user.removePlaytime(value * 7L, TimeUnit.DAYS);
                        break;
                }
            });
        }
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/player/listeners/PlayerJoinListener.java">
package nl.thedutchruben.playtime.modules.player.listeners;

import nl.thedutchruben.mccore.spigot.listeners.TDRListener;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.events.player.PlaytimePlayerLoadedEvent;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;

@TDRListener
public class PlayerJoinListener implements Listener {

    @EventHandler
    public void onJoin(PlayerJoinEvent event) {
        Playtime.getInstance().getStorage().loadUser(event.getPlayer().getUniqueId()).thenAcceptAsync(playtimeUser -> {

            if (playtimeUser != null) {
                Playtime.getInstance().getPlaytimeUsers().put(event.getPlayer().getUniqueId(), playtimeUser);
            } else {
                PlaytimeUser playtimeUser1 = new PlaytimeUser(event.getPlayer().getUniqueId().toString(), event.getPlayer().getName());
                Playtime.getInstance().getStorage().createUser(playtimeUser1);
                Playtime.getInstance().getPlaytimeUsers().put(event.getPlayer().getUniqueId(), playtimeUser1);
            }

            Bukkit.getPluginManager().callEvent(new PlaytimePlayerLoadedEvent(Playtime.getInstance().getPlaytimeUsers().get(event.getPlayer().getUniqueId()), true));
        });
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/player/listeners/PlayerQuitListener.java">
package nl.thedutchruben.playtime.modules.player.listeners;

import com.google.gson.Gson;
import nl.thedutchruben.mccore.spigot.listeners.TDRListener;
import nl.thedutchruben.mccore.utils.config.FileManager;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.events.player.PlaytimePlayerSaveEvent;
import nl.thedutchruben.playtime.core.events.player.PlaytimePlayerUnLoadedEvent;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerQuitEvent;

@TDRListener
public class PlayerQuitListener implements Listener {

    @EventHandler
    public void onQuit(PlayerQuitEvent event) {
        Bukkit.getPluginManager().callEvent(new PlaytimePlayerSaveEvent(Playtime.getInstance().getPlaytimeUsers().get(event.getPlayer().getUniqueId()), false));

        Bukkit.getScheduler().runTaskAsynchronously(Playtime.getPlugin(), () -> {
            PlaytimeUser user = Playtime.getInstance().getPlaytimeUsers().get(event.getPlayer().getUniqueId());

            user.updatePlaytime();

            Playtime.getInstance().getStorage().saveUser(Playtime.getInstance().getPlaytimeUsers().get(event.getPlayer().getUniqueId())).thenAcceptAsync(aBoolean -> {

                if (aBoolean) {
                    Bukkit.getPluginManager().callEvent(new PlaytimePlayerUnLoadedEvent(Playtime.getInstance().getPlaytimeUsers().get(event.getPlayer().getUniqueId()), true));
                    Playtime.getInstance().getPlaytimeUsers().remove(event.getPlayer().getUniqueId());
                } else {
                    Playtime.getPlugin().getLogger().warning("Could not save the user " + event.getPlayer().getName() + " to the storage");
                    FileManager.Config config = Playtime.getInstance().getFileManager().getConfig("recover/" + event.getPlayer().getUniqueId() + ".yml");
                    config.set("data", new Gson().toJson(user));
                    config.save();
                }

            });
        });
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/player/runnables/SavePlayTimeRunnable.java">
package nl.thedutchruben.playtime.modules.player.runnables;

import nl.thedutchruben.mccore.spigot.runnables.ASyncRepeatingTask;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;

import java.util.logging.Level;

/**
 * Save the playtime of the players every 5 minutes
 */
@ASyncRepeatingTask(repeatTime = 6000, startTime = 6000)
public class SavePlayTimeRunnable implements Runnable {

    /**
     * When an object implementing interface {@code Runnable} is used
     * to create a thread, starting the thread causes the object's
     * {@code run} method to be called in that separately executing
     * thread.
     * <p>
     * The general contract of the method {@code run} is that it may
     * take any action whatsoever.
     *
     * @see Thread#run()
     */
    @Override
    public void run() {
        if (Playtime.getInstance().getPlaytimeUsers().isEmpty()) return;
        Playtime.getPlugin().getLogger().log(Level.INFO, "Saving playtime...");
        for (PlaytimeUser value : Playtime.getInstance().getPlaytimeUsers().values()) {
            Playtime.getInstance().getStorage().saveUser(value);
        }
        Playtime.getPlugin().getLogger().log(Level.INFO, "Saved playtime of {0} players", Playtime.getInstance().getPlaytimeUsers().size());
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/player/runnables/UpdatePlayTimeRunnable.java">
package nl.thedutchruben.playtime.modules.player.runnables;

import nl.thedutchruben.mccore.spigot.runnables.ASyncRepeatingTask;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;

/**
 * Every 15 seconds the playtime will update for scoreboards and for getting the milestones
 */
@ASyncRepeatingTask(repeatTime = 300, startTime = 300)
public class UpdatePlayTimeRunnable implements Runnable {

    /**
     * When an object implementing interface {@code Runnable} is used
     * to create a thread, starting the thread causes the object's
     * {@code run} method to be called in that separately executing
     * thread.
     * <p>
     * The general contract of the method {@code run} is that it may
     * take any action whatsoever.
     *
     * @see Thread#run()
     */
    @Override
    public void run() {
        for (PlaytimeUser playtimeUser : Playtime.getInstance().getPlaytimeUsers().values()) {
            playtimeUser.updatePlaytime();
        }
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/playtime_history/commands/PlaytimeHistoryCommand.java">
package nl.thedutchruben.playtime.modules.playtime_history.commands;

public class PlaytimeHistoryCommand {

}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/playtime_history/listeners/PlayTimePlayerLoadedListener.java">
package nl.thedutchruben.playtime.modules.playtime_history.listeners;

import nl.thedutchruben.mccore.spigot.listeners.TDRListener;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.events.player.PlaytimePlayerLoadedEvent;
import nl.thedutchruben.playtime.core.events.player.PlaytimePlayerUnLoadedEvent;
import nl.thedutchruben.playtime.core.storage.Storage;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;

@TDRListener
public class PlayTimePlayerLoadedListener implements Listener {

    @EventHandler
    public void onJoin(PlaytimePlayerLoadedEvent event) {
        Playtime.getInstance().getStorage().addPlaytimeHistory(event.getUser().getUUID(), Storage.Event.JOIN, (int) event.getUser().getTime());
    }

    @EventHandler
    public void onQuit(PlaytimePlayerUnLoadedEvent event) {
        Playtime.getInstance().getStorage().addPlaytimeHistory(event.getUser().getUUID(), Storage.Event.QUIT, (int) event.getUser().getTime());
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/playtime_history/runnables/MidnightSaveJoinsRunnable.java">
package nl.thedutchruben.playtime.modules.playtime_history.runnables;


public class MidnightSaveJoinsRunnable {
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/playtime_history/runnables/MidnightSaveQuitsRunnable.java">
package nl.thedutchruben.playtime.modules.playtime_history.runnables;

public class MidnightSaveQuitsRunnable {
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/PlayTimePluginTest.java">
package nl.thedutchruben.playtime;

import be.seeseemelk.mockbukkit.MockBukkit;
import be.seeseemelk.mockbukkit.ServerMock;
import be.seeseemelk.mockbukkit.entity.PlayerMock;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

public class PlayTimePluginTest {

    private ServerMock server;
    private PlayTimePlugin plugin;

    @BeforeEach
    void setUp() {
        // Start the mock server
        server = MockBukkit.mock();

        // Load the plugin
        plugin = MockBukkit.load(PlayTimePlugin.class);
    }

    @AfterEach
    void tearDown() {
        // Stop the mock server
        MockBukkit.unmock();
    }

    @Test
    void testPluginEnables() {
        assertTrue(plugin.isEnabled());
    }

    @Test
    void testPlayerJoin() {
        // Add a player to the server which should trigger the join event
        PlayerMock player = server.addPlayer();

        // Give the async tasks time to complete
        server.getScheduler().performTicks(100);

        // The player should have been added to Playtime's user map
        PlaytimeUser user = Playtime.getInstance().getPlaytimeUsers().get(player.getUniqueId());
        assertNotNull(user);
        assertEquals(player.getName(), user.getName());
        assertEquals(player.getUniqueId().toString(), user.getUUID().toString());
    }

    @Test
    void testPlaytimeCommand() {
        // Add a player
        PlayerMock player = server.addPlayer();
        server.getScheduler().performTicks(100);

        // Get the player's playtime user and set some playtime
        PlaytimeUser user = Playtime.getInstance().getPlaytimeUsers().get(player.getUniqueId());
        user.addPlaytime(2, TimeUnit.HOURS);

        // Execute the command
        player.performCommand("playtime");

        // Player should receive a message containing their playtime
        player.assertSaid("[PlayTime] Your playtime is 0 day(s) 2 hour(s) 0 minute(s) 0 second(s)");
    }

    @Test
    void testMilestoneCommand() {
        // Add a player with OP permissions
        PlayerMock player = server.addPlayer();
        player.setOp(true);
        server.getScheduler().performTicks(100);

        // Create a milestone
        player.performCommand("milestone create TestMilestone 3600");
        player.assertSaid("The milestone is created!");

        // List milestones
        player.performCommand("milestone list");
        player.assertSaid("TestMilestone Time: Days: 0 Hours: 1 ,Minute's: 0 ,Seconds's: 0");
    }

    @Test
    void testPlaytimeIncreases() {
        // Add a player
        PlayerMock player = server.addPlayer();
        server.getScheduler().performTicks(100);

        // Get the initial playtime
        PlaytimeUser user = Playtime.getInstance().getPlaytimeUsers().get(player.getUniqueId());
        float initialPlaytime = user.getTime();

        // Trigger the update playtime runnable
        server.getScheduler().performTicks(300);

        // Playtime should have increased
        float newPlaytime = user.getTime();
        assertTrue(newPlaytime > initialPlaytime);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/utils/Replacement.java">
package nl.thedutchruben.playtime.utils;

import lombok.Getter;

/**
 * @author Ruben
 * @version 1.0
 * <p>
 * This class is used to replace a string with a string.
 * </p>
 * @since 1.0
 */
@Getter
public class Replacement {
    /**
     * The string to replace.
     * -- GETTER --
     *
     * @return The string to replace.
     */
    private final String from;

    /**
     * The string to replace with.
     * -- GETTER --
     *
     * @return The string to replace with.
     */
    private final String to;

    /**
     * @param from The string to replace.
     * @param to   The string to replace with.
     */
    public Replacement(String from, String to) {
        this.from = from;
        this.to = to;
    }
}
</file>

<file path=".github/workflows/code-coverage.yml">
name: Code Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven and generate coverage report
        run: mvn clean verify

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./target/site/jacoco/jacoco.xml
          fail_ci_if_error: false

      - name: Generate JaCoCo Badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: target/site/jacoco/jacoco.csv

      - name: Commit and push the badge (if it changed)
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: 'Update code coverage badges'
          add: '*.svg'
</file>

<file path=".github/workflows/pr-test-report.yml">
name: PR Test Report

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Run tests
        run: mvn test

      - name: Generate JUnit Test Report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: JUnit Test Report
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Generate code coverage report
        run: mvn jacoco:report

      - name: Get test statistics
        id: test-stats
        if: success() || failure()
        run: |
          # Extract test statistics
          TESTS_TOTAL=$(grep -c "<testcase" target/surefire-reports/*.xml | awk -F: '{sum+=$2} END {print sum}')
          TESTS_PASSED=$(grep -c "<testcase" target/surefire-reports/*.xml | awk -F: '{sum+=$2} END {print sum}' | bc)
          TESTS_FAILED=$(grep -c "<failure" target/surefire-reports/*.xml | awk -F: '{sum+=$2} END {print sum}')
          TESTS_SKIPPED=$(grep -c "<skipped" target/surefire-reports/*.xml | awk -F: '{sum+=$2} END {print sum}')
          
          COVERAGE=$(awk -F, 'NR==2 {print $5}' target/site/jacoco/jacoco.csv)
          
          echo "tests_total=$TESTS_TOTAL" >> $GITHUB_OUTPUT
          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
          echo "tests_failed=$TESTS_FAILED" >> $GITHUB_OUTPUT
          echo "tests_skipped=$TESTS_SKIPPED" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Add comment with test results
        if: success() || failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testsTotal = '${{ steps.test-stats.outputs.tests_total }}';
            const testsPassed = '${{ steps.test-stats.outputs.tests_passed }}';
            const testsFailed = '${{ steps.test-stats.outputs.tests_failed }}';
            const testsSkipped = '${{ steps.test-stats.outputs.tests_skipped }}';
            const coverage = '${{ steps.test-stats.outputs.coverage }}';
            
            const failureEmoji = parseInt(testsFailed) > 0 ? '❌' : '✅';
            
            const body = `## Test Report ${failureEmoji}
            
            ### Summary
            - **Total Tests:** ${testsTotal}
            - **Passed:** ${testsPassed}
            - **Failed:** ${testsFailed}
            - **Skipped:** ${testsSkipped}
            - **Code Coverage:** ${coverage}%
            
            ${parseInt(testsFailed) > 0 ? '⚠️ Some tests are failing. Please fix them before merging.' : '🎉 All tests are passing!'}
            `;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const existingComment = comments.find(comment => comment.body.includes('## Test Report'));
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/ConfigFiles.java">
package nl.thedutchruben.playtime.core;

import lombok.Getter;

@Getter
public enum ConfigFiles {
    CONFIG("config.yml"),
    STORAGE("storage.yml");

    private final String fileName;

    ConfigFiles(String fileName) {
        this.fileName = fileName;
    }

}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/objects/Milestone.java">
package nl.thedutchruben.playtime.core.objects;

import com.google.gson.annotations.SerializedName;
import lombok.Getter;
import lombok.Setter;
import nl.thedutchruben.mccore.utils.firework.FireworkUtil;
import nl.thedutchruben.mccore.utils.message.MessageUtil;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.events.milestone.MilestoneReceiveEvent;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Milestone {
    private transient List<ItemStack> _itemStackObjects;

    /**
     * The name of the milestone
     * -- GETTER --
     * get the name of the milestone
     * -- SETTER --
     * set the name of the milestone
     */
    @Setter
    @Getter
    @SerializedName("_id")
    private String milestoneName;

    /**
     * The time the player has to be online to get the milestone
     * -- GETTER --
     * get the time the player has to be online to get the milestone
     * -- SETTER --
     * set the time the player has to be online to get the milestone
     */
    @Setter
    @Getter
    @SerializedName("online_time")
    private long onlineTime;

    /**
     * The list of items to give the player.
     */
    @SerializedName("item_stacks")
    private List<Map<String, Object>> itemStacks;

    /**
     * The list of commands to execute
     */
    @SerializedName("commands")
    private List<String> commands;

    /**
     * The list of messages to send
     * -- SETTER --
     * set the list of messages to send
     */
    @Setter
    @SerializedName("messages")
    private List<String> messages;

    /**
     * if there shall be a firework show
     * -- GETTER --
     * get if there is a firework show
     * -- SETTER --
     * set if there is a firework show
     */
    @Setter
    @Getter
    @SerializedName("firework_show")
    private boolean fireworkShow = false;

    /**
     * The amount of fireworks to spawn
     * -- GETTER --
     * get the amount of fireworks to spawn
     * -- SETTER --
     * set the amount of fireworks to spawn
     */
    @Setter
    @Getter
    @SerializedName("firework_show_amount")
    private int fireworkShowAmount = 1;

    /**
     * The seconds between the fireworks
     * -- SETTER --
     * set the seconds between the fireworks
     */
    @Setter
    @Getter
    @SerializedName("firework_show_seconds_between_firework")
    private int fireworkShowSecondsBetween = 0;

    public static Milestone getMilestone(String name) {
        return Playtime.getInstance()
                .getMilestones().stream()
                .filter(milestone -> milestone.getMilestoneName().equalsIgnoreCase(name))
                .findFirst().orElse(null);
    }

    /**
     * Apply the milestone on the player
     *
     * @param player The player to apply the milestone to
     */
    public void apply(Player player) {
        Bukkit.getScheduler().runTask(Playtime.getPlugin(), () ->
                Bukkit.getPluginManager().callEvent(
                        new MilestoneReceiveEvent(this, Playtime.getInstance().getPlaytimeUser(player.getUniqueId()).get()))
        );

        if (itemStacks != null && _itemStackObjects == null) {
            _itemStackObjects = new ArrayList<>();
            for (Map<String, Object> itemStack : itemStacks) {
                _itemStackObjects.add(ItemStack.deserialize(itemStack));
            }
        }

        if (_itemStackObjects != null && !_itemStackObjects.isEmpty()) {
            Bukkit.getScheduler().runTask(Playtime.getPlugin(), () ->
                    player.getInventory().addItem(_itemStackObjects.toArray(new ItemStack[0]))
            );
        }

        if (commands != null) {
            Bukkit.getScheduler().runTask(Playtime.getPlugin(), () ->
                    commands.forEach(command -> Bukkit.dispatchCommand(Bukkit.getConsoleSender(),
                            command.replaceAll("%playername%", player.getName())
                                    .replaceAll("%player_name%", player.getName())
                                    .replaceAll("%playeruuid%", player.getUniqueId().toString())
                                    .replaceAll("%player_uuid%", player.getUniqueId().toString()))
                    )
            );
        }

        if (messages != null) {
            messages.forEach(s ->
                    player.sendMessage(MessageUtil.translateHexColorCodes("<", ">", ChatColor.translateAlternateColorCodes('&', s)))
            );
        }

        if (fireworkShow) {
            Bukkit.getScheduler().runTaskAsynchronously(Playtime.getPlugin(), () -> {
                for (int i = 0; i < fireworkShowAmount; i++) {
                    Bukkit.getScheduler().runTask(Playtime.getPlugin(), () ->
                            FireworkUtil.spawnRandomFirework(player.getLocation())
                    );
                    try {
                        Thread.sleep(fireworkShowSecondsBetween * 1000L);
                    } catch (InterruptedException e) {
                        Playtime.getPlugin().getLogger().warning("Error while sleeping the thread: " + e.getMessage());
                    }
                }
            });
        }
    }

    /**
     * Adds an ItemStack to the milestone.
     *
     * @param itemStack The ItemStack to add.
     */
    public void addItemStack(ItemStack itemStack) {
        if (itemStacks == null) {
            itemStacks = new ArrayList<>();
        }
        itemStacks.add(itemStack.serialize());
        _itemStackObjects = null;
    }

    /**
     * Adds a command to the milestone.
     *
     * @param command The command to add.
     */
    public void addCommand(String command) {
        if (commands == null) {
            commands = new ArrayList<>();
        }
        commands.add(command);
    }

    /**
     * Adds a message to the milestone.
     *
     * @param message The message to add.
     */
    public void addMessage(String message) {
        if (messages == null) {
            messages = new ArrayList<>();
        }
        messages.add(message);
    }

    /**
     * Removes an ItemStack from the milestone.
     *
     * @param itemStack The ItemStack to remove.
     */
    public void removeItemStack(ItemStack itemStack) {
        if (itemStacks == null) {
            return;
        }
        itemStacks.remove(itemStack.serialize());
        _itemStackObjects = null;
    }

    public long getOnlineTimeInMilliseconds(){
        return onlineTime * 1000;
    }

    /**
     * Removes a command from the milestone.
     *
     * @param command The command to remove.
     */
    public void removeCommand(String command) {
        if (commands == null) {
            return;
        }
        commands.remove(command);
    }

    /**
     * Removes a message from the milestone.
     *
     * @param message The message to remove.
     */
    public void removeMessage(String message) {
        if (messages == null) {
            return;
        }
        messages.remove(message);
    }

    /**
     * @return The list of items to give the player.
     */
    public List<Map<String, Object>> getItemStacks() {
        if (itemStacks == null) {
            itemStacks = new ArrayList<>();
        }
        return itemStacks;
    }

    /**
     * @return The list of commands to execute
     */
    public List<String> getCommands() {
        if (commands == null) {
            commands = new ArrayList<>();
        }
        return commands;
    }

    /**
     * get the list of messages to send
     */
    public List<String> getMessages() {
        if (messages == null) {
            messages = new ArrayList<>();
        }
        return messages;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/storage/SqlStatements.java">
package nl.thedutchruben.playtime.core.storage;

import java.util.ArrayList;
import java.util.List;

/**
 * This class contains the SQL statements that are used to create the tables in the database.
 * The statements are formatted based on the table prefix and the database type.
 */
public class SqlStatements {

    /**
     * Get the SQL statements for creating the tables in the database.
     *
     * @param tablePrefix The prefix for the table names.
     * @param mysql       Whether the database is MySQL or SQLite.
     * @return The SQL statements for creating the tables in the database.
     */
    public static List<String> getStatements(String tablePrefix, boolean mysql) {
        List<String> statements = new ArrayList<>();
        String prefix = "CREATE TABLE IF NOT EXISTS `" + tablePrefix;
        statements.add(String.format("%splaytime` (\n  `uuid` varchar(36),\n  `name` varchar(16),\n  `time` BIGINT \n);\n", prefix));
        statements.add(String.format("%smilestones` (\n  `name` varchar(40),\n  `data` TEXT \n);\n", prefix));
        statements.add(String.format("%srepeating_milestones` (\n  `name` varchar(40),\n  `data` TEXT \n);\n", prefix));
        statements.add(String.format("%splaytime_milestones` (\n  `uuid` varchar(36),\n  `milestone` varchar(40),\n  `claimed` BOOLEAN \n);\n", prefix));

        String playtimeHistory = mysql
                ? String.format("%splaytime_history` (\n  `id` INT NOT NULL AUTO_INCREMENT , \n  `uuid` VARCHAR(40) NOT NULL \n,  `event` VARCHAR(40) NOT NULL , \n  `start_time` BIGINT NOT NULL , \n  `date` DATETIME NOT NULL , \n  PRIMARY KEY (`id`)) ENGINE = InnoDB;", prefix)
                : String.format("CREATE TABLE IF NOT EXISTS `%splaytime_history` (\n" +
                "  `id` INTEGER PRIMARY KEY AUTOINCREMENT,\n" +
                "  `uuid` VARCHAR(40),\n" +
                "  `time` BIGINT,\n" +
                "  `event` VARCHAR(40),\n" +
                "  `date` DATETIME\n" +
                ");", tablePrefix);
        statements.add(playtimeHistory);

        return statements;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/storage/Storage.java">
package nl.thedutchruben.playtime.core.storage;

import com.google.gson.Gson;
import nl.thedutchruben.mccore.utils.GsonUtil;
import nl.thedutchruben.playtime.core.objects.Milestone;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

public abstract class Storage {
    private final Gson gson;

    public Storage() {
        this.gson =  GsonUtil.createGson();
    }

    /**
     * Get the name of the storage type
     *
     * @return The name of the storage type
     */
    public abstract String getName();

    /**
     * Set up the storage such as the database connection
     */
    public abstract boolean setup();

    /**
     * Stops the storage such things as the database connection
     */
    public abstract void stop();

    /**
     * Load the user from the storage
     *
     * @param uuid The uuid of the player
     * @return The playtime user
     */

    public abstract CompletableFuture<PlaytimeUser> loadUser(UUID uuid);

    /**
     * Load user loaded by name
     *
     * @param name
     * @return
     */
    public abstract CompletableFuture<PlaytimeUser> loadUserByName(String name);

    /**
     * Save the user to the storage
     *
     * @param playtimeUser The playtime user
     * @return If the user is saved
     */
    public abstract CompletableFuture<Boolean> saveUser(PlaytimeUser playtimeUser);

    /**
     * Create the user
     *
     * @param playtimeUser
     * @return
     */
    public abstract CompletableFuture<Boolean> createUser(PlaytimeUser playtimeUser);

    /**
     * Get the top users
     *
     * @param amount The amount of users
     * @param skip   The amount of users to skip
     * @return The list of users
     */
    public abstract CompletableFuture<List<PlaytimeUser>> getTopUsers(int amount, int skip);

    /**
     * Get the top user
     *
     * @param place The place of the user
     * @return The user
     */
    public abstract CompletableFuture<PlaytimeUser> getTopUser(int place);

    /**
     * Get the milestones
     *
     * @return The list of milestones
     */
    public abstract CompletableFuture<List<Milestone>> getMilestones();

    /**
     * Save the milestone
     *
     * @param milestone The milestone to save
     * @return If the milestone is saved
     */
    public abstract CompletableFuture<Boolean> saveMilestone(Milestone milestone);

    /**
     * Delete the milestone
     *
     * @param milestone The milestone to delete
     * @return If the milestone is deleted
     */
    public abstract CompletableFuture<Boolean> deleteMilestone(Milestone milestone);

    /**
     * Update the milestone
     *
     * @param milestone The milestone to update
     * @return If the milestone is updated
     */
    public abstract CompletableFuture<Boolean> updateMilestone(Milestone milestone);

    /**
     * Get the repeating milestones
     *
     * @return The list of repeating milestones
     */
    public abstract CompletableFuture<List<RepeatingMilestone>> getRepeatingMilestones();

    /**
     * Save the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to save
     * @return If the repeating milestone is saved
     */
    public abstract CompletableFuture<Boolean> saveRepeatingMilestone(RepeatingMilestone repeatingMilestone);

    /**
     * Delete the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to delete
     * @return If the repeating milestone is deleted
     */
    public abstract CompletableFuture<Boolean> deleteRepeatingMilestone(RepeatingMilestone repeatingMilestone);

    /**
     * Update the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to update
     * @return If the repeating milestone is updated
     */
    public abstract CompletableFuture<Boolean> updateRepeatingMilestone(RepeatingMilestone repeatingMilestone);

    /**
     *
     * @param uuid
     * @param event
     * @param time
     * @return
     */
    public abstract CompletableFuture<Boolean> addPlaytimeHistory(UUID uuid, Event event, int time);

    public Gson getGson() {
        return gson;
    }

    public enum Event {
        JOIN,
        QUIT
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/storage/types/Mongodb.java">
package nl.thedutchruben.playtime.core.storage.types;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.InsertOneResult;
import com.mongodb.client.result.UpdateResult;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.Settings;
import nl.thedutchruben.playtime.core.objects.Milestone;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;
import nl.thedutchruben.playtime.core.storage.Storage;
import org.bson.Document;

import java.util.*;
import java.util.concurrent.CompletableFuture;

/**
 * The mongodb storage
 */
public class Mongodb extends Storage {
    private MongoClient mongoClient;
    private com.mongodb.client.MongoDatabase database;

    /**
     * Get the name of the storage type
     *
     * @return The name of the storage type
     */
    @Override
    public String getName() {
        return "mongodb";
    }

    /**
     * Setup the storage such as the database connection
     */
    @Override
    public boolean setup() {
        // build the connection string from config values
        String connectionString = "mongodb://";
        if (!Objects.equals(Settings.STORAGE_MONGO_USERNAME.getValueAsString(), "")) {
            connectionString += Settings.STORAGE_MONGO_USERNAME.getValueAsString() + ":" + Settings.STORAGE_MONGO_PASSWORD.getValueAsString() + "@";
        }
        connectionString += Settings.STORAGE_MONGO_HOST.getValueAsString() + ":" + Settings.STORAGE_MONGO_PORT.getValueAsInteger();
        connectionString += "/" + Settings.STORAGE_MONGO_COLLECTION.getValueAsString();
        this.mongoClient = MongoClients.create(connectionString);
        //Check if the database is valid
        this.database = this.mongoClient.getDatabase(Settings.STORAGE_MONGO_COLLECTION.getValueAsString());

        return this.mongoClient != null;
    }

    /**
     * Stops the storage such things as the database connection
     */
    @Override
    public void stop() {
        this.mongoClient.close();
    }

    /**
     * Load the user from the storage
     *
     * @param uuid The uuid of the player
     * @return The playtime user
     */
    @Override
    public CompletableFuture<PlaytimeUser> loadUser(UUID uuid) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = this.database.getCollection("playtime").find(new Document("uuid", uuid.toString())).first();
            if (document == null) {
                return null;
            }
            return new PlaytimeUser(document.getString("uuid"), document.getString("name"), document.getLong("playtime"));
        });
    }

    /**
     * Load user loaded by name
     *
     * @param name
     * @return
     */
    @Override
    public CompletableFuture<PlaytimeUser> loadUserByName(String name) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = this.database.getCollection("playtime").find(new Document("name", name)).first();
            if (document == null) {
                return null;
            }
            return new PlaytimeUser(document.getString("uuid"), document.getString("name"), document.getLong("playtime"));
        });
    }

    /**
     * Save the user to the storage
     *
     * @param playtimeUser The playtime user
     * @return If the user is saved
     */
    @Override
    public CompletableFuture<Boolean> saveUser(PlaytimeUser playtimeUser) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = new Document("uuid", playtimeUser.getUUID().toString())
                    .append("name", playtimeUser.getName())
                    .append("playtime", playtimeUser.getTime());
            UpdateResult updateResult = this.database.getCollection("playtime").updateOne(new Document("uuid", playtimeUser.getUUID().toString()), new Document("$set", document));
            return updateResult.wasAcknowledged();
        });
    }


    /**
     * Create the user
     *
     * @param playtimeUser
     * @return
     */
    @Override
    public CompletableFuture<Boolean> createUser(PlaytimeUser playtimeUser) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = new Document("uuid", playtimeUser.getUUID().toString())
                    .append("name", playtimeUser.getName())
                    .append("playtime", playtimeUser.getTime());
            InsertOneResult result = this.database.getCollection("playtime").insertOne(document);
            return result.wasAcknowledged();
        });
    }

    /**
     * Get the top users
     *
     * @param amount The amount of users
     * @param skip   The amount of users to skip
     * @return The list of users
     */
    @Override
    public CompletableFuture<List<PlaytimeUser>> getTopUsers(int amount, int skip) {
        return CompletableFuture.supplyAsync(() -> {
            List<PlaytimeUser> users = new ArrayList<>();
            this.database.getCollection("playtime").find().sort(new Document("playtime", -1)).skip(skip).limit(amount).forEach(document -> {
                users.add(new PlaytimeUser(document.getString("uuid"), document.getString("name"), document.getLong("playtime")));
            });
            return users;
        });
    }

    /**
     * Get the top user
     *
     * @param place The place of the user
     * @return The user
     */
    @Override
    public CompletableFuture<PlaytimeUser> getTopUser(int place) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = this.database.getCollection("playtime").find().sort(new Document("playtime", -1)).skip(place).limit(1).first();
            if (document == null) {
                return null;
            }
            return new PlaytimeUser(document.getString("uuid"), document.getString("name"), document.getLong("playtime"));
        });
    }

    /**
     * Get the milestones
     *
     * @return The list of milestones
     */
    @Override
    public CompletableFuture<List<Milestone>> getMilestones() {
        return CompletableFuture.supplyAsync(() -> this.database.getCollection("milestones").find().map(document -> getGson().fromJson(document.toJson(), Milestone.class)).into(new ArrayList<>()));
    }

    /**
     * Save the milestone
     *
     * @param milestone The milestone to save
     * @return If the milestone is saved
     */
    @Override
    public CompletableFuture<Boolean> saveMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = Document.parse(getGson().toJson(milestone));
            InsertOneResult result = this.database.getCollection("milestones").insertOne(document);
            return result.wasAcknowledged();
        });
    }

    /**
     * Delete the milestone
     *
     * @param milestone The milestone to delete
     * @return If the milestone is deleted
     */
    @Override
    public CompletableFuture<Boolean> deleteMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = Document.parse(getGson().toJson(milestone));
            DeleteResult deleteResult = this.database.getCollection("milestones").deleteOne(document);
            return deleteResult.wasAcknowledged();
        });
    }

    /**
     * Update the milestone
     *
     * @param milestone The milestone to update
     * @return If the milestone is updated
     */
    @Override
    public CompletableFuture<Boolean> updateMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = Document.parse(getGson().toJson(milestone, Milestone.class));
            UpdateResult insertOneResult = this.database.getCollection("milestones").updateOne(new Document("_id", milestone.getMilestoneName()), new Document("$set", document));
            return insertOneResult.wasAcknowledged();
        });
    }

    /**
     * Get the repeating milestones
     *
     * @return The list of repeating milestones
     */
    @Override
    public CompletableFuture<List<RepeatingMilestone>> getRepeatingMilestones() {
        return CompletableFuture.supplyAsync(() -> this.database.getCollection("repeatingmilestones").find().map(document -> getGson().fromJson(document.toJson(), RepeatingMilestone.class)).into(new ArrayList<>()));
    }

    /**
     * Save the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to save
     * @return If the repeating milestone is saved
     */
    @Override
    public CompletableFuture<Boolean> saveRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = Document.parse(getGson().toJson(repeatingMilestone));
            InsertOneResult result = this.database.getCollection("repeatingmilestones").insertOne(document);
            return result.wasAcknowledged();
        });
    }

    /**
     * Delete the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to delete
     * @return If the repeating milestone is deleted
     */
    @Override
    public CompletableFuture<Boolean> deleteRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = Document.parse(getGson().toJson(repeatingMilestone));
            DeleteResult deleteResult = this.database.getCollection("repeatingmilestones").deleteOne(document);
            return deleteResult.wasAcknowledged();
        });
    }

    /**
     * Update the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to update
     * @return If the repeating milestone is updated
     */
    @Override
    public CompletableFuture<Boolean> updateRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            Document document = Document.parse(getGson().toJson(repeatingMilestone, RepeatingMilestone.class));
            UpdateResult insertOneResult = this.database.getCollection("repeatingmilestones").updateOne(new Document("_id", repeatingMilestone.getMilestoneName()), new Document("$set", document));
            return insertOneResult.wasAcknowledged();
        });
    }

    /**
     * @param uuid
     * @param event
     * @param time
     * @return
     */
    @Override
    public CompletableFuture<Boolean> addPlaytimeHistory(UUID uuid, Event event, int time) {
        return CompletableFuture.supplyAsync(() -> {
            InsertOneResult result = this.database.getCollection("playtimeHistory")
                    .insertOne(
                            new Document("uuid", uuid)
                                    .append("date", new Date())
                                    .append("event", event)
                                    .append("time", time)
                    );
            return result.wasAcknowledged();
        });
    }

    /**
     * Check if a playtime record exists for the specified player and date
     *
     * @param uuid The UUID of the player
     * @param date The date to check
     * @return If the record exists
     */
    private boolean playtimeRecordExists(UUID uuid, java.sql.Date date) {
        Document query = new Document("uuid", uuid.toString()).append("date", date);
        return this.database.getCollection("playtime_history").find(query).first() != null;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/storage/types/Mysql.java">
package nl.thedutchruben.playtime.core.storage.types;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.Settings;
import nl.thedutchruben.playtime.core.objects.Milestone;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;
import nl.thedutchruben.playtime.core.storage.SqlStatements;
import nl.thedutchruben.playtime.core.storage.Storage;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import java.util.concurrent.CompletableFuture;

/**
 * The mysql storage
 */
public class Mysql extends Storage {
    private HikariDataSource ds;
    private Connection connection;

    private String tablePrefix = "";

    /**
     * Get the name of the storage type
     *
     * @return The name of the storage type
     */
    @Override
    public String getName() {
        return "mysql";
    }

    /**
     * Setup the storage such as the database connection
     */
    @Override
    public boolean setup() {
        this.tablePrefix = Settings.STORAGE_MYSQL_PREFIX.getValueAsString();
        HikariConfig config = getHikariConfig();
        ds = new HikariDataSource(config);

        try {
            this.connection = ds.getConnection();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        for (String statement : SqlStatements.getStatements(Settings.STORAGE_MYSQL_PREFIX.getValueAsString(), true)) {
            try (PreparedStatement preparedStatement = connection.prepareStatement(statement)) {
                preparedStatement.executeUpdate();
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while creating table in database: " + sqlException.getMessage());
            }
        }
        return ds.isRunning();
    }

    private static HikariConfig getHikariConfig() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl(Settings.STORAGE_MYSQL_DRIVER.getValueAsString() + Settings.STORAGE_MYSQL_HOST.getValueAsString() + ":" + Settings.STORAGE_MYSQL_PORT.getValueAsInteger() + "/" + Settings.STORAGE_MYSQL_SCHEMA.getValueAsString());
        config.setConnectionTestQuery("SELECT 1");
        config.setUsername(Settings.STORAGE_MYSQL_USERNAME.getValueAsString());
        config.setPassword(Settings.STORAGE_MYSQL_PASSWORD.getValueAsString());
        config.setMaximumPoolSize(Settings.STORAGE_MYSQL_POOL.getValueAsInteger());

        config.setPoolName("PlaytimePool");
        config.addDataSourceProperty("useSSl", (Settings.STORAGE_MYSQL_SSL.getValueAsBoolean()));
        config.setThreadFactory(r -> {
            Thread thread = new Thread(r);
            thread.setName("Playtime-Database-Thread-" + thread.getId());
            return thread;
        });

        return config;
    }

    /**
     * Get the table name with the prefix
     *
     * @param name The name of the table
     * @return The table name with the prefix
     */
    public String getTableName(String name) {
        return "`" + this.tablePrefix + name + "`";
    }

    /**
     * Stops the storage such things as the database connection
     */
    @Override
    public void stop() {
        ds.close();
    }

    /**
     * Load the user from the storage
     *
     * @param uuid The uuid of the player
     * @return The playtime user
     */
    @Override
    public CompletableFuture<PlaytimeUser> loadUser(UUID uuid) {
        return CompletableFuture.supplyAsync(() -> {

            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM " + getTableName("playtime") + " WHERE `uuid` = ?")) {
                preparedStatement.setString(1, uuid.toString());
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return new PlaytimeUser(uuid.toString(), resultSet.getString("name"), resultSet.getLong("time"));
                    }
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while loading user from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Load user loaded by name
     *
     * @param name
     * @return
     */
    @Override
    public CompletableFuture<PlaytimeUser> loadUserByName(String name) {
        return CompletableFuture.supplyAsync(() -> {

            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM " + getTableName("playtime") + " WHERE `name` = ?")) {
                preparedStatement.setString(1, name);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return new PlaytimeUser(resultSet.getString("uuid"), resultSet.getString("name"), resultSet.getLong("time"));
                    }
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while loading user from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Save the user to the storage
     *
     * @param playtimeUser The playtime user
     * @return If the user is saved
     */
    @Override
    public CompletableFuture<Boolean> saveUser(PlaytimeUser playtimeUser) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("UPDATE " + getTableName("playtime") + " SET `name` = ?, `time` = ? WHERE `uuid` = ?")) {
                preparedStatement.setString(1, playtimeUser.getName());
                preparedStatement.setFloat(2, playtimeUser.getTime());
                preparedStatement.setString(3, playtimeUser.getUUID().toString());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while saving user to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Create the user
     *
     * @param playtimeUser
     * @return
     */
    @Override
    public CompletableFuture<Boolean> createUser(PlaytimeUser playtimeUser) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("INSERT INTO " + getTableName("playtime") + " (`uuid`, `name`, `time`) VALUES (?, ?, ?)")) {
                preparedStatement.setString(1, playtimeUser.getUUID().toString());
                preparedStatement.setString(2, playtimeUser.getName());
                preparedStatement.setFloat(3, playtimeUser.getTime());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while creating user in database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Get the top users
     *
     * @param amount The amount of users
     * @param skip   The amount of users to skip
     * @return The list of users
     */
    @Override
    public CompletableFuture<List<PlaytimeUser>> getTopUsers(int amount, int skip) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM " + getTableName("playtime") + " ORDER BY `time` DESC LIMIT ? OFFSET ?")) {
                preparedStatement.setInt(1, amount);
                preparedStatement.setInt(2, skip);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    List<PlaytimeUser> playtimeUsers = new ArrayList<>();
                    while (resultSet.next()) {
                        playtimeUsers.add(new PlaytimeUser(resultSet.getString("uuid"), resultSet.getString("name"), resultSet.getLong("time")));
                    }
                    return playtimeUsers;
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while getting top users from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Get the top user
     *
     * @param place The place of the user
     * @return The user
     */
    @Override
    public CompletableFuture<PlaytimeUser> getTopUser(int place) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM " + getTableName("playtime") + " ORDER BY `time` DESC LIMIT 1 OFFSET ?")) {
                preparedStatement.setInt(1, place);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return new PlaytimeUser(resultSet.getString("uuid"), resultSet.getString("name"), resultSet.getLong("time"));
                    }
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while getting top user from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Get the milestones
     *
     * @return The list of milestones
     */
    @Override
    public CompletableFuture<List<Milestone>> getMilestones() {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM " + getTableName("milestones"))) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    List<Milestone> milestones = new ArrayList<>();
                    while (resultSet.next()) {
                        milestones.add(getGson().fromJson(resultSet.getString("data"), Milestone.class));
                    }
                    return milestones;
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while getting milestones from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Save the milestone
     *
     * @param milestone The milestone to save
     * @return If the milestone is saved
     */
    @Override
    public CompletableFuture<Boolean> saveMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("INSERT INTO " + getTableName("milestones") + "(`name`, `data`) VALUES (?,?)")) {
                preparedStatement.setString(1, milestone.getMilestoneName());
                preparedStatement.setString(2, getGson().toJson(milestone));
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while saving milestone to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Delete the milestone
     *
     * @param milestone The milestone to delete
     * @return If the milestone is deleted
     */
    @Override
    public CompletableFuture<Boolean> deleteMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("DELETE FROM " + getTableName("milestones") + " WHERE `name`=?")) {
                preparedStatement.setString(1, milestone.getMilestoneName());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while deleting milestone from database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Update the milestone
     *
     * @param milestone The milestone to update
     * @return If the milestone is updated
     */
    @Override
    public CompletableFuture<Boolean> updateMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("UPDATE " + getTableName("milestones") + " SET `data`=? WHERE `name`=?")) {
                preparedStatement.setString(1, getGson().toJson(milestone));
                preparedStatement.setString(2, milestone.getMilestoneName());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while updating milestone to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Get the repeating milestones
     *
     * @return The list of repeating milestones
     */
    @Override
    public CompletableFuture<List<RepeatingMilestone>> getRepeatingMilestones() {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM " + getTableName("repeating_milestones"))) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    List<RepeatingMilestone> repeatingMilestones = new ArrayList<>();
                    while (resultSet.next()) {
                        repeatingMilestones.add(getGson().fromJson(resultSet.getString("data"), RepeatingMilestone.class));
                    }
                    return repeatingMilestones;
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while getting repeating milestones from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Save the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to save
     * @return If the repeating milestone is saved
     */
    @Override
    public CompletableFuture<Boolean> saveRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("INSERT INTO " + getTableName("repeating_milestones") + "`(`name`, `data`) VALUES (?,?)")) {
                preparedStatement.setString(1, repeatingMilestone.getMilestoneName());
                preparedStatement.setString(2, getGson().toJson(repeatingMilestone));
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while saving repeating milestone to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Delete the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to delete
     * @return If the repeating milestone is deleted
     */
    @Override
    public CompletableFuture<Boolean> deleteRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("DELETE FROM " + getTableName("repeating_milestones") + " WHERE `name`=?")) {
                preparedStatement.setString(1, repeatingMilestone.getMilestoneName());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while deleting repeating milestone from database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Update the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to update
     * @return If the repeating milestone is updated
     */
    @Override
    public CompletableFuture<Boolean> updateRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("UPDATE " + getTableName("repeating_milestones") + " SET `data`=? WHERE `name`=?")) {
                preparedStatement.setString(1, getGson().toJson(repeatingMilestone));
                preparedStatement.setString(2, repeatingMilestone.getMilestoneName());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while updating repeating milestone to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * @param uuid
     * @param event
     * @param time
     * @return
     */
    @Override
    public CompletableFuture<Boolean> addPlaytimeHistory(UUID uuid, Event event, int time) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection.prepareStatement(
                    "INSERT INTO " + getTableName("playtime_history") + " (`uuid`, `time`, `date`) VALUES (?, ?, ?)")) {
                preparedStatement.setString(1, uuid.toString());
                preparedStatement.setInt(2, time);
                preparedStatement.setDate(4, new Date(new java.util.Date().getTime()));
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/milestones/commands/MileStoneCommand.java">
package nl.thedutchruben.playtime.modules.milestones.commands;

import net.md_5.bungee.api.chat.ClickEvent;
import net.md_5.bungee.api.chat.TextComponent;
import nl.thedutchruben.mccore.spigot.commands.Command;
import nl.thedutchruben.mccore.spigot.commands.Default;
import nl.thedutchruben.mccore.spigot.commands.SubCommand;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.events.milestone.MilestoneCreateEvent;
import nl.thedutchruben.playtime.core.events.milestone.MilestoneDeleteEvent;
import nl.thedutchruben.playtime.core.events.milestone.MilestoneUpdateEvent;
import nl.thedutchruben.playtime.core.objects.Milestone;
import nl.thedutchruben.playtime.core.translations.Messages;
import nl.thedutchruben.playtime.utils.Replacement;
import org.bukkit.Bukkit;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Command(command = "milestone", description = "Main milestone command", permission = "playtime.milestone", console = true)
public class MileStoneCommand {

    @SubCommand(
        subCommand = "create",
        description = "Create a new milestone",
        usage = "<name> <time>",
        permission = "playtime.milestone.create",
        console = true,
        minParams = 3,
        maxParams = 3)
    public void create(CommandSender commandSender, List<String> args) {
        Milestone milestone = new Milestone();
        milestone.setMilestoneName(args.get(1));
        long time = getTime(args.get(2));
        milestone.setOnlineTime(time);
        Playtime.getInstance().getStorage().saveMilestone(milestone).thenAcceptAsync(aBoolean -> {
            if (aBoolean) {
                commandSender.sendMessage(Messages.MILESTONE_CREATED.getMessage());
                Playtime.getInstance().getMilestones().add(milestone);
                Bukkit.getPluginManager().callEvent(new MilestoneCreateEvent(milestone));
            } else {
                commandSender.sendMessage(Messages.MILESTONE_COULD_NOT_BE_CREATED.getMessage());
            }
        });
    }

    @SubCommand(
        subCommand = "delete",
        description = "Delete a milestone",
        usage = "<milestone>",
        permission = "playtime.milestone.delete",
        minParams = 2,
        maxParams = 2,
        console = true
    )
    public void delete(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        Playtime.getInstance().getStorage().deleteMilestone(milestone).thenAcceptAsync(aBoolean -> {
            if (aBoolean) {
                commandSender.sendMessage(Messages.MILESTONE_REMOVED.getMessage());
                Bukkit.getPluginManager().callEvent(new MilestoneDeleteEvent(milestone));
                Playtime.getInstance().getMilestones().removeIf(milestone1 -> milestone1.getMilestoneName().equals(milestone.getMilestoneName()));
            } else {
                commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            }
        });
    }

    @Default
    @SubCommand(
        subCommand = "list",
        description = "List all milestones",
        permission = "playtime.milestone.list",
        console = true
    )
    public void list(CommandSender commandSender, List<String> args) {
        List<Milestone> milestones = Playtime.getInstance().getMilestones();
        commandSender.sendMessage("Milestones: ");
        for (Milestone milestone : milestones) {
            TextComponent message = new TextComponent(Messages.MILESTONE_LIST.getMessage(
                new Replacement("%MILESTONE_NAME%", milestone.getMilestoneName()),
                new Replacement("%D%", String.valueOf(TimeUnit.SECONDS.toDays(milestone.getOnlineTime()))),
                new Replacement("%H%", String.valueOf(TimeUnit.SECONDS.toHours(milestone.getOnlineTime()) % 24)),
                new Replacement("%M%", String.valueOf(TimeUnit.SECONDS.toMinutes(milestone.getOnlineTime()) % 60)),
                new Replacement("%S%", String.valueOf(TimeUnit.SECONDS.toSeconds(milestone.getOnlineTime()) % 60))
            ));
            message.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/milestone info " + milestone.getMilestoneName()));
            commandSender.spigot().sendMessage(message);
        }
    }

    @SubCommand(
        subCommand = "info",
        description = "Get info about a milestone",
        usage = "<milestone>",
        permission = "playtime.milestone.info",
        minParams = 2,
        maxParams = 2,
        console = true
    )
    public void info(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        commandSender.sendMessage("Milestone: " + milestone.getMilestoneName());
        commandSender.sendMessage(" Time: " + milestone.getOnlineTime());
        commandSender.sendMessage(" Rewards("+ milestone.getItemStacks().size() +"): ");
        milestone.getItemStacks().forEach(map -> commandSender.sendMessage("  " + map.toString()));
        commandSender.sendMessage(" Commands("+ milestone.getCommands().size() +"): ");
        milestone.getCommands().forEach(command -> commandSender.sendMessage("  " + command));
        commandSender.sendMessage(" Messages("+ milestone.getMessages().size() +"): ");
        milestone.getMessages().forEach(message -> commandSender.sendMessage("  " + message));
        commandSender.sendMessage(" Firework show: " + milestone.isFireworkShow());
        if (milestone.isFireworkShow()) {
            commandSender.sendMessage(" Firework show delay: " + milestone.getFireworkShowSecondsBetween());
            commandSender.sendMessage(" Firework show amount: " + milestone.getFireworkShowAmount());
        }
    }

    @SubCommand(
        subCommand = "test",
        description = "Execute the rewards of a milestone on yourself",
        usage = "<milestone>",
        permission = "playtime.milestone.test",
        minParams = 2,
        maxParams = 2
    )
    public void test(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        milestone.apply((Player) commandSender);
        commandSender.sendMessage(Messages.MILESTONE_REWARDS_APPLIED.getMessage());
    }

    @SubCommand(
        subCommand = "addItemToMilestone",
        description = "Add the item in your main hand to the milestone",
        usage = "<milestone>",
        permission = "playtime.milestone.addItemToMilestone",
        minParams = 2,
        maxParams = 2
    )
    public void addItemToMilestone(CommandSender commandSender, List<String> args) {
        Player player = (Player) commandSender;
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        milestone.addItemStack(player.getInventory().getItemInMainHand());
        Playtime.getInstance().getStorage().updateMilestone(milestone);
        commandSender.sendMessage(Messages.MILESTONE_ITEM_ADDED.getMessage());
        Bukkit.getPluginManager().callEvent(new MilestoneUpdateEvent(milestone));
    }

    @SubCommand(
        subCommand = "addCommand",
        description = "Add a command to the milestone",
        usage = "<milestone> <command>",
        permission = "playtime.milestone.addCommand",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void addCommandToMilestone(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        String command = String.join(" ", args.subList(2, args.size()));
        milestone.addCommand(command);
        Playtime.getInstance().getStorage().updateMilestone(milestone);
        commandSender.sendMessage(Messages.MILESTONE_COMMAND_ADDED.getMessage());
        Bukkit.getPluginManager().callEvent(new MilestoneUpdateEvent(milestone));
    }

    @SubCommand(
        subCommand = "removeCommand",
        description = "Remove a command from the milestone",
        usage = "<milestone> <command>",
        permission = "playtime.milestone.removeCommand",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void removeCommandFromMilestone(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        String command = String.join(" ", args.subList(1, args.size()));
        milestone.removeCommand(command);
        Playtime.getInstance().getStorage().updateMilestone(milestone);
        commandSender.sendMessage(Messages.MILESTONE_COMMAND_REMOVED.getMessage());
        Bukkit.getPluginManager().callEvent(new MilestoneUpdateEvent(milestone));
    }

    @SubCommand(
        subCommand = "togglefirework",
        description = "Toggle the firework for a milestone",
        usage = "<milestone>",
        permission = "playtime.milestone.togglefirework",
        minParams = 2,
        maxParams = 2,
        console = true
    )
    public void toggleFirework(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        milestone.setFireworkShow(!milestone.isFireworkShow());
        Playtime.getInstance().getStorage().updateMilestone(milestone);
        commandSender.sendMessage(Messages.MILESTONE_FIREWORK_TOGGLED.getMessage(new Replacement("<state>", milestone.isFireworkShow() ? "enabled" : "disabled")));
        Bukkit.getPluginManager().callEvent(new MilestoneUpdateEvent(milestone));
    }

    @SubCommand(
        subCommand = "setfireworkamount",
        description = "Set the amount of firework for a milestone",
        usage = "<milestone> <amount>",
        permission = "playtime.milestone.setfireworkamount",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void setFireworkAmount(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        int amount = Integer.parseInt(args.get(2));
        milestone.setFireworkShowAmount(amount);
        Playtime.getInstance().getStorage().updateMilestone(milestone);
        commandSender.sendMessage(Messages.MILESTONE_SET_FIREWORK_AMOUNT.getMessage(new Replacement("<amount>", String.valueOf(amount))));
        Bukkit.getPluginManager().callEvent(new MilestoneUpdateEvent(milestone));
    }

    @SubCommand(
        subCommand = "setfireworkdelay",
        description = "Set the delay between fireworks for a milestone",
        usage = "<milestone> <time in seconds>",
        permission = "playtime.milestone.setfireworkdelay",
        minParams = 4,
        maxParams = 4,
        console = true
    )
    public void setFireworkDelay(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        int delay = Integer.parseInt(args.get(2));
        milestone.setFireworkShowSecondsBetween(delay);
        Playtime.getInstance().getStorage().updateMilestone(milestone);
        commandSender.sendMessage(Messages.MILESTONE_SET_FIREWORK_DELAY.getMessage(new Replacement("<amount>", String.valueOf(delay))));
        Bukkit.getPluginManager().callEvent(new MilestoneUpdateEvent(milestone));
    }

    @SubCommand(
        subCommand = "addMessage",
        description = "Add a message to a milestone",
        usage = "<milestone> <message>",
        permission = "playtime.milestone.addMessage",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void addMessage(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        String message = String.join(" ", args.subList(2, args.size()));
        milestone.addMessage(message);
        Playtime.getInstance().getStorage().updateMilestone(milestone);
        commandSender.sendMessage(Messages.MILESTONE_MESSAGE_ADDED.getMessage());
        Bukkit.getPluginManager().callEvent(new MilestoneUpdateEvent(milestone));
    }

    @SubCommand(
        subCommand = "removeMessage",
        description = "Remove a message from a milestone",
        usage = "<milestone> <message>",
        permission = "playtime.milestone.removeMessage",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void removeMessage(CommandSender commandSender, List<String> args) {
        Milestone milestone = Milestone.getMilestone(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        String message = String.join(" ", args.subList(2, args.size()));
        milestone.removeMessage(message);
        Playtime.getInstance().getStorage().updateMilestone(milestone);
        commandSender.sendMessage(Messages.MILESTONE_MESSAGE_REMOVED.getMessage());
        Bukkit.getPluginManager().callEvent(new MilestoneUpdateEvent(milestone));
    }

    private Map<String, Integer> parseTime(String time) {
        Pattern pattern = Pattern.compile("(\\d+)([A-Za-z]+)");
        Matcher matcher = pattern.matcher(time);
        Map<String, Integer> timeMap = new HashMap<>();

        while (matcher.find()) {
            int value = Integer.parseInt(matcher.group(1));
            String unit = matcher.group(2);
            timeMap.put(unit, value);
        }
        return timeMap;
    }

    private long getTime(String time) {
        AtomicLong parsedTime = new AtomicLong();
        Map<String, Integer> timeMap = parseTime(time);
        timeMap.forEach((unit, value) -> {
            switch (unit.toLowerCase(Locale.ROOT)) {
                case "s":
                case "second":
                case "seconds":
                    parsedTime.addAndGet(TimeUnit.SECONDS.toSeconds(value));
                    break;
                case "m":
                case "minute":
                case "minutes":
                    parsedTime.addAndGet(TimeUnit.MINUTES.toSeconds(value));
                    break;
                case "h":
                case "hour":
                case "hours":
                    parsedTime.addAndGet(TimeUnit.HOURS.toSeconds(value));
                    break;
                case "d":
                case "day":
                case "days":
                    parsedTime.addAndGet(TimeUnit.DAYS.toSeconds(value));
                    break;
                case "w":
                case "week":
                case "weeks":
                    parsedTime.addAndGet(TimeUnit.DAYS.toSeconds(value * 7L));
                    break;
                case "mo":
                case "month":
                case "months":
                    parsedTime.addAndGet(TimeUnit.DAYS.toSeconds(value * 30));
                    break;
                case "y":
                case "year":
                case "years":
                    parsedTime.addAndGet(TimeUnit.DAYS.toSeconds(value * 365L));
                    break;
                default:
                    parsedTime.addAndGet(TimeUnit.SECONDS.toSeconds(value));
            }
        });

        return parsedTime.get();
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/milestones/listeners/UpdatePlaytimeListener.java">
package nl.thedutchruben.playtime.modules.milestones.listeners;

import nl.thedutchruben.mccore.spigot.listeners.TDRListener;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.events.player.AsyncPlaytimePlayerUpdatePlaytimeEvent;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;

import java.util.logging.Level;

/**
 * Listener class that handles the update of player playtime milestones.
 */
@TDRListener
public class UpdatePlaytimeListener implements Listener {

    /**
     * Event handler for updating player playtime.
     *
     * @param event The event that contains the old and new playtime of the player.
     */
    @EventHandler
    public void updatePlaytime(AsyncPlaytimePlayerUpdatePlaytimeEvent event) {
        // todo move to debug message
//        Playtime.getPlugin().getLogger().log(Level.INFO, "Updating playtime for player " + event.getUser().getBukkitPlayer().getName() + " from " + event.getOldPlaytime() + " to " + event.getNewPlaytime());
        Playtime.getInstance().getMilestones().forEach(milestone -> Playtime.getPlugin().getLogger().log(Level.INFO, "Milestone: " + milestone.getOnlineTimeInMilliseconds()));
        // Check and apply milestones that are not repeating
        Playtime.getInstance().getMilestones().stream()
                .filter(milestone -> milestone.getOnlineTimeInMilliseconds() <= event.getNewPlaytime()
                        && milestone.getOnlineTimeInMilliseconds() > event.getOldPlaytime())
                .forEach(milestone -> milestone.apply(event.getUser().getBukkitPlayer()));

        // Check and apply repeating milestones
        for (float i = event.getOldPlaytime(); i < event.getNewPlaytime(); i++) {
            if (i > 0) {
                float finalI = i;
                Playtime.getInstance().getRepeatingMilestones().stream()
                        .filter(repeatingMilestone -> finalI % (repeatingMilestone.getOnlineTimeInMilliseconds() * 1000) == 1)
                        .forEach(repeatingMilestone -> repeatingMilestone.apply(event.getUser().getBukkitPlayer()));
            }
        }
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/Playtime.java">
package nl.thedutchruben.playtime;

import lombok.Getter;
import nl.thedutchruben.mccore.Mccore;
import nl.thedutchruben.mccore.config.UpdateCheckerConfig;
import nl.thedutchruben.mccore.spigot.commands.CommandRegistry;
import nl.thedutchruben.mccore.utils.config.FileManager;
import nl.thedutchruben.playtime.core.Settings;
import nl.thedutchruben.playtime.core.objects.Milestone;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;
import nl.thedutchruben.playtime.core.storage.Storage;
import nl.thedutchruben.playtime.core.storage.exceptions.StorageTypeNotFoundException;
import nl.thedutchruben.playtime.core.storage.types.Mongodb;
import nl.thedutchruben.playtime.core.storage.types.Mysql;
import nl.thedutchruben.playtime.core.storage.types.SqlLite;
import nl.thedutchruben.playtime.core.storage.types.Yaml;
import nl.thedutchruben.playtime.core.translations.Messages;
import nl.thedutchruben.playtime.extentions.BStatsExtension;
import nl.thedutchruben.playtime.extentions.PlaceholderAPIExtension;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.*;
import java.util.logging.Level;
import java.util.stream.Collectors;

/**
 * Tdrplaytime is the playtime plugin you need to track the time of your players
 * and reward them for beeing online
 */
public class Playtime {

    /**
     * Instance of playtime
     */
    @Getter
    private static Playtime instance;

    /**
     * Instance of the JavaPlugin
     */
    @Getter
    private static JavaPlugin plugin;
    /**
     * Cache of the PlaytimeUsers
     */
    @Getter
    public Map<UUID, PlaytimeUser> playtimeUsers = new HashMap<>();
    /**
     * The selected storage method
     */
    @Getter
    public Storage storage;
    /**
     * Cache of the Milestones
     */
    @Getter
    public List<Milestone> milestones;
    /**
     * Cache of the RepeatingMilestones
     */
    @Getter
    public List<RepeatingMilestone> repeatingMilestones;
    /**
     * Instance of the core
     */
    @Getter
    private Mccore mccore;
    /**
     * Instance of the FileManager
     */
    @Getter
    private FileManager fileManager;

    public Playtime(JavaPlugin playTimePlugin) {
        plugin = playTimePlugin;
    }

    public void onEnable(JavaPlugin playTimePlugin) {
        instance = this;
        this.fileManager = new FileManager(plugin);

        Settings.setupDefaults();
        Messages.setupDefaults();

        //set up the storage
        this.storage = getSelectedStorage();
        this.storage.setup();

        // Register the mc core
        mccore = new Mccore(plugin, "tdrplaytime", "623a25c0ea9f206b0ba31f3f", Mccore.PluginType.SPIGOT);
        if (Settings.UPDATE_CHECK.getValueAsBoolean()) {
            mccore.startUpdateChecker(new UpdateCheckerConfig("tdrplaytime.admin", 60));
        }

        mccore.registerCompleters();
        // Register the bstats
        new BStatsExtension().startBStats(playTimePlugin);

        // Register the placeholder api
        if (Bukkit.getPluginManager().isPluginEnabled("PlaceholderAPI")) {
            new PlaceholderAPIExtension().register();
        }

        // Load the messages
        this.storage.getMilestones().thenAccept(milestones -> this.milestones = milestones).join();
        getPlugin().getLogger().log(Level.INFO, "Loaded {0} milestones", Optional.of(this.milestones.size()));
        this.storage.getRepeatingMilestones().thenAccept(repeatingMilestones -> this.repeatingMilestones = repeatingMilestones).join();
        getPlugin().getLogger().log(Level.INFO, "Loaded {0} repeatingmilestones", Optional.of(this.repeatingMilestones.size()));

        for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {
            UUID playerUUID = onlinePlayer.getUniqueId();
            Playtime.getInstance().getStorage().loadUser(playerUUID).thenAccept(playtimeUser -> {
                if (playtimeUser == null) {
                    playtimeUser = new PlaytimeUser(playerUUID.toString(), onlinePlayer.getName());
                    Playtime.getInstance().getStorage().createUser(playtimeUser);
                }
                Playtime.getInstance().getPlaytimeUsers().put(playerUUID, playtimeUser);
            });
        }

        CommandRegistry.getTabCompletable().put("milestone", commandSender ->
                this.milestones.stream().map(Milestone::getMilestoneName)
                        .collect(Collectors.toSet())
        );

        CommandRegistry.getTabCompletable().put("repeatingMilestone", commandSender ->
                this.repeatingMilestones.stream().map(RepeatingMilestone::getMilestoneName)
                        .collect(Collectors.toSet())
        );
    }

    public Storage getSelectedStorage() {
        String storageType = Settings.STORAGE_TYPE.getValueAsString().toLowerCase();
        switch (storageType) {
            case "mongodb":
            case "mongo":
                return new Mongodb();
            case "mysql":
            case "sql":
            case "mariadb":
                return new Mysql();
            case "yaml":
            case "yml":
                getPlugin().getLogger().log(Level.WARNING, "Yaml storage is not recommended. If you have a lot of players it can cause lag. Please use sqlLite, mysql or mongodb");
                return new Yaml();
            case "sqlite":
            case "sqllite":
                return new SqlLite();
            case "postgresql":
                throw new StorageTypeNotFoundException("Postgresql is not supported yet");
            case "h2":
                throw new StorageTypeNotFoundException("H2 is not supported yet");
            default:
                throw new StorageTypeNotFoundException("Storage type " + storageType + " not found");
        }
    }

    public void onDisable() {

        for (PlaytimeUser playtimeUser : playtimeUsers.values()) {
            storage.saveUser(playtimeUser);
        }

        this.storage.stop();
        this.milestones.clear();
        this.repeatingMilestones.clear();
        Messages.getMessages().clear();
    }

    /**
     * Get the playtime user from the cache or load it from the storage
     *
     * @param uuid The uuid of the player
     * @return The playtime user
     */
    public Optional<PlaytimeUser> getPlaytimeUser(UUID uuid) {
        return Optional.of(playtimeUsers.get(uuid));
    }

    /**
     * Get a playtime user by name
     *
     * @param name The name of the player
     * @return The playtime user if exist
     */
    public Optional<PlaytimeUser> getPlaytimeUser(String name) {
        return playtimeUsers.values().stream().filter(item -> item.getName().equalsIgnoreCase(name)).findFirst();
    }
}
</file>

<file path=".github/workflows/notification.yaml">
name: Discord Notification

on:
  push:
    branches:
      - main
      - master

jobs:
  report-status:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Java JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          java-package: jdk
          architecture: x64
      - name: Run Discord Webhook
        uses: baked-libs/discord-webhook@main
        with:
          id: ${{ secrets.DISCORD_NOTIFICATION_ID }}
          token: ${{ secrets.DISCORD_NOTIFICATION_TOKEN }}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/DependencyLoader.java">
package nl.thedutchruben.playtime.core;

import lombok.Getter;
import net.byteflux.libby.BukkitLibraryManager;
import net.byteflux.libby.Library;
import net.byteflux.libby.logging.LogLevel;
import org.bukkit.plugin.Plugin;

import java.util.ArrayList;
import java.util.List;

public class DependencyLoader {

    public static void load(Plugin plugin) {
        plugin.getLogger().info("Loading dependencies");

        BukkitLibraryManager libraryManager = new BukkitLibraryManager(plugin);
        // setup repo's
        libraryManager.addMavenCentral();
        libraryManager.addJitPack();
        libraryManager.addRepository("https://maven.thedutchservers.com/releases");
        libraryManager.setLogLevel(LogLevel.INFO);

        //build array with all the dependencies as liberies
        List<Library> libraries = new ArrayList<>();
        for (Dependency dependency : Dependency.values()) {
            Library.Builder builder = Library.builder()
                    .groupId(dependency.getGroupId()) // "{}" is replaced with ".", useful to avoid unwanted changes made by maven-shade-plugin
                    .artifactId(dependency.getArtifactID())
                    .version(dependency.getVersion());

            if (dependency.getRelocation() != null) {
                builder.relocate(dependency.getGroupId(), dependency.getRelocation());
            }
            libraries.add(builder.build());
        }
        // Load all the dependencies
        for (Library library : libraries) {
            libraryManager.loadLibrary(library);
        }
    }

    @Getter
    private enum Dependency {
        BSON("org{}mongodb", "bson", "5.2.1", null),
        MONGODB("org{}mongodb", "mongodb-driver-sync", "5.2.1", null),
        MONGODB_CORE("org{}mongodb", "mongodb-driver-core", "5.2.1", null),
        MCCORE("nl{}thedutchruben", "mccore", "1.4.9", null),
        BSTATS("org{}bstats", "bstats-bukkit", "3.1.0", "nl{}thedutchruben{}playtime{}bstats"),
        BSTATS_BASE("org{}bstats", "bstats-base", "3.1.0", "nl{}thedutchruben{}playtime{}bstats"),
        HIKARI_CP("com{}zaxxer", "HikariCP", "6.2.1", null);

        public final String version;
        public final String relocation;
        private final String groupId;
        private final String artifactID;

        Dependency(String groupId, String artifactID, String version, String relocation) {
            this.groupId = groupId;
            this.artifactID = artifactID;
            this.version = version;
            this.relocation = relocation;
        }
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/objects/RepeatingMilestone.java">
package nl.thedutchruben.playtime.core.objects;

import com.google.gson.annotations.SerializedName;
import lombok.Getter;
import lombok.Setter;
import nl.thedutchruben.mccore.utils.firework.FireworkUtil;
import nl.thedutchruben.mccore.utils.message.MessageUtil;
import nl.thedutchruben.playtime.Playtime;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @author Ruben
 * @version 1.0
 */
public class RepeatingMilestone {

    /**
     * The list of items to give the player.
     */
    private transient List<ItemStack> _itemStackObjects;

    /**
     * The name of the milestone.
     */
    @Setter
    @SerializedName("_id")
    private String milestoneName;
    @Setter
    @Getter
    @SerializedName("online_time")
    private long onlineTime;
    @SerializedName("item_stacks")
    private List<Map<String, Object>> itemStacks;
    @SerializedName("commands")
    private List<String> commands;
    @SerializedName("firework_show")
    private boolean fireworkShow = false;
    @SerializedName("firework_show_amount")
    private int fireworkShowAmount = 1;
    @Setter
    @SerializedName("firework_show_seconds_between_firework")
    private int fireworkShowSecondsBetween = 0;
    @Getter
    @SerializedName("normal_milestone_override_me")
    private boolean overrideMe = false;
    @SerializedName("messages")
    private List<String> messages;

    /**
     * Apply the milestone on the player
     *
     * @param player The player to apply the milestone to
     */
    public void apply(Player player) {
        if (itemStacks != null) {
            if (_itemStackObjects == null) {
                _itemStackObjects = new ArrayList<>();
                for (Map<String, Object> itemStack : itemStacks) {
                    _itemStackObjects.add(ItemStack.deserialize(itemStack));
                }
            }

            for (ItemStack itemStack : _itemStackObjects) {
                player.getInventory().addItem(itemStack);
            }
        }

        if (commands != null) {
            Bukkit.getScheduler().runTask(Playtime.getPlugin(), () -> {
                for (String command : commands) {
                    Bukkit.dispatchCommand(Bukkit.getConsoleSender(),
                            command.replaceAll("%playername%", player.getName())
                                    .replaceAll("%player_name%", player.getName())
                                    .replaceAll("%playeruuid%", player.getUniqueId().toString())
                                    .replaceAll("%player_uuid%", player.getUniqueId().toString()));
                }
            });
        }

        if (messages != null) {
            messages.forEach(s -> {
                String formattedString = MessageUtil.translateHexColorCodes("<", ">", ChatColor.translateAlternateColorCodes('&', s));
                player.sendMessage(formattedString);
            });
        }

        if (fireworkShow) {
            Bukkit.getScheduler().runTaskAsynchronously(Playtime.getPlugin(), () -> {
                for (int i = 0; i < fireworkShowAmount; i++) {
                    Bukkit.getScheduler().runTask(Playtime.getPlugin(), () -> {
                        FireworkUtil.spawnRandomFirework(player.getLocation());
                    });
                    try {
                        Thread.sleep(fireworkShowSecondsBetween * 1000L);
                    } catch (InterruptedException e) {
                        Playtime.getPlugin().getLogger().warning("Error while sleeping the thread :" + e.getMessage());
                    }
                }
            });

        }
    }

    public List<Map<String, Object>> getItemStacks() {
        if (itemStacks == null) {
            itemStacks = new ArrayList<>();
        }
        return itemStacks;
    }

    public void setItemStacks(List<Map<String, Object>> itemStacks) {
        this.itemStacks = itemStacks;
    }

    public List<String> getCommands() {
        if (commands == null) {
            commands = new ArrayList<>();
        }
        return commands;
    }

    public void setCommands(List<String> commands) {
        this.commands = commands;
    }

    public String getMilestoneName() {
        return milestoneName;
    }

    public List<String> getMessages() {
        if (messages == null)
            messages = new ArrayList<>();

        return messages;
    }

    public long getOnlineTimeInMilliseconds(){
        return onlineTime * 1000;
    }

    public void setMessages(List<String> messages) {
        this.messages = messages;
    }

    public void setItemStackObjects(List<ItemStack> itemStackObjects) {
        this._itemStackObjects = itemStackObjects;
    }

    public boolean isFireworkShow() {
        return fireworkShow;
    }

    public void setFireworkShow(boolean fireworkShow) {
        this.fireworkShow = fireworkShow;
    }

    public int getFireworkShowAmount() {
        return fireworkShowAmount;
    }

    public void setFireworkShowAmount(int fireworkShowAmount) {
        this.fireworkShowAmount = fireworkShowAmount;
    }

    public int getFireworkShowSecondsBetween() {
        return fireworkShowSecondsBetween;
    }

    public void setOverrideMe(boolean overrideMe) {
        this.overrideMe = overrideMe;
    }

    /**
     * Add an ItemStack to the milestone
     * @param itemStack The itemStack to add
     */
    public void addItemStack(ItemStack itemStack) {
        getItemStacks().add(itemStack.serialize());
    }

    /**
     * Add a command to the milestone
     * @param command The command to add
     */
    public void addCommand(String command) {
        getCommands().add(command);
    }

    /**
     * Remove a command from the milestone
     * @param command The command to remove
     */
    public void removeCommand(String command) {
        getCommands().remove(command);
    }

    /**
     * Add a message to the milestone
     *
     * @param message The message to add
     */
    public void addMessage(String message) {
        getMessages().add(message);
    }

    /**
     * Remove a message from the milestone
     *
     * @param message The message to remove
     */
    public void removeMessage(String message) {
        getMessages().remove(message);
    }

    /**
     * Get a milestone by name
     *
     * @param name The name of the milestone
     * @see RepeatingMilestone
     * @return The milestone
     */
    public static RepeatingMilestone get(String name) {
        return Playtime.getInstance()
                .getRepeatingMilestones().stream()
                .filter(milestone -> milestone.getMilestoneName().equalsIgnoreCase(name))
                .findFirst().orElse(null);
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/storage/types/SqlLite.java">
package nl.thedutchruben.playtime.core.storage.types;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.Settings;
import nl.thedutchruben.playtime.core.objects.Milestone;
import nl.thedutchruben.playtime.core.objects.PlaytimeUser;
import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;
import nl.thedutchruben.playtime.core.storage.SqlStatements;
import nl.thedutchruben.playtime.core.storage.Storage;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import java.util.concurrent.CompletableFuture;

public class SqlLite extends Storage {
    private HikariDataSource ds;
    private Connection connection;

    /**
     * Get the name of the storage type
     *
     * @return The name of the storage type
     */
    @Override
    public String getName() {
        return "sqllite";
    }

    /**
     * Setup the storage such as the database connection
     */
    @Override
    public boolean setup() {
        HikariConfig config = getHikariConfig();
        ds = new HikariDataSource(config);

        try {
            this.connection = ds.getConnection();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        for (String statement : SqlStatements.getStatements(Settings.STORAGE_MYSQL_PREFIX.getValueAsString(), false)) {
            try (PreparedStatement preparedStatement = connection.prepareStatement(statement)) {
                preparedStatement.executeUpdate();
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while creating table in database: " + sqlException.getMessage());
            }
        }
        return false;
    }

    private static HikariConfig getHikariConfig() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:sqlite:" + Playtime.getPlugin().getDataFolder().getAbsolutePath() + "/playtime.db");
        config.setConnectionTestQuery("SELECT 1");
        config.addDataSourceProperty("cachePrepStmts", true);
        config.addDataSourceProperty("prepStmtCacheSize", "250");
        config.addDataSourceProperty("prepStmtCacheSwlLimit", "2048");
        config.setPoolName("PlaytimePool");
        config.setIdleTimeout(10000);
        config.setMaxLifetime(30000);
        config.setValidationTimeout(30000);
        config.setMaximumPoolSize(100);
        config.setMinimumIdle(10);
        config.setAllowPoolSuspension(false);
        config.setThreadFactory(r -> {
            Thread thread = new Thread(r);
            thread.setName("Playtime-Database-Thread-" + thread.getId());
            return thread;
        });
        return config;
    }

    /**
     * Stops the storage such things as the database connection
     */
    @Override
    public void stop() {
        try {
            this.connection.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        ds.close();
    }

    /**
     * Load the user from the storage
     *
     * @param uuid The uuid of the player
     * @return The playtime user
     */
    @Override
    public CompletableFuture<PlaytimeUser> loadUser(UUID uuid) {
        return CompletableFuture.supplyAsync(() -> {

            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM `playtime` WHERE `uuid` = ?")) {
                preparedStatement.setString(1, uuid.toString());
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return new PlaytimeUser(uuid.toString(), resultSet.getString("name"), resultSet.getLong("time"));
                    }
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while loading user from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Load user loaded by name
     *
     * @param name
     * @return
     */
    @Override
    public CompletableFuture<PlaytimeUser> loadUserByName(String name) {
        return CompletableFuture.supplyAsync(() -> {

            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM `playtime` WHERE `name` = ?")) {
                preparedStatement.setString(1, name);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return new PlaytimeUser(resultSet.getString("uuid"), resultSet.getString("name"), resultSet.getLong("time"));
                    }
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while loading user from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Save the user to the storage
     *
     * @param playtimeUser The playtime user
     * @return If the user is saved
     */
    @Override
    public CompletableFuture<Boolean> saveUser(PlaytimeUser playtimeUser) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("UPDATE `playtime` SET `name` = ?, `time` = ? WHERE `uuid` = ?")) {
                preparedStatement.setString(1, playtimeUser.getName());
                preparedStatement.setFloat(2, playtimeUser.getTime());
                preparedStatement.setString(3, playtimeUser.getUUID().toString());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while saving user to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Create the user
     *
     * @param playtimeUser
     * @return
     */
    @Override
    public CompletableFuture<Boolean> createUser(PlaytimeUser playtimeUser) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("INSERT INTO `playtime` (`uuid`, `name`, `time`) VALUES (?, ?, ?)")) {
                preparedStatement.setString(1, playtimeUser.getUUID().toString());
                preparedStatement.setString(2, playtimeUser.getName());
                preparedStatement.setFloat(3, playtimeUser.getTime());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while creating user in database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Get the top users
     *
     * @param amount The amount of users
     * @param skip   The amount of users to skip
     * @return The list of users
     */
    @Override
    public CompletableFuture<List<PlaytimeUser>> getTopUsers(int amount, int skip) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM `playtime` ORDER BY `time` DESC LIMIT ? OFFSET ?")) {
                preparedStatement.setInt(1, amount);
                preparedStatement.setInt(2, skip);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    List<PlaytimeUser> playtimeUsers = new ArrayList<>();
                    while (resultSet.next()) {
                        playtimeUsers.add(new PlaytimeUser(resultSet.getString("uuid"), resultSet.getString("name"), resultSet.getLong("time")));
                    }
                    return playtimeUsers;
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while getting top users from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Get the top user
     *
     * @param place The place of the user
     * @return The user
     */
    @Override
    public CompletableFuture<PlaytimeUser> getTopUser(int place) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM `playtime` ORDER BY `time` DESC LIMIT 1 OFFSET ?")) {
                preparedStatement.setInt(1, place);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return new PlaytimeUser(resultSet.getString("uuid"), resultSet.getString("name"), resultSet.getLong("time"));
                    }
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while getting top user from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Get the milestones
     *
     * @return The list of milestones
     */
    @Override
    public CompletableFuture<List<Milestone>> getMilestones() {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM `milestones`")) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    List<Milestone> milestones = new ArrayList<>();
                    while (resultSet.next()) {
                        milestones.add(getGson().fromJson(resultSet.getString("data"), Milestone.class));
                    }
                    return milestones;
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while getting milestones from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Save the milestone
     *
     * @param milestone The milestone to save
     * @return If the milestone is saved
     */
    @Override
    public CompletableFuture<Boolean> saveMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("INSERT INTO `milestones`(`name`, `data`) VALUES (?,?)")) {
                preparedStatement.setString(1, milestone.getMilestoneName());
                preparedStatement.setString(2, getGson().toJson(milestone));
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while saving milestone to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Delete the milestone
     *
     * @param milestone The milestone to delete
     * @return If the milestone is deleted
     */
    @Override
    public CompletableFuture<Boolean> deleteMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("DELETE FROM `milestones` WHERE `name`=?")) {
                preparedStatement.setString(1, milestone.getMilestoneName());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while deleting milestone from database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Update the milestone
     *
     * @param milestone The milestone to update
     * @return If the milestone is updated
     */
    @Override
    public CompletableFuture<Boolean> updateMilestone(Milestone milestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("UPDATE `milestones` SET `data`=? WHERE `name`=?")) {
                preparedStatement.setString(1, getGson().toJson(milestone));
                preparedStatement.setString(2, milestone.getMilestoneName());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while updating milestone to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Get the repeating milestones
     *
     * @return The list of repeating milestones
     */
    @Override
    public CompletableFuture<List<RepeatingMilestone>> getRepeatingMilestones() {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT * FROM `repeating_milestones`")) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    List<RepeatingMilestone> repeatingMilestones = new ArrayList<>();
                    while (resultSet.next()) {
                        repeatingMilestones.add(getGson().fromJson(resultSet.getString("data"), RepeatingMilestone.class));
                    }
                    return repeatingMilestones;
                }
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while getting repeating milestones from database: " + sqlException.getMessage());
            }
            return null;
        });
    }

    /**
     * Save the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to save
     * @return If the repeating milestone is saved
     */
    @Override
    public CompletableFuture<Boolean> saveRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("INSERT INTO `repeating_milestones`(`name`, `data`) VALUES (?,?)")) {
                preparedStatement.setString(1, repeatingMilestone.getMilestoneName());
                preparedStatement.setString(2, getGson().toJson(repeatingMilestone));
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while saving repeating milestone to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Delete the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to delete
     * @return If the repeating milestone is deleted
     */
    @Override
    public CompletableFuture<Boolean> deleteRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("DELETE FROM `repeating_milestones` WHERE `name`=?")) {
                preparedStatement.setString(1, repeatingMilestone.getMilestoneName());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while deleting repeating milestone from database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * Update the repeating milestone
     *
     * @param repeatingMilestone The repeating milestone to update
     * @return If the repeating milestone is updated
     */
    @Override
    public CompletableFuture<Boolean> updateRepeatingMilestone(RepeatingMilestone repeatingMilestone) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection
                    .prepareStatement("UPDATE `repeating_milestones` SET `data`=? WHERE `name`=?")) {
                preparedStatement.setString(1, getGson().toJson(repeatingMilestone));
                preparedStatement.setString(2, repeatingMilestone.getMilestoneName());
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException sqlException) {
                Playtime.getPlugin().getLogger().severe("Error while updating repeating milestone to database: " + sqlException.getMessage());
            }
            return false;
        });
    }

    /**
     * @param uuid
     * @param event
     * @param time
     * @return
     */
    @Override
    public CompletableFuture<Boolean> addPlaytimeHistory(UUID uuid, Event event, int time) {
        return CompletableFuture.supplyAsync(() -> {
            try (PreparedStatement preparedStatement = connection.prepareStatement(
                    "INSERT INTO playtime_history (`uuid`, `time`, `date`) VALUES (?, ?, ?)")) {
                preparedStatement.setString(1, uuid.toString());
                preparedStatement.setInt(2, time);
                preparedStatement.setDate(4, new Date(new java.util.Date().getTime()));
                preparedStatement.executeUpdate();
                return true;
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/core/translations/Messages.java">
package nl.thedutchruben.playtime.core.translations;

import lombok.Getter;
import nl.thedutchruben.mccore.utils.message.MessageUtil;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.utils.Replacement;
import org.bukkit.ChatColor;
import org.bukkit.configuration.file.YamlConfiguration;

import java.util.HashMap;
import java.util.Map;

public enum Messages {

    ONLY_PLAYER_COMMAND("only.player.command", "&cThis is a player only command!"),

    PLAYTIME_INFO_OWN("command.playtime.time_message", "&8[&6PlayTime&8] &7Your playtime is &6%D% &7day(s) &6%H% &7hour(s) &6%M% &7minute(s) &6%S% &7second(s)"),
    PLAYTIME_INFO_OTHER("command.playtime.user_time_message", "&8[&6PlayTime&8] &7%NAME% 's playtime is &6%D% &7day(s) &6%H% &7hour(s) &6%M% &7minute(s) &6%S% &7second(s)"),
    PLAYER_RESET_CONFIRM("command.playtime.reset_time_confirm", "&cUser time reset!"),
    TIME_ADDED("command.playtime.time_added", "&aYou have successfully added playtime to <player>"),
    TIME_REMOVED("command.playtime.time_removed", "&aYou have successfully removed playtime from <player>"),
    PLAYTIME_IMPORTED("command.playtime.imported", "&aYou have successfully imported <count> players!"),
    PLAYER_DOES_NOT_EXIST("command.playtime.player_does_not_exist", "&cThe player does not exist!"),

    MILESTONE_CREATED("command.milestone.created", "&aThe milestone is created!"),
    MILESTONE_ITEM_ADDED("command.milestone.item_added", "&aYou added successfully an item to the milestone!"),
    MILESTONE_COMMAND_ADDED("command.milestone.command_added", "&aYou added successfully a command to the milestone!"),
    MILESTONE_FIREWORK_TOGGLED("command.milestone.firework_toggled", "&aYou <state> the firework for the milestone"),
    MILESTONE_SET_FIREWORK_AMOUNT("command.milestone.set_firework_amount", "&aYou set the firework amount to <amount>"),
    MILESTONE_SET_FIREWORK_DELAY("command.milestone.set_firework_delay", "&aYou set the firework delay to <amount>"),
    MILESTONE_REMOVED("command.milestone.removed", "&aYou have successfully removed the milestone!"),
    MILESTONE_COMMAND_REMOVED("command.milestone.command_removed", "&aYou removed a command from the milestone!"),
    MILESTONE_LIST("command.milestone.list", "%MILESTONE_NAME% Time: Days: %D% Hours: %H% ,Minute's: %M% ,Seconds's: %S%"),
    MILESTONE_INFO("command.milestone.info", "%MILESTONE_NAME% Time: Days: %D% Hours: %H% ,Minute's: %M% ,Seconds's: %S% Rewards: Commands(%REWARD_COMMAND_COUNT%): %REWARD_COMMAND% Items(%REWARD_ITEMS_COUNT%): %REWARD_ITEMS%"),
    MILESTONE_MESSAGE_ADDED("command.milestone.message_added", "&aYou have successfully added a message to a milestone!"),
    MILESTONE_MESSAGE_REMOVED("command.milestone.message_removed", "&aYou have removed a message from a milestone!"),
    MILESTONE_REWARDS_APPLIED("command.milestone.rewards_applied", "&aYou have successfully applied the rewards!"),
    MILESTONE_DOES_NOT_EXIST("command.milestone.milestone_does_not_exist", "&cThe milestone does not exist!"),
    MILESTONE_COULD_NOT_BE_CREATED("command.milestone.could_not_be_created", "&cThe milestone could not be created!"),

    REPEATING_MILESTONE_REMOVED("command.repeating_milestone.removed", "&aYou have successfully removed the repeating milestone!"),
    REPEATING_MILESTONE_DOES_NOT_EXIST("command.repeating_milestone.does_not_exist", "&cThe repeating milestone does not exist!"),
    REPEATING_MILESTONE_COULD_NOT_BE_CREATED("command.repeating_milestone.could_not_be_created", "&cThe repeating milestone could not be created!"),
    REPEATING_MILESTONE_CREATED("command.repeating_milestone.created", "&aYou have successfully created a repeating milestone!"),
    REPEATING_MILESTONE_DELETED("command.repeating_milestone.deleted", "&aYou have successfully deleted a repeating milestone!"),
    REPEATING_MILESTONE_ITEM_ADDED("command.repeating_milestone.item_added", "&aYou have successfully added an item to the repeating milestone!"),
    REPEATING_MILESTONE_ITEM_REMOVED("command.repeating_milestone.item_removed", "&aYou have successfully removed an item from the repeating milestone!"),
    REPEATING_MILESTONE_COMMAND_ADDED("command.repeating_milestone.command_added", "&aYou have successfully added a command to the repeating milestone!"),
    REPEATING_MILESTONE_FIREWORK_TOGGLED("command.repeating_milestone.firework_toggled", "&aYou <state> the firework for the repeating milestone"),
    REPEATING_MILESTONE_SET_FIREWORK_AMOUNT("command.repeating_milestone.set_firework_amount", "&aYou set the firework amount to <amount>"),
    REPEATING_MILESTONE_SET_FIREWORK_DELAY("command.repeating_milestone.set_firework_delay", "&aYou set the firework delay to <amount>"),
    REPEATING_MILESTONE_MESSAGE_ADDED("command.repeating_milestone.message_added", "&aYou have successfully added a message to a repeating milestone!"),
    REPEATING_MILESTONE_MESSAGE_REMOVED("command.repeating_milestone.message_removed", "&aYou have removed a message from a repeating milestone!"),
    REPEATING_MILESTONE_LIST("command.repeating_milestone.list", "%REPEATING_MILESTONE_NAME% Time: Days: %D% Hours: %H% ,Minute's: %M% Seconds's: %S%"),
    ;

    @Getter
    private static final Map<String, String> messages = new HashMap<>();
    private final String path;
    private final String fallBack;

    Messages(String path, String fallBack) {
        this.path = path;
        this.fallBack = fallBack;
    }

    /**
     * Set up the default messages
     */
    public static void setupDefaults() {
        YamlConfiguration file = Playtime.getInstance().getFileManager().getConfig("translations.yml").get();
        for (Messages value : Messages.values()) {
            if (!file.contains(value.path)) {
                file.set(value.path, value.fallBack);
            }
        }

        Playtime.getInstance().getFileManager().getConfig("lang/translations.yml").save();
    }

    /**
     * Get the message from the path
     *
     * @param replacements The replacements to replace in the message
     * @return The message
     */
    public String getMessage(Replacement... replacements) {
        String message = messages.computeIfAbsent(path, a -> {
            YamlConfiguration file = Playtime.getInstance().getFileManager().getConfig("lang/translations.yml").get();
            return file.getString(path, fallBack);
        });
        message = MessageUtil.translateHexColorCodes("<", ">", ChatColor.translateAlternateColorCodes('&', message));
        for (Replacement replacement : replacements) {
            message = message.replace(replacement.getFrom(), replacement.getTo());
        }
        return message;
    }
}
</file>

<file path="src/main/java/nl/thedutchruben/playtime/modules/milestones/commands/RepeatingMilestoneCommand.java">
package nl.thedutchruben.playtime.modules.milestones.commands;

import net.md_5.bungee.api.chat.ClickEvent;
import net.md_5.bungee.api.chat.TextComponent;
import nl.thedutchruben.mccore.spigot.commands.Command;
import nl.thedutchruben.mccore.spigot.commands.Default;
import nl.thedutchruben.mccore.spigot.commands.SubCommand;
import nl.thedutchruben.playtime.Playtime;
import nl.thedutchruben.playtime.core.events.repeatingmilestone.RepeatingMilestoneCreateEvent;
import nl.thedutchruben.playtime.core.events.repeatingmilestone.RepeatingMilestoneDeleteEvent;
import nl.thedutchruben.playtime.core.events.repeatingmilestone.RepeatingMilestoneUpdateEvent;
import nl.thedutchruben.playtime.core.objects.RepeatingMilestone;
import nl.thedutchruben.playtime.core.translations.Messages;
import nl.thedutchruben.playtime.utils.Replacement;
import org.bukkit.Bukkit;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Command(
        command = "repeatingmilestone",
        description = "Main repeatingmilestone command",
        permission = "playtime.repeatingmilestone",
        console = true)
public class RepeatingMilestoneCommand {

    @SubCommand(
            subCommand = "create",
            description = "Create a new reapeating milestone",
            usage = "<name> <time>",
            permission = "playtime.repeatingmilestone.create",
            console = true,
            minParams = 3,
            maxParams = 3)
    public void create(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = new RepeatingMilestone();
        repeatingMilestone.setMilestoneName(args.get(1));
        long time = getTime(args.get(2));
        repeatingMilestone.setOnlineTime(time);
        Playtime.getInstance().getStorage().saveRepeatingMilestone(repeatingMilestone).thenAcceptAsync(aBoolean -> {
            if (aBoolean) {
                commandSender.sendMessage(Messages.REPEATING_MILESTONE_CREATED.getMessage());
                Bukkit.getPluginManager().callEvent(new RepeatingMilestoneCreateEvent(repeatingMilestone));
            } else {
                commandSender.sendMessage(Messages.REPEATING_MILESTONE_COULD_NOT_BE_CREATED.getMessage());
            }
        });
    }

    @SubCommand(
            subCommand = "delete",
            description = "Delete a repeating milestone",
            usage = "<repeatingMilestone>",
            permission = "playtime.repeatingmilestone.delete",
            minParams = 2,
            maxParams = 2,
            console = true
    )
    public void delete(CommandSender commandSender, List<String> args) {
        RepeatingMilestone milestone = RepeatingMilestone.get(args.get(1));
        if (milestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        Playtime.getInstance().getStorage().deleteRepeatingMilestone(milestone).thenAcceptAsync(aBoolean -> {
            if (aBoolean) {
                commandSender.sendMessage(Messages.REPEATING_MILESTONE_DELETED.getMessage());
                Bukkit.getPluginManager().callEvent(new RepeatingMilestoneDeleteEvent(milestone));
            } else {
                commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            }
        });
    }

    @Default
    @SubCommand(
        subCommand = "list",
        description = "List all milestones",
        permission = "playtime.repeatingmilestone.list",
        console = true
    )
    public void list(CommandSender commandSender, List<String> args) {
        List<RepeatingMilestone> repeatingMilestones = Playtime.getInstance().getRepeatingMilestones();
        commandSender.sendMessage("Repeating milestones: ");
        for (RepeatingMilestone milestone : repeatingMilestones) {
            TextComponent message = new TextComponent(Messages.REPEATING_MILESTONE_LIST.getMessage(
                    new Replacement("%REPEATING_MILESTONE_NAME%", milestone.getMilestoneName()),
                    new Replacement("%D%", String.valueOf(TimeUnit.SECONDS.toDays(milestone.getOnlineTime()))),
                    new Replacement("%H%", String.valueOf(TimeUnit.SECONDS.toHours(milestone.getOnlineTime()) % 24)),
                    new Replacement("%M%", String.valueOf(TimeUnit.SECONDS.toMinutes(milestone.getOnlineTime()) % 60)),
                    new Replacement("%S%", String.valueOf(TimeUnit.SECONDS.toSeconds(milestone.getOnlineTime()) % 60))
            ));
            message.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/repeatingmilestone info " + milestone.getMilestoneName()));
            commandSender.spigot().sendMessage(message);
        }
    }

    @SubCommand(
        subCommand = "info",
        description = "Get info about a milestone",
        usage = "<repeatingMilestone>",
        permission = "playtime.repeatingmilestone.info",
        minParams = 2,
        maxParams = 2,
        console = true
    )
    public void info(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));
        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        commandSender.sendMessage("Repeating milestone: " + repeatingMilestone.getMilestoneName());
        commandSender.sendMessage(" Time: " + repeatingMilestone.getOnlineTime());
        commandSender.sendMessage(" Rewards("+ repeatingMilestone.getItemStacks().size() +"): ");
        repeatingMilestone.getItemStacks().forEach(map -> commandSender.sendMessage("  " + map.toString()));
        commandSender.sendMessage(" Commands("+ repeatingMilestone.getCommands().size() +"): ");
        repeatingMilestone.getCommands().forEach(command -> commandSender.sendMessage("  " + command));
        commandSender.sendMessage(" Messages("+ repeatingMilestone.getMessages().size() +"): ");
        repeatingMilestone.getMessages().forEach(message -> commandSender.sendMessage("  " + message));
        commandSender.sendMessage(" Firework show: " + repeatingMilestone.isFireworkShow());
        if (repeatingMilestone.isFireworkShow()) {
            commandSender.sendMessage(" Firework show delay: " + repeatingMilestone.getFireworkShowSecondsBetween());
            commandSender.sendMessage(" Firework show amount: " + repeatingMilestone.getFireworkShowAmount());
        }
    }

    @SubCommand(
        subCommand = "test",
        description = "Execute the rewards of a repeatingmilestone on yourself",
        usage = "<repeatingMilestone>",
        permission = "playtime.repeatingmilestone.test",
        minParams = 2,
        maxParams = 2
    )
    public void test(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));
        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        repeatingMilestone.apply((Player) commandSender);
        commandSender.sendMessage(Messages.MILESTONE_REWARDS_APPLIED.getMessage());
    }

    @SubCommand(
        subCommand = "addItemToMilestone",
        description = "Add the item in your main hand to the milestone",
        usage = "<repeatingMilestone>",
        permission = "playtime.repeatingmilestone.addItemToMilestone",
        minParams = 2,
        maxParams = 2
    )
    public void addItemToMilestone(CommandSender commandSender, List<String> args) {
        Player player = (Player) commandSender;
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));

        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }

        repeatingMilestone.addItemStack(player.getInventory().getItemInMainHand());
        Playtime.getInstance().getStorage().updateRepeatingMilestone(repeatingMilestone);
        commandSender.sendMessage(Messages.REPEATING_MILESTONE_ITEM_ADDED.getMessage());
        Bukkit.getPluginManager().callEvent(new RepeatingMilestoneUpdateEvent(repeatingMilestone));
    }

    @SubCommand(
        subCommand = "addCommand",
        description = "Add a command to the milestone",
        usage = "<repeatingMilestone> <command>",
        permission = "playtime.repeatingmilestone.addCommand",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void addCommandToMilestone(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));

        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }

        String command = String.join(" ", args.subList(2, args.size()));
        repeatingMilestone.addCommand(command);
        Playtime.getInstance().getStorage().updateRepeatingMilestone(repeatingMilestone);
        commandSender.sendMessage(Messages.REPEATING_MILESTONE_COMMAND_ADDED.getMessage());
        Bukkit.getPluginManager().callEvent(new RepeatingMilestoneUpdateEvent(repeatingMilestone));
    }

    @SubCommand(
        subCommand = "removeCommand",
        description = "Remove a command from the milestone",
        usage = "<repeatingMilestone> <command>",
        permission = "playtime.repeatingmilestone.removeCommand",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void removeCommandFromMilestone(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));

        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }

        String command = String.join(" ", args.subList(2, args.size()));
        repeatingMilestone.removeCommand(command);
        Playtime.getInstance().getStorage().updateRepeatingMilestone(repeatingMilestone);
        commandSender.sendMessage(Messages.REPEATING_MILESTONE_ITEM_REMOVED.getMessage());
        Bukkit.getPluginManager().callEvent(new RepeatingMilestoneUpdateEvent(repeatingMilestone));
    }

    @SubCommand(
        subCommand = "togglefirework",
        description = "Toggle the firework for a milestone",
        usage = "<repeatingMilestone>",
        permission = "playtime.repeatingmilestone.togglefirework",
        minParams = 2,
        maxParams = 2,
        console = true
    )
    public void toggleFirework(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));

        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }

        repeatingMilestone.setFireworkShow(!repeatingMilestone.isFireworkShow());
        Playtime.getInstance().getStorage().updateRepeatingMilestone(repeatingMilestone);
        commandSender.sendMessage(Messages.REPEATING_MILESTONE_FIREWORK_TOGGLED.getMessage(new Replacement("<state>", repeatingMilestone.isFireworkShow() ? "enabled" : "disabled")));
        Bukkit.getPluginManager().callEvent(new RepeatingMilestoneUpdateEvent(repeatingMilestone));
    }

    @SubCommand(
        subCommand = "setfireworkamount",
        description = "Set the amount of firework for a milestone",
        usage = "<repeatingMilestone> <amount>",
        permission = "playtime.repeatingmilestone.setfireworkamount",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void setFireworkAmount(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));

        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }

        int amount = Integer.parseInt(args.get(2));
        repeatingMilestone.setFireworkShowAmount(amount);
        Playtime.getInstance().getStorage().updateRepeatingMilestone(repeatingMilestone);
        commandSender.sendMessage(Messages.REPEATING_MILESTONE_SET_FIREWORK_AMOUNT.getMessage(new Replacement("<amount>", String.valueOf(amount))));
        Bukkit.getPluginManager().callEvent(new RepeatingMilestoneUpdateEvent(repeatingMilestone));
    }

    @SubCommand(
        subCommand = "setfireworkdelay",
        description = "Set the delay between fireworks for a milestone",
        usage = "<repeatingMilestone> <time in seconds>",
        permission = "playtime.repeatingmilestone.setfireworkdelay",
        minParams = 4,
        maxParams = 4,
        console = true
    )
    public void setFireworkDelay(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));
        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        int delay = Integer.parseInt(args.get(2));
        repeatingMilestone.setFireworkShowSecondsBetween(delay);
        Playtime.getInstance().getStorage().updateRepeatingMilestone(repeatingMilestone);
        commandSender.sendMessage(Messages.REPEATING_MILESTONE_SET_FIREWORK_DELAY.getMessage(new Replacement("<amount>", String.valueOf(delay))));
        Bukkit.getPluginManager().callEvent(new RepeatingMilestoneUpdateEvent(repeatingMilestone));
    }

    @SubCommand(
        subCommand = "addMessage",
        description = "Add a message to a milestone",
        usage = "<repeatingMilestone> <message>",
        permission = "playtime.repeatingmilestone.addMessage",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void addMessage(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));
        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        String message = String.join(" ", args.subList(2, args.size()));
        repeatingMilestone.addMessage(message);
        Playtime.getInstance().getStorage().updateRepeatingMilestone(repeatingMilestone);
        commandSender.sendMessage(Messages.REPEATING_MILESTONE_MESSAGE_ADDED.getMessage());
        Bukkit.getPluginManager().callEvent(new RepeatingMilestoneUpdateEvent(repeatingMilestone));
    }

    @SubCommand(
        subCommand = "removeMessage",
        description = "Remove a message from a milestone",
        usage = "<repeatingMilestone> <message>",
        permission = "playtime.repeatingmilestone.removeMessage",
        minParams = 3,
        maxParams = 3,
        console = true
    )
    public void removeMessage(CommandSender commandSender, List<String> args) {
        RepeatingMilestone repeatingMilestone = RepeatingMilestone.get(args.get(1));
        if (repeatingMilestone == null) {
            commandSender.sendMessage(Messages.REPEATING_MILESTONE_DOES_NOT_EXIST.getMessage());
            return;
        }
        String message = String.join(" ", args.subList(2, args.size()));
        repeatingMilestone.removeMessage(message);
        Playtime.getInstance().getStorage().updateRepeatingMilestone(repeatingMilestone);
        commandSender.sendMessage(Messages.REPEATING_MILESTONE_MESSAGE_REMOVED.getMessage());
        Bukkit.getPluginManager().callEvent(new RepeatingMilestoneUpdateEvent(repeatingMilestone));
    }

    private Map<String, Integer> parseTime(String time) {
        Pattern pattern = Pattern.compile("(\\d+)([A-Za-z]+)");
        Matcher matcher = pattern.matcher(time);
        Map<String, Integer> timeMap = new HashMap<>();

        while (matcher.find()) {
            int value = Integer.parseInt(matcher.group(1));
            String unit = matcher.group(2);
            timeMap.put(unit, value);
        }
        return timeMap;
    }

    private long getTime(String time) {
        AtomicLong parsedTime = new AtomicLong();
        Map<String, Integer> timeMap = parseTime(time);
        timeMap.forEach((unit, value) -> {
            switch (unit.toLowerCase(Locale.ROOT)) {
                case "s":
                case "second":
                case "seconds":
                    parsedTime.addAndGet(TimeUnit.SECONDS.toSeconds(value));
                    break;
                case "m":
                case "minute":
                case "minutes":
                    parsedTime.addAndGet(TimeUnit.MINUTES.toSeconds(value));
                    break;
                case "h":
                case "hour":
                case "hours":
                    parsedTime.addAndGet(TimeUnit.HOURS.toSeconds(value));
                    break;
                case "d":
                case "day":
                case "days":
                    parsedTime.addAndGet(TimeUnit.DAYS.toSeconds(value));
                    break;
                case "w":
                case "week":
                case "weeks":
                    parsedTime.addAndGet(TimeUnit.DAYS.toSeconds(value * 7L));
                    break;
                case "mo":
                case "month":
                case "months":
                    parsedTime.addAndGet(TimeUnit.DAYS.toSeconds(value * 30));
                    break;
                case "y":
                case "year":
                case "years":
                    parsedTime.addAndGet(TimeUnit.DAYS.toSeconds(value * 365L));
                    break;
                default:
                    parsedTime.addAndGet(TimeUnit.SECONDS.toSeconds(value));
            }
        });

        return parsedTime.get();
    }
}
</file>

<file path="README.md">
## Warning: 2.0 is in development and is not stable. Use at your own risk.
### 2.0 Checklist:
- [x] New database implementation
- [ ] Playtime history system
- [ ] New Afk system
- [ ] New implementation for placeholders
- [ ] Updated system for rewards
- [ ] Migration testing from 1.* to 2.0

# Playtime Plugin

![GitHub Release](https://img.shields.io/github/v/release/thedutchruben/tdrplaytime?sort=date&label=Latest%20release)
![GitHub Release](https://img.shields.io/github/v/release/thedutchruben/tdrplaytime?include_prereleases&sort=date&label=Latest%20pre-release)

### Downloads
![Spiget Downloads](https://img.shields.io/spiget/downloads/47894?label=Spigot&labelColor=Spigot&link=https%3A%2F%2Fwww.spigotmc.org%2Fresources%2Ftdr-playtime-rewards-mysql.47894%2F)
![CurseForge Downloads](https://img.shields.io/curseforge/dt/279491?label=Curse%20Forge)
![GitHub Downloads](https://img.shields.io/github/downloads/thedutchruben/tdrplaytime/total?label=GitHub)
![Hangar Downloads](https://img.shields.io/hangar/dt/tdrplaytime?label=Hangar&link=https%3A%2F%2Fhangar.papermc.io%2FTheDutchRuben%2FTDRPlaytime)
![Modrinth Downloads](https://img.shields.io/modrinth/dt/t9QEZM17?label=Modrinth&link=https%3A%2F%2Fmodrinth.com%2Fplugin%2Ftdr-playtime)

## Overview
TDRPlaytime is a Minecraft plugin that tracks player playtime and rewards players with milestones. The plugin is built using Java and Maven.

## Features
- Track player playtime
- Reward players with items, commands, and messages upon reaching milestones
- Customizable repeating milestones
- Firework shows for milestone celebrations

## Installation
1. Clone the repository:
    ```sh
    git clone https://github.com/thedutchruben/TDRPlaytime.git
    ```
2. Navigate to the project directory:
    ```sh
    cd TDRPlaytime
    ```
3. Build the project using Maven:
    ```sh
    mvn clean install
    ```
4. Place the generated `TDRPlaytime.jar` file in your Minecraft server's `plugins` directory.

## Usage
1. Start your Minecraft server.
2. Configure the plugin by editing the `config.yml` file in the `plugins/TDRPlaytime` directory.
</file>

<file path=".github/workflows/build-release-versions.yml">
on: [release, workflow_dispatch]
name: Build plugin for all platforms

jobs:
  build:
    name: Build Plugin
    runs-on: ubuntu-latest

    strategy:
      matrix:
        downloadSource: [GITHUB, SPIGOT, HANGAR, MODRINTH, CURSE_FORGE]
        java-version: [17] # Adjust if versions differ per platform

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ matrix.java-version }}
          java-package: jdk
          architecture: x64
      - name: Set downloadSource in plugin.yml
        run: |
          sed -i "s/downloadSource:.*/downloadSource: '${{ matrix.downloadSource }}'/" src/main/resources/plugin.yml
          cat src/main/resources/plugin.yml
      - name: Build with Maven
        run: |
          mvn install
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          echo "git_hash=$git_hash" >> $GITHUB_ENV
          echo "artifactPath=$(pwd)/target" >> $GITHUB_ENV
      - name: Extract Maven project version
        id: project
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      - name: Upload Plugin jar to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Plugin-${{ matrix.downloadSource }}.jar
          path: ${{ env.artifactPath }}/TDRPlaytime-${{ steps.project.outputs.version }}.jar

  test-plugins:
    name: Test Plugin
    runs-on: ubuntu-latest

    needs: build
    strategy:
      matrix:
        downloadSource: [GITHUB, SPIGOT, HANGAR, MODRINTH, CURSE_FORGE]
        runtime: ['paper', 'spigot']
        version: [1.18.2, 1.19.4, 1.20.4]
        include:
          - version: 1.18.2
            java-version: 17
          - version: 1.19.4
            java-version: 17
          - version: 1.20.4
            java-version: 17

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: Plugin-${{ matrix.downloadSource }}.jar
          path: ./plugin
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ matrix.java-version }}
          java-package: jdk
          architecture: x64
      - name: Test Plugin - ${{ matrix.downloadSource }} - ${{ matrix.version }}
        uses:  gmitch215/TestMC@v2
        with:
          path: ./plugin/Plugin-${{ matrix.downloadSource }}.jar
          runtime: ${{ matrix.runtime }}
          version: ${{ matrix.version }}
  update-realses :
    name: Update Releases
    runs-on: ubuntu-latest
    needs: test-plugins
    steps:
      - name: Generate Commit Message List since last release
        id: commit_messages
        run: |
          last_tag=$(git describe --tags --abbrev=0)
          echo "Last release tag: $last_tag"
          commit_messages=$(git log $last_tag..HEAD --pretty=format:"- %s (%h)")
          echo "commit_messages=$commit_messages" >> $GITHUB_ENV
      - name: Create Pre-release and Upload Asset
        uses: actions/github-script@v7
        if: github.event_name == 'release'
        with:
          script: |
            const fs = require('fs');
            const path = `${process.env.artifactPath}/TDRPlaytime-${{ steps.project.outputs.version }}.jar`;

            // Generate the release body with commit messages
            const body = `### Changes since last release:\n${process.env.commit_messages}`;

            // get the realease
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            release.body = release.body + body;
            
            // update release
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              tag_name: release.tag_name,
              name: release.name,
              body: release.body,
              draft: false,
              prerelease: false
            });
</file>

<file path=".github/workflows/update-test-server.yml">
name: Update Test Server

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and push Docker image
    concurrency:
      group: ${{ github.repository }}-test-server
      cancel-in-progress: true
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-test-server
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          java-package: jdk
          architecture: x64
      - name: Build with Maven
        run: |
          mvn install
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          echo "git_hash=$git_hash" >> $GITHUB_ENV
          echo "artifactPath=$(pwd)/target" >> $GITHUB_ENV
      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project
      - name: Copy JAR to test-server directory
        run: cp ${{ env.artifactPath }}/TDRPlaytime-${{ steps.project.outputs.version }}.jar .github/test-server/TDRPlaytime.jar
      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        with:
          context: .github/test-server
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - run: curl -X GET https://n8n.thedutchservers.com/webhook/56343323-a23b-4748-b10c-44eda54b9fd1
</file>

<file path=".github/workflows/javadoc.yml">
name: Deploy Javadoc

on:
  push:
    branches:
      - master
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # if you have a protection rule on your repository, you'll need to give write permission to the workflow.
    steps:
      - name: Deploy JavaDoc 🚀
        uses: MathieuSoysal/Javadoc-publisher.yml@v3.0.2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          javadoc-branch: javadoc
          java-version: 17
          target-folder: docs
          project: maven
          custom-command: mvn javadoc:javadoc
</file>

<file path=".github/test-server/Dockerfile">
# Use the official OpenJDK image as a base
FROM openjdk:25-jdk-slim
# Install curl and jq
RUN apk add --no-cache curl jq
# Set the working directory
WORKDIR /minecraft

# Download the Spigot server jar file
RUN wget https://api.papermc.io/v2/projects/paper/versions/1.21.4/builds/72/downloads/paper-1.21.4-72.jar -O spigot.jar
COPY download-plugin.sh download-plugin.sh

# Expose the Minecraft server port
EXPOSE 25565

# Accept the EULA
RUN echo "eula=true" > eula.txt

RUN mkidr plugins
COPY TDRPlaytime.jar plugins/TDRPlaytime.jar

# Start the Spigot server
CMD ["java", "-Xmx1024M", "-Xms1024M", "-jar", "spigot.jar", "nogui"]
</file>

<file path="pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>nl.thedutchruben</groupId>
    <artifactId>playtime</artifactId>
    <version>2.0.0-BETA</version>
    <packaging>jar</packaging>

    <name>TDRPlaytime</name>

    <description>Playtime plugin</description>
    <properties>
        <java.version>1.9</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>
        <finalName>TDRPlaytime-${project.version}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.11.2</version>
                <configuration>
                    <outputDirectory>${project.build.directory}/site</outputDirectory>
                    <encoding>UTF-8</encoding>
                    <show>protected</show>
                    <links>
                        <link>https://docs.oracle.com/en/java/javase/11/docs/api/</link>
                    </links>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <relocations>
                        <relocation>
                            <pattern>org.bstats</pattern>
                            <shadedPattern>nl.thedutchruben.playtime.bstats</shadedPattern>
                        </relocation>
                    </relocations>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>
            <!-- Configure Surefire for JUnit 5 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version>
                <configuration>
                    <includes>
                        <include>**/*Test.java</include>
                    </includes>
                    <systemPropertyVariables>
                        <junit.jupiter.execution.parallel.enabled>false</junit.jupiter.execution.parallel.enabled>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <!-- JaCoCo for code coverage -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.13</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>

    <repositories>
        <repository>
            <id>thedutchruben-repo</id>
            <url>https://maven.thedutchservers.com/releases</url>
        </repository>
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
        <repository>
            <id>spigotmc-repo</id>
            <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
        </repository>
        <repository>
            <id>sonatype</id>
            <url>https://oss.sonatype.org/content/groups/public/</url>
        </repository>
        <repository>
            <id>CodeMC</id>
            <url>https://repo.codemc.org/repository/maven-public</url>
        </repository>
        <repository>
            <id>placeholderapi</id>
            <url>https://repo.extendedclip.com/content/repositories/placeholderapi/</url>
        </repository>
        <repository>
            <id>jeff-media-public</id>
            <url>https://hub.jeff-media.com/nexus/repository/jeff-media-public/</url>
        </repository>
        <repository>
            <id>essentialsx-releases</id>
            <name>EssentialsX API Repository</name>
            <url>https://repo.essentialsx.net/releases</url>
        </repository>
        <repository>
            <id>paper-repo</id>
            <url>https://repo.papermc.io/repository/maven-public/</url>
        </repository>
        <repository>
            <id>AlessioDP</id>
            <url>https://repo.alessiodp.com/releases/</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>net.byteflux</groupId>
            <artifactId>libby-bukkit</artifactId>
            <version>1.3.1</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>6.2.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.spigotmc</groupId>
            <artifactId>spigot-api</artifactId>
            <version>1.21.1-R0.1-SNAPSHOT</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.bstats</groupId>
            <artifactId>bstats-bukkit</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.38</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>me.clip</groupId>
            <artifactId>placeholderapi</artifactId>
            <version>2.11.6</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>nl.thedutchruben</groupId>
            <artifactId>mccore</artifactId>
            <version>1.4.9</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>net.essentialsx</groupId>
            <artifactId>EssentialsX</artifactId>
            <version>2.20.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.mongodb</groupId>
            <artifactId>mongodb-driver-sync</artifactId>
            <version>5.2.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.mongodb</groupId>
            <artifactId>bson</artifactId>
            <version>5.2.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.12.1</version>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.14.2</version>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>5.14.2</version>
        </dependency>
        <dependency>
            <groupId>com.github.seeseemelk</groupId>
            <artifactId>MockBukkit-v1.20</artifactId>
            <version>3.93.2</version>
        </dependency>
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.46.1.2</version>
        </dependency>
    </dependencies>
</project>
</file>

<file path=".github/workflows/pre-release.yml">
name: Create/Update Pre-release

on:
  push:
    branches:
      - main

jobs:
  pre_release:
    name: Create/Update Pre-release
    concurrency:
      group: ${{ github.repository }}-pre-release
      cancel-in-progress: true
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-test-server
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          java-package: jdk
          architecture: x64
      - name: Build with Maven
        run: |
          mvn install
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          echo "git_hash=$git_hash" >> $GITHUB_ENV
          echo "artifactPath=$(pwd)/target" >> $GITHUB_ENV
      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project
      - name: Upload Plugin jar
        uses: actions/upload-artifact@v4
        with:
          name: Plugin-${{ env.snapshotVersion }}-${{ env.git_hash }}.jar
          path: ${{ env.artifactPath }}/TDRPlaytime-${{ steps.project.outputs.version }}.jar
      - name: Sleep for 5 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '5s'
      - name: Generate Commit Message List
        id: commit_messages
        run: |
          last_tag=$(git describe --tags --abbrev=0)
          echo "Last release tag: $last_tag"
          commit_messages=$(git log $last_tag..HEAD --pretty=format:"- %s (%h)" | tr '\n' '|' )
          echo "commit_messages=$commit_messages" >> $GITHUB_ENV
      - name: Create Pre-release and Upload Asset
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = `${process.env.artifactPath}/TDRPlaytime-${{ steps.project.outputs.version }}.jar`;
            
            // Decode commit messages
            const commitMessages = process.env.commit_messages.replace(/\|/g, '\n');
            const body = `### Changes since last release:\n${commitMessages}`;
            
            // Create the release
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `pre-release-${process.env.git_hash}`,
              target_commitish: context.sha,
              name: `Pre-release ${process.env.git_hash}`,
              body: body,
              draft: false,
              prerelease: true
            });
            
            console.log(`Created release: ${release.id}`);
            
            // Upload the JAR file as an asset
            const { data: asset } = await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: `TDRPlaytime-${process.env.git_hash}.jar`,
              data: fs.readFileSync(path),
              headers: {
                'content-type': 'application/java-archive',
                'content-length': fs.statSync(path).size
              }
            });
            
            console.log(`Uploaded asset: ${asset.name}`);
</file>

<file path=".github/workflows/comment-on-pr.yml">
name: Comment on Pull Request

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Java and Maven
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Build the Maven project
    - name: Build with Maven
      run: mvn clean package

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: maven-build
        path: target/*

  comment:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Post comment on PR
      if: ${{ needs.build.result == 'success' || needs.build.result == 'failure' }}
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ needs.build.result }}';
          const artifactUrl = status === 'success' ? 'Artifacts were uploaded successfully.' : 'No artifacts were uploaded.';
          const commentBody = `**Build Status:** ${status.toUpperCase()}\n\n${artifactUrl}`;
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });

          const existingComment = comments.find(comment => comment.body.includes('**Build Status:**'));

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
</file>

</files>
