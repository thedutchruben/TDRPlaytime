name: PR Test Report

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Run tests
        run: mvn test

      - name: Generate JUnit Test Report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: JUnit Test Report
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Generate code coverage report
        run: mvn jacoco:report

      - name: Get test statistics
        id: test-stats
        if: success() || failure()
        run: |
          # Extract test statistics
          TESTS_TOTAL=$(grep -c "<testcase" target/surefire-reports/*.xml | awk -F: '{sum+=$2} END {print sum}')
          TESTS_PASSED=$(grep -c "<testcase" target/surefire-reports/*.xml | awk -F: '{sum+=$2} END {print sum}' | bc)
          TESTS_FAILED=$(grep -c "<failure" target/surefire-reports/*.xml | awk -F: '{sum+=$2} END {print sum}')
          TESTS_SKIPPED=$(grep -c "<skipped" target/surefire-reports/*.xml | awk -F: '{sum+=$2} END {print sum}')
          
          COVERAGE=$(awk -F, 'NR==2 {print $5}' target/site/jacoco/jacoco.csv)
          
          echo "tests_total=$TESTS_TOTAL" >> $GITHUB_OUTPUT
          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
          echo "tests_failed=$TESTS_FAILED" >> $GITHUB_OUTPUT
          echo "tests_skipped=$TESTS_SKIPPED" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Add comment with test results
        if: success() || failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testsTotal = '${{ steps.test-stats.outputs.tests_total }}';
            const testsPassed = '${{ steps.test-stats.outputs.tests_passed }}';
            const testsFailed = '${{ steps.test-stats.outputs.tests_failed }}';
            const testsSkipped = '${{ steps.test-stats.outputs.tests_skipped }}';
            const coverage = '${{ steps.test-stats.outputs.coverage }}';
            
            const failureEmoji = parseInt(testsFailed) > 0 ? '❌' : '✅';
            
            const body = `## Test Report ${failureEmoji}
            
            ### Summary
            - **Total Tests:** ${testsTotal}
            - **Passed:** ${testsPassed}
            - **Failed:** ${testsFailed}
            - **Skipped:** ${testsSkipped}
            - **Code Coverage:** ${coverage}%
            
            ${parseInt(testsFailed) > 0 ? '⚠️ Some tests are failing. Please fix them before merging.' : '🎉 All tests are passing!'}
            `;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const existingComment = comments.find(comment => comment.body.includes('## Test Report'));
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }